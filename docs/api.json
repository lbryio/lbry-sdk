{
    "main": {
        "doc": "Ungrouped commands.",
        "commands": [
            {
                "name": "ffmpeg_find",
                "description": "Get ffmpeg installation information",
                "arguments": [],
                "returns": "(dict) Dictionary of ffmpeg information\n    {\n        'available': (bool) found ffmpeg,\n        'which': (str) path to ffmpeg,\n        'analyze_audio_volume': (bool) should ffmpeg analyze audio\n    }",
                "examples": []
            },
            {
                "name": "get",
                "description": "Download stream from a LBRY name.",
                "arguments": [
                    {
                        "name": "uri",
                        "type": "str",
                        "description": "uri of the content to download",
                        "is_required": false
                    },
                    {
                        "name": "file_name",
                        "type": "str",
                        "description": "specified name for the downloaded file, overrides the stream file name",
                        "is_required": false
                    },
                    {
                        "name": "download_directory",
                        "type": "str",
                        "description": "full path to the directory to download into",
                        "is_required": false
                    },
                    {
                        "name": "timeout",
                        "type": "int",
                        "description": "download timeout in number of seconds",
                        "is_required": false
                    },
                    {
                        "name": "save_file",
                        "type": "bool",
                        "description": "save the file to the downloads directory",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "wallet to check for claim purchase receipts",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"streaming_url\": \"(str) url to stream the file using range requests\",\n                \"completed\": \"(bool) true if download is completed\",\n                \"file_name\": \"(str) name of file\",\n                \"download_directory\": \"(str) download directory\",\n                \"points_paid\": \"(float) credit paid to download file\",\n                \"stopped\": \"(bool) true if download is stopped\",\n                \"stream_hash\": \"(str) stream hash of file\",\n                \"stream_name\": \"(str) stream name\",\n                \"suggested_file_name\": \"(str) suggested file name\",\n                \"sd_hash\": \"(str) sd hash of file\",\n                \"download_path\": \"(str) download path of file\",\n                \"mime_type\": \"(str) mime type of file\",\n                \"key\": \"(str) key attached to file\",\n                \"total_bytes_lower_bound\": \"(int) lower bound file size in bytes\",\n                \"total_bytes\": \"(int) file upper bound size in bytes\",\n                \"written_bytes\": \"(int) written size in bytes\",\n                \"blobs_completed\": \"(int) number of fully downloaded blobs\",\n                \"blobs_in_stream\": \"(int) total blobs on stream\",\n                \"blobs_remaining\": \"(int) total blobs remaining to download\",\n                \"status\": \"(str) downloader status\",\n                \"claim_id\": \"(str) None if claim is not found else the claim id\",\n                \"txid\": \"(str) None if claim is not found else the transaction id\",\n                \"nout\": \"(int) None if claim is not found else the transaction output index\",\n                \"outpoint\": \"(str) None if claim is not found else the tx and output\",\n                \"metadata\": \"(dict) None if claim is not found else the claim metadata\",\n                \"channel_claim_id\": \"(str) None if claim is not found or not signed\",\n                \"channel_name\": \"(str) None if claim is not found or not signed\",\n                \"claim_name\": \"(str) None if claim is not found else the claim name\",\n                \"reflector_progress\": \"(int) reflector upload progress, 0 to 100\",\n                \"uploading_to_reflector\": \"(bool) set to True when currently uploading to reflector\"\n            }",
                "examples": [
                    {
                        "title": "Get a file",
                        "curl": "curl -d'{\"method\": \"get\", \"params\": {\"uri\": \"astream#713086e8213eb2e43f8db0168c11fbb670dcff26\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet get astream#713086e8213eb2e43f8db0168c11fbb670dcff26",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"get\", \"params\": {\"uri\": \"astream#713086e8213eb2e43f8db0168c11fbb670dcff26\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"added_on\": 1651689442,\n    \"blobs_completed\": 1,\n    \"blobs_in_stream\": 1,\n    \"blobs_remaining\": 0,\n    \"channel_claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n    \"channel_name\": \"@channel\",\n    \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n    \"claim_name\": \"astream\",\n    \"completed\": true,\n    \"confirmations\": 4,\n    \"content_fee\": null,\n    \"download_directory\": \"/var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmpu6mdpzjj\",\n    \"download_path\": \"/var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmpu6mdpzjj/tmpnta3qbuz\",\n    \"file_name\": \"tmpnta3qbuz\",\n    \"height\": 214,\n    \"is_fully_reflected\": false,\n    \"key\": \"64a9cfc595fbde1db09cb2aed90ce245\",\n    \"metadata\": {\n      \"source\": {\n        \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n        \"media_type\": \"application/octet-stream\",\n        \"name\": \"tmpnta3qbuz\",\n        \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n        \"size\": \"11\"\n      },\n      \"stream_type\": \"binary\"\n    },\n    \"mime_type\": \"application/octet-stream\",\n    \"nout\": 0,\n    \"outpoint\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5:0\",\n    \"points_paid\": 0.0,\n    \"protobuf\": \"0169c160a125c90c68a16ce197a382a28ee6999a87fc90c0c968700144f7bfba6be4fee0ace026874ae629a7e6158a7b3b944885072662a3d6392938212f45576f00e76d95ee49d32914a010f536f1b49d17b140bc0a90010a8d010a30fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd120b746d706e7461337162757a180b22186170706c69636174696f6e2f6f637465742d73747265616d323043f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n    \"purchase_receipt\": null,\n    \"reflector_progress\": 0,\n    \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n    \"status\": \"finished\",\n    \"stopped\": true,\n    \"stream_hash\": \"2aa82b8d5212a2e794fd115323f812ba0df03e54814d203c0063badbcda99a04d138e6250d0f7cd210ecf05d6d8d1492\",\n    \"stream_name\": \"tmpnta3qbuz\",\n    \"streaming_url\": \"http://localhost:5280/stream/43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n    \"suggested_file_name\": \"tmpnta3qbuz\",\n    \"timestamp\": 1651689434,\n    \"total_bytes\": 16,\n    \"total_bytes_lower_bound\": 0,\n    \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\",\n    \"uploading_to_reflector\": false,\n    \"written_bytes\": 11\n  }\n}"
                    }
                ]
            },
            {
                "name": "publish",
                "description": "Create or replace a stream claim at a given name (use 'stream create/update' for more control).",
                "arguments": [
                    {
                        "name": "name",
                        "type": "str",
                        "description": "name of the content (can only consist of a-z A-Z 0-9 and -(dash))",
                        "is_required": true
                    },
                    {
                        "name": "bid",
                        "type": "decimal",
                        "description": "amount to back the claim",
                        "is_required": false
                    },
                    {
                        "name": "bid_everything",
                        "type": "bool",
                        "description": "bid everything from funding accounts (excluding claims), default: false.",
                        "is_required": false
                    },
                    {
                        "name": "file_path",
                        "type": "str",
                        "description": "path to file to be associated with name.",
                        "is_required": false
                    },
                    {
                        "name": "file_name",
                        "type": "str",
                        "description": "name of file to be associated with stream.",
                        "is_required": false
                    },
                    {
                        "name": "file_hash",
                        "type": "str",
                        "description": "hash of file to be associated with stream.",
                        "is_required": false
                    },
                    {
                        "name": "validate_file",
                        "type": "bool",
                        "description": "validate that the video container and encodings match common web browser support or that optimization succeeds if specified. FFmpeg is required",
                        "is_required": false
                    },
                    {
                        "name": "optimize_file",
                        "type": "bool",
                        "description": "transcode the video & audio if necessary to ensure common web browser support. FFmpeg is required",
                        "is_required": false
                    },
                    {
                        "name": "fee_currency",
                        "type": "string",
                        "description": "specify fee currency",
                        "is_required": false
                    },
                    {
                        "name": "fee_amount",
                        "type": "decimal",
                        "description": "content download fee",
                        "is_required": false
                    },
                    {
                        "name": "fee_address",
                        "type": "str",
                        "description": "address where to send fee payments, will use value from --claim_address if not provided",
                        "is_required": false
                    },
                    {
                        "name": "title",
                        "type": "str",
                        "description": "title of the publication",
                        "is_required": false
                    },
                    {
                        "name": "description",
                        "type": "str",
                        "description": "description of the publication",
                        "is_required": false
                    },
                    {
                        "name": "author",
                        "type": "str",
                        "description": "author of the publication. The usage for this field is not the same as for channels. The author field is used to credit an author who is not the publisher and is not represented by the channel. For example, a pdf file of 'The Odyssey' has an author of 'Homer' but may by published to a channel such as '@classics', or to no channel at all",
                        "is_required": false
                    },
                    {
                        "name": "tags",
                        "type": "list",
                        "description": "add content tags",
                        "is_required": false
                    },
                    {
                        "name": "languages",
                        "type": "list",
                        "description": "languages used by the channel, using RFC 5646 format, eg: for English `--languages=en` for Spanish (Spain) `--languages=es-ES` for Spanish (Mexican) `--languages=es-MX` for Chinese (Simplified) `--languages=zh-Hans` for Chinese (Traditional) `--languages=zh-Hant`",
                        "is_required": false
                    },
                    {
                        "name": "locations",
                        "type": "list",
                        "description": "locations relevant to the stream, consisting of 2 letter `country` code and a `state`, `city` and a postal `code` along with a `latitude` and `longitude`. for JSON RPC: pass a dictionary with aforementioned attributes as keys, eg: ... \"locations\": [{'country': 'US', 'state': 'NH'}] ... for command line: pass a colon delimited list with values in the following order: \"COUNTRY:STATE:CITY:CODE:LATITUDE:LONGITUDE\" making sure to include colon for blank values, for example to provide only the city: ... --locations=\"::Manchester\" with all values set: ... --locations=\"US:NH:Manchester:03101:42.990605:-71.460989\" optionally, you can just pass the \"LATITUDE:LONGITUDE\": ... --locations=\"42.990605:-71.460989\" finally, you can also pass JSON string of dictionary on the command line as you would via JSON RPC ... --locations=\"{'country': 'US', 'state': 'NH'}\"",
                        "is_required": false
                    },
                    {
                        "name": "license",
                        "type": "str",
                        "description": "publication license",
                        "is_required": false
                    },
                    {
                        "name": "license_url",
                        "type": "str",
                        "description": "publication license url",
                        "is_required": false
                    },
                    {
                        "name": "thumbnail_url",
                        "type": "str",
                        "description": "thumbnail url",
                        "is_required": false
                    },
                    {
                        "name": "release_time",
                        "type": "int",
                        "description": "original public release of content, seconds since UNIX epoch",
                        "is_required": false
                    },
                    {
                        "name": "width",
                        "type": "int",
                        "description": "image/video width, automatically calculated from media file",
                        "is_required": false
                    },
                    {
                        "name": "height",
                        "type": "int",
                        "description": "image/video height, automatically calculated from media file",
                        "is_required": false
                    },
                    {
                        "name": "duration",
                        "type": "int",
                        "description": "audio/video duration in seconds, automatically calculated",
                        "is_required": false
                    },
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "sd_hash of stream",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str",
                        "description": "claim id of the publisher channel",
                        "is_required": false
                    },
                    {
                        "name": "channel_name",
                        "type": "str",
                        "description": "name of publisher channel",
                        "is_required": false
                    },
                    {
                        "name": "channel_account_id",
                        "type": "str",
                        "description": "one or more account ids for accounts to look in for channel certificates, defaults to all accounts.",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account to use for holding the transaction",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "funding_account_ids",
                        "type": "list",
                        "description": "ids of accounts to fund this transaction",
                        "is_required": false
                    },
                    {
                        "name": "claim_address",
                        "type": "str",
                        "description": "address where the claim is sent to, if not specified it will be determined automatically from the account",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until transaction is in mempool",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Publish a file",
                        "curl": "curl -d'{\"method\": \"publish\", \"params\": {\"name\": \"a-new-stream\", \"bid\": \"1.0\", \"bid_everything\": false, \"file_path\": \"/var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmpiqoqucie\", \"validate_file\": false, \"optimize_file\": false, \"tags\": [], \"languages\": [], \"locations\": [], \"channel_account_id\": [], \"funding_account_ids\": [], \"preview\": false, \"blocking\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet publish a-new-stream --bid=1.0 --file_path=/var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmpiqoqucie",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"publish\", \"params\": {\"name\": \"a-new-stream\", \"bid\": \"1.0\", \"bid_everything\": false, \"file_path\": \"/var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmpiqoqucie\", \"validate_file\": false, \"optimize_file\": false, \"tags\": [], \"languages\": [], \"locations\": [], \"channel_account_id\": [], \"funding_account_ids\": [], \"preview\": false, \"blocking\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"0100000001f436288b6d1f49f644172f9d722bf8581ea3c61b89b752981f0377fb81ede97d010000006b483045022100e188a4cb9f262370e39c63357e08b3406bdba6678114961a86da08ed77884c3302202a74b3018dcbf8219a56adfc8abee85b719f8898870eb23143a237c1e4bca1cf012102ef71bd06b1d8ccdf58a5a957c2f0a5dcbe7f2db361cef25ca28f4eb0f94105ffffffffff0200e1f50500000000bfb50c612d6e65772d73747265616d4c94000a90010a8d010a30fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd120b746d7069716f7175636965180b22186170706c69636174696f6e2f6f637465742d73747265616d3230c667ad5a29eb8dfd34c3f410cfb5d0ee3bbf6e469e5f328b48008cf19a75fa60cb4180b7594f3607c886a4952975007b6d7576a914ab7315386ea869ad4a6ce7d0f869821906e9f50a88ac54826311000000001976a914a8733291f9303465327b7234cba669be981bbd6a88ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"msdpPYfmDx2gdcxXoxabcivvRpKUdvRNem\",\n        \"amount\": \"3.941448\",\n        \"confirmations\": 3,\n        \"height\": 217,\n        \"nout\": 1,\n        \"timestamp\": 1651689441,\n        \"txid\": \"7de9ed81fb77031f9852b7891bc6a31e58f82b729d2f1744f6491f6d8b2836f4\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mw9VhxS8fuTysjckkJvT6J6iRVj49VFGDn\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"6918be02fa1a86c389087e29a697f70f134aee03\",\n        \"claim_op\": \"create\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"meta\": {},\n        \"name\": \"a-new-stream\",\n        \"normalized_name\": \"a-new-stream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://a-new-stream#6918be02fa1a86c389087e29a697f70f134aee03\",\n        \"timestamp\": null,\n        \"txid\": \"62bf211652e7f417c34b39ecbeeb87dfa1bddd9ec5c107406637ae74c204f9be\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpiqoqucie\",\n            \"sd_hash\": \"c667ad5a29eb8dfd34c3f410cfb5d0ee3bbf6e469e5f328b48008cf19a75fa60cb4180b7594f3607c886a4952975007b\",\n            \"size\": \"11\"\n          },\n          \"stream_type\": \"binary\"\n        },\n        \"value_type\": \"stream\"\n      },\n      {\n        \"address\": \"mvsdpM5JUjaoBTxzzbebBNmJnaPViQq7H5\",\n        \"amount\": \"2.917341\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"timestamp\": null,\n        \"txid\": \"62bf211652e7f417c34b39ecbeeb87dfa1bddd9ec5c107406637ae74c204f9be\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.024107\",\n    \"total_input\": \"3.941448\",\n    \"total_output\": \"3.917341\",\n    \"txid\": \"62bf211652e7f417c34b39ecbeeb87dfa1bddd9ec5c107406637ae74c204f9be\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "resolve",
                "description": "Get the claim that a URL refers to.",
                "arguments": [
                    {
                        "name": "urls",
                        "type": "str, list",
                        "description": "one or more urls to resolve",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "wallet to check for claim purchase receipts",
                        "is_required": false
                    },
                    {
                        "name": "new_sdk_server",
                        "type": "str",
                        "description": "URL of the new SDK server (EXPERIMENTAL)",
                        "is_required": false
                    },
                    {
                        "name": "include_purchase_receipt",
                        "type": "bool",
                        "description": "lookup and include a receipt if this wallet has purchased the claim being resolved",
                        "is_required": false
                    },
                    {
                        "name": "include_is_my_output",
                        "type": "bool",
                        "description": "lookup and include a boolean indicating if claim being resolved is yours",
                        "is_required": false
                    },
                    {
                        "name": "include_sent_supports",
                        "type": "bool",
                        "description": "lookup and sum the total amount of supports you've made to this claim",
                        "is_required": false
                    },
                    {
                        "name": "include_sent_tips",
                        "type": "bool",
                        "description": "lookup and sum the total amount of tips you've made to this claim (only makes sense when claim is not yours)",
                        "is_required": false
                    },
                    {
                        "name": "include_received_tips",
                        "type": "bool",
                        "description": "lookup and sum the total amount of tips you've received to this claim (only makes sense when claim is yours)",
                        "is_required": false
                    }
                ],
                "returns": "Dictionary of results, keyed by url\n    '<url>': {\n            If a resolution error occurs:\n            'error': Error message\n\n            If the url resolves to a channel or a claim in a channel:\n            'certificate': {\n                'address': (str) claim address,\n                'amount': (float) claim amount,\n                'effective_amount': (float) claim amount including supports,\n                'claim_id': (str) claim id,\n                'claim_sequence': (int) claim sequence number (or -1 if unknown),\n                'decoded_claim': (bool) whether or not the claim value was decoded,\n                'height': (int) claim height,\n                'confirmations': (int) claim depth,\n                'timestamp': (int) timestamp of the block that included this claim tx,\n                'has_signature': (bool) included if decoded_claim\n                'name': (str) claim name,\n                'permanent_url': (str) permanent url of the certificate claim,\n                'supports: (list) list of supports [{'txid': (str) txid,\n                                                     'nout': (int) nout,\n                                                     'amount': (float) amount}],\n                'txid': (str) claim txid,\n                'nout': (str) claim nout,\n                'signature_is_valid': (bool), included if has_signature,\n                'value': ClaimDict if decoded, otherwise hex string\n            }\n\n            If the url resolves to a channel:\n            'claims_in_channel': (int) number of claims in the channel,\n\n            If the url resolves to a claim:\n            'claim': {\n                'address': (str) claim address,\n                'amount': (float) claim amount,\n                'effective_amount': (float) claim amount including supports,\n                'claim_id': (str) claim id,\n                'claim_sequence': (int) claim sequence number (or -1 if unknown),\n                'decoded_claim': (bool) whether or not the claim value was decoded,\n                'height': (int) claim height,\n                'depth': (int) claim depth,\n                'has_signature': (bool) included if decoded_claim\n                'name': (str) claim name,\n                'permanent_url': (str) permanent url of the claim,\n                'channel_name': (str) channel name if claim is in a channel\n                'supports: (list) list of supports [{'txid': (str) txid,\n                                                     'nout': (int) nout,\n                                                     'amount': (float) amount}]\n                'txid': (str) claim txid,\n                'nout': (str) claim nout,\n                'signature_is_valid': (bool), included if has_signature,\n                'value': ClaimDict if decoded, otherwise hex string\n            }\n    }",
                "examples": [
                    {
                        "title": "Resolve a claim",
                        "curl": "curl -d'{\"method\": \"resolve\", \"params\": {\"urls\": [\"astream#713086e8213eb2e43f8db0168c11fbb670dcff26\"], \"include_purchase_receipt\": false, \"include_is_my_output\": false, \"include_sent_supports\": false, \"include_sent_tips\": false, \"include_received_tips\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet resolve astream#713086e8213eb2e43f8db0168c11fbb670dcff26",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"resolve\", \"params\": {\"urls\": [\"astream#713086e8213eb2e43f8db0168c11fbb670dcff26\"], \"include_purchase_receipt\": false, \"include_is_my_output\": false, \"include_sent_supports\": false, \"include_sent_tips\": false, \"include_received_tips\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"astream#713086e8213eb2e43f8db0168c11fbb670dcff26\": {\n      \"address\": \"n28FYUe42shoUtuxDH9BKaTsn3rvf2JCV2\",\n      \"amount\": \"1.0\",\n      \"canonical_url\": \"lbry://@channel#8/astream#7\",\n      \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n      \"claim_op\": \"update\",\n      \"confirmations\": 4,\n      \"height\": 214,\n      \"is_channel_signature_valid\": true,\n      \"meta\": {\n        \"activation_height\": 214,\n        \"creation_height\": 213,\n        \"creation_timestamp\": 1651689432,\n        \"effective_amount\": \"1.0\",\n        \"expiration_height\": 714,\n        \"is_controlling\": true,\n        \"reposted\": 0,\n        \"support_amount\": \"0.0\",\n        \"take_over_height\": 213\n      },\n      \"name\": \"astream\",\n      \"normalized_name\": \"astream\",\n      \"nout\": 0,\n      \"permanent_url\": \"lbry://astream#713086e8213eb2e43f8db0168c11fbb670dcff26\",\n      \"short_url\": \"lbry://astream#7\",\n      \"signing_channel\": {\n        \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n        \"amount\": \"1.0\",\n        \"canonical_url\": \"lbry://@channel#8\",\n        \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 8,\n        \"has_signing_key\": false,\n        \"height\": 210,\n        \"meta\": {\n          \"activation_height\": 210,\n          \"claims_in_channel\": 2,\n          \"creation_height\": 209,\n          \"creation_timestamp\": 1651689431,\n          \"effective_amount\": \"1.0\",\n          \"expiration_height\": 710,\n          \"is_controlling\": true,\n          \"reposted\": 0,\n          \"support_amount\": \"0.0\",\n          \"take_over_height\": 209\n        },\n        \"name\": \"@channel\",\n        \"normalized_name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"short_url\": \"lbry://@channel#8\",\n        \"timestamp\": 1651689431,\n        \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n          \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n          \"title\": \"New Channel\"\n        },\n        \"value_type\": \"channel\"\n      },\n      \"timestamp\": 1651689434,\n      \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\",\n      \"type\": \"claim\",\n      \"value\": {\n        \"source\": {\n          \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n          \"media_type\": \"application/octet-stream\",\n          \"name\": \"tmpnta3qbuz\",\n          \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n          \"size\": \"11\"\n        },\n        \"stream_type\": \"binary\"\n      },\n      \"value_type\": \"stream\"\n    }\n  }\n}"
                    }
                ]
            },
            {
                "name": "routing_table_get",
                "description": "Get DHT routing information",
                "arguments": [],
                "returns": "(dict) dictionary containing routing and peer information\n    {\n        \"buckets\": {\n            <bucket index>: [\n                {\n                    \"address\": (str) peer address,\n                    \"udp_port\": (int) peer udp port,\n                    \"tcp_port\": (int) peer tcp port,\n                    \"node_id\": (str) peer node id,\n                }\n            ]\n        },\n        \"node_id\": (str) the local dht node id\n        \"prefix_neighbors_count\": (int) the amount of peers sharing the same byte prefix of the local node id\n    }",
                "examples": []
            },
            {
                "name": "status",
                "description": "Get daemon status",
                "arguments": [],
                "returns": "(dict) lbrynet-daemon status\n    {\n        'installation_id': (str) installation id - base58,\n        'is_running': (bool),\n        'skipped_components': (list) [names of skipped components (str)],\n        'startup_status': { Does not include components which have been skipped\n            'blob_manager': (bool),\n            'blockchain_headers': (bool),\n            'database': (bool),\n            'dht': (bool),\n            'exchange_rate_manager': (bool),\n            'hash_announcer': (bool),\n            'peer_protocol_server': (bool),\n            'file_manager': (bool),\n            'libtorrent_component': (bool),\n            'upnp': (bool),\n            'wallet': (bool),\n        },\n        'connection_status': {\n            'code': (str) connection status code,\n            'message': (str) connection status message\n        },\n        'blockchain_headers': {\n            'downloading_headers': (bool),\n            'download_progress': (float) 0-100.0\n        },\n        'wallet': {\n            'connected': (str) host and port of the connected spv server,\n            'blocks': (int) local blockchain height,\n            'blocks_behind': (int) remote_height - local_height,\n            'best_blockhash': (str) block hash of most recent block,\n            'is_encrypted': (bool),\n            'is_locked': (bool),\n            'connected_servers': (list) [\n                {\n                    'host': (str) server hostname,\n                    'port': (int) server port,\n                    'latency': (int) milliseconds\n                }\n            ],\n        },\n        'libtorrent_component': {\n            'running': (bool) libtorrent was detected and started successfully,\n        },\n        'dht': {\n            'node_id': (str) lbry dht node id - hex encoded,\n            'peers_in_routing_table': (int) the number of peers in the routing table,\n        },\n        'blob_manager': {\n            'finished_blobs': (int) number of finished blobs in the blob manager,\n            'connections': {\n                'incoming_bps': {\n                    <source ip and tcp port>: (int) bytes per second received,\n                },\n                'outgoing_bps': {\n                    <destination ip and tcp port>: (int) bytes per second sent,\n                },\n                'total_outgoing_mps': (float) megabytes per second sent,\n                'total_incoming_mps': (float) megabytes per second received,\n                'max_outgoing_mbs': (float) maximum bandwidth (megabytes per second) sent, since the\n                                    daemon was started\n                'max_incoming_mbs': (float) maximum bandwidth (megabytes per second) received, since the\n                                    daemon was started\n                'total_sent' : (int) total number of bytes sent since the daemon was started\n                'total_received' : (int) total number of bytes received since the daemon was started\n            }\n        },\n        'hash_announcer': {\n            'announce_queue_size': (int) number of blobs currently queued to be announced\n        },\n        'file_manager': {\n            'managed_files': (int) count of files in the stream manager,\n        },\n        'upnp': {\n            'aioupnp_version': (str),\n            'redirects': {\n                <TCP | UDP>: (int) external_port,\n            },\n            'gateway': (str) manufacturer and model,\n            'dht_redirect_set': (bool),\n            'peer_redirect_set': (bool),\n            'external_ip': (str) external ip address,\n        }\n    }",
                "examples": [
                    {
                        "title": "Get status",
                        "curl": "curl -d'{\"method\": \"status\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet status",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"status\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"background_downloader\": {\n      \"available_free_space_mb\": null,\n      \"ongoing_download\": false,\n      \"running\": false\n    },\n    \"blob_manager\": {\n      \"connections\": {\n        \"incoming_bps\": {},\n        \"max_incoming_mbs\": 0.0,\n        \"max_outgoing_mbs\": 0.0,\n        \"outgoing_bps\": {},\n        \"total_incoming_mbs\": 0.0,\n        \"total_outgoing_mbs\": 0.0,\n        \"total_received\": 0,\n        \"total_sent\": 0\n      },\n      \"finished_blobs\": 0\n    },\n    \"disk_space\": {\n      \"content_blobs_storage_used_mb\": 0,\n      \"published_blobs_storage_used_mb\": 0,\n      \"running\": true,\n      \"seed_blobs_storage_used_mb\": 0,\n      \"total_used_mb\": 0\n    },\n    \"ffmpeg_status\": {\n      \"analyze_audio_volume\": true,\n      \"available\": false,\n      \"which\": null\n    },\n    \"file_manager\": {\n      \"managed_files\": 0\n    },\n    \"installation_id\": \"5sNkuSUhic8Fbi979cMEczEj4i9NwwaoftxE5mKR3fh69ipLbfcTw4xuQ15uDLLmsD\",\n    \"is_running\": true,\n    \"skipped_components\": [\n      \"dht\",\n      \"upnp\",\n      \"hash_announcer\",\n      \"peer_protocol_server\",\n      \"libtorrent_component\"\n    ],\n    \"startup_status\": {\n      \"background_downloader\": true,\n      \"blob_manager\": true,\n      \"database\": true,\n      \"disk_space\": true,\n      \"exchange_rate_manager\": true,\n      \"file_manager\": true,\n      \"wallet\": true,\n      \"wallet_server_payments\": true\n    },\n    \"wallet\": {\n      \"available_servers\": 1,\n      \"best_blockhash\": \"0f21c4fd13f11c84c697c75909d8ce21aa0c629e3e3302157f27730a92db3563\",\n      \"blocks\": 206,\n      \"blocks_behind\": 0,\n      \"connected\": \"localhost:50002\",\n      \"connected_features\": {\n        \"daily_fee\": \"0\",\n        \"description\": \"\",\n        \"donation_address\": \"\",\n        \"genesis_hash\": \"6e3fcf1299d4ec5d79c3a4c91d624a4acf9e2e173d95a1a0504f677669687556\",\n        \"hash_function\": \"sha256\",\n        \"hosts\": {},\n        \"payment_address\": \"\",\n        \"protocol_max\": \"0.199.0\",\n        \"protocol_min\": \"0.54.0\",\n        \"pruning\": null,\n        \"server_version\": \"0.107.0\",\n        \"trending_algorithm\": \"fast_ar\"\n      },\n      \"headers_synchronization_progress\": 100,\n      \"known_servers\": 0,\n      \"servers\": [\n        {\n          \"availability\": true,\n          \"host\": \"localhost\",\n          \"latency\": 0.015062666999998697,\n          \"port\": 50002\n        }\n      ]\n    },\n    \"wallet_server_payments\": {\n      \"max_fee\": \"0.0\",\n      \"running\": false\n    }\n  }\n}"
                    }
                ]
            },
            {
                "name": "stop",
                "description": "Stop lbrynet API server.",
                "arguments": [],
                "returns": "(string) Shutdown message",
                "examples": []
            },
            {
                "name": "version",
                "description": "Get lbrynet API server version information",
                "arguments": [],
                "returns": "(dict) Dictionary of lbry version information\n    {\n        'processor': (str) processor type,\n        'python_version': (str) python version,\n        'platform': (str) platform string,\n        'os_release': (str) os release string,\n        'os_system': (str) os name,\n        'version': (str) lbrynet version,\n        'build': (str) \"dev\" | \"qa\" | \"rc\" | \"release\",\n    }",
                "examples": [
                    {
                        "title": "Get version",
                        "curl": "curl -d'{\"method\": \"version\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet version",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"version\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"build\": \"dev\",\n    \"lbrynet_version\": \"0.108.0\",\n    \"os_release\": \"21.4.0\",\n    \"os_system\": \"Darwin\",\n    \"platform\": \"Darwin-21.4.0-x86_64-i386-64bit\",\n    \"processor\": \"i386\",\n    \"python_version\": \"3.7.13\",\n    \"version\": \"0.108.0\"\n  }\n}"
                    }
                ]
            }
        ]
    },
    "account": {
        "doc": "Create, modify and inspect wallet accounts.",
        "commands": [
            {
                "name": "account_add",
                "description": "Add a previously created account from a seed, private key or public key (read-only).\nSpecify --single_key for single address or vanity address accounts.",
                "arguments": [
                    {
                        "name": "account_name",
                        "type": "str",
                        "description": "name of the account to add",
                        "is_required": true
                    },
                    {
                        "name": "seed",
                        "type": "str",
                        "description": "seed to generate new account from",
                        "is_required": false
                    },
                    {
                        "name": "private_key",
                        "type": "str",
                        "description": "private key for new account",
                        "is_required": false
                    },
                    {
                        "name": "public_key",
                        "type": "str",
                        "description": "public key for new account",
                        "is_required": false
                    },
                    {
                        "name": "single_key",
                        "type": "bool",
                        "description": "create single key account, default is multi-key",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"id\": \"account_id\",\n                \"is_default\": \"this account is used by default\",\n                \"ledger\": \"name of crypto currency and network\",\n                \"name\": \"optional account name\",\n                \"seed\": \"human friendly words from which account can be recreated\",\n                \"encrypted\": \"if account is encrypted\",\n                \"private_key\": \"extended private key\",\n                \"public_key\": \"extended public key\",\n                \"address_generator\": \"settings for generating addresses\",\n                \"modified_on\": \"date of last modification to account settings\"\n            }",
                "examples": [
                    {
                        "title": "Add an account from seed",
                        "curl": "curl -d'{\"method\": \"account_add\", \"params\": {\"account_name\": \"new account\", \"seed\": \"menu double angry basic speed such ethics slide shed zebra lizard naive\", \"single_key\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account add \"new account\" --seed=\"menu double angry basic speed such ethics slide shed zebra lizard naive\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_add\", \"params\": {\"account_name\": \"new account\", \"seed\": \"menu double angry basic speed such ethics slide shed zebra lizard naive\", \"single_key\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"address_generator\": {\n      \"change\": {\n        \"gap\": 6,\n        \"maximum_uses_per_address\": 1\n      },\n      \"name\": \"deterministic-chain\",\n      \"receiving\": {\n        \"gap\": 20,\n        \"maximum_uses_per_address\": 1\n      }\n    },\n    \"encrypted\": false,\n    \"id\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n    \"is_default\": false,\n    \"ledger\": \"lbc_regtest\",\n    \"modified_on\": 1651689420,\n    \"name\": \"new account\",\n    \"private_key\": \"tprv8ZgxMBicQKsPdwRD3uYBKxn47pmYuEXVk2t1wymSJBsBEwqHKPKHKySw6jXmNqJhzU6CZb931diR4GAC1xNxueb37sakkbDYStD2EhftLEZ\",\n    \"public_key\": \"tpubD6NzVbkrYhZ4XQSzwZCmjNSAgrHV4ZiQKLUoEVojiTfa5S63wn8sWU4oGrmQMQd9PdG349CDNRUBCKGHzFULDb1mZ65hZLfXkxp2eUVmrE5\",\n    \"seed\": \"menu double angry basic speed such ethics slide shed zebra lizard naive\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "account_balance",
                "description": "Return the balance of an account",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "If provided only the balance for this account will be given. Otherwise default account.",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "balance for specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "confirmations",
                        "type": "int",
                        "description": "Only include transactions with this many confirmed blocks.",
                        "is_required": false
                    }
                ],
                "returns": "(decimal) amount of lbry credits in wallet",
                "examples": [
                    {
                        "title": "Get default account balance",
                        "curl": "curl -d'{\"method\": \"account_balance\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account balance",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_balance\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"available\": \"7.999876\",\n    \"reserved\": \"0.0\",\n    \"reserved_subtotals\": {\n      \"claims\": \"0.0\",\n      \"supports\": \"0.0\",\n      \"tips\": \"0.0\"\n    },\n    \"total\": \"7.999876\"\n  }\n}"
                    },
                    {
                        "title": "Get balance for specific account by id",
                        "curl": "curl -d'{\"method\": \"account_balance\", \"params\": {\"account_id\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account balance \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_balance\", \"params\": {\"account_id\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"available\": \"2.0\",\n    \"reserved\": \"0.0\",\n    \"reserved_subtotals\": {\n      \"claims\": \"0.0\",\n      \"supports\": \"0.0\",\n      \"tips\": \"0.0\"\n    },\n    \"total\": \"2.0\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "account_create",
                "description": "Create a new account. Specify --single_key if you want to use\nthe same address for all transactions (not recommended).",
                "arguments": [
                    {
                        "name": "account_name",
                        "type": "str",
                        "description": "name of the account to create",
                        "is_required": true
                    },
                    {
                        "name": "single_key",
                        "type": "bool",
                        "description": "create single key account, default is multi-key",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"id\": \"account_id\",\n                \"is_default\": \"this account is used by default\",\n                \"ledger\": \"name of crypto currency and network\",\n                \"name\": \"optional account name\",\n                \"seed\": \"human friendly words from which account can be recreated\",\n                \"encrypted\": \"if account is encrypted\",\n                \"private_key\": \"extended private key\",\n                \"public_key\": \"extended public key\",\n                \"address_generator\": \"settings for generating addresses\",\n                \"modified_on\": \"date of last modification to account settings\"\n            }",
                "examples": [
                    {
                        "title": "Create an account",
                        "curl": "curl -d'{\"method\": \"account_create\", \"params\": {\"account_name\": \"generated account\", \"single_key\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account create \"generated account\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_create\", \"params\": {\"account_name\": \"generated account\", \"single_key\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"address_generator\": {\n      \"change\": {\n        \"gap\": 6,\n        \"maximum_uses_per_address\": 1\n      },\n      \"name\": \"deterministic-chain\",\n      \"receiving\": {\n        \"gap\": 20,\n        \"maximum_uses_per_address\": 1\n      }\n    },\n    \"encrypted\": false,\n    \"id\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n    \"is_default\": false,\n    \"ledger\": \"lbc_regtest\",\n    \"modified_on\": 1651689419,\n    \"name\": \"generated account\",\n    \"private_key\": \"tprv8ZgxMBicQKsPdwRD3uYBKxn47pmYuEXVk2t1wymSJBsBEwqHKPKHKySw6jXmNqJhzU6CZb931diR4GAC1xNxueb37sakkbDYStD2EhftLEZ\",\n    \"public_key\": \"tpubD6NzVbkrYhZ4XQSzwZCmjNSAgrHV4ZiQKLUoEVojiTfa5S63wn8sWU4oGrmQMQd9PdG349CDNRUBCKGHzFULDb1mZ65hZLfXkxp2eUVmrE5\",\n    \"seed\": \"menu double angry basic speed such ethics slide shed zebra lizard naive\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "account_deposit",
                "description": "Spend a time locked transaction into your account.",
                "arguments": [
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "id of the transaction",
                        "is_required": false
                    },
                    {
                        "name": "nout",
                        "type": "int",
                        "description": "output number in the transaction",
                        "is_required": false
                    },
                    {
                        "name": "redeem_script",
                        "type": "str",
                        "description": "redeem script for output",
                        "is_required": false
                    },
                    {
                        "name": "private_key",
                        "type": "str",
                        "description": "private key to sign transaction",
                        "is_required": false
                    },
                    {
                        "name": "to_account",
                        "type": "str",
                        "description": "deposit to this account",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "limit operation to specific wallet.",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until tx has synced",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": []
            },
            {
                "name": "account_fund",
                "description": "Transfer some amount (or --everything) to an account from another\naccount (can be the same account). Amounts are interpreted as LBC.\nYou can also spread the transfer across a number of --outputs (cannot\nbe used together with --everything).",
                "arguments": [
                    {
                        "name": "to_account",
                        "type": "str",
                        "description": "send to this account",
                        "is_required": false
                    },
                    {
                        "name": "from_account",
                        "type": "str",
                        "description": "spend from this account",
                        "is_required": false
                    },
                    {
                        "name": "amount",
                        "type": "decimal",
                        "description": "the amount to transfer lbc",
                        "is_required": true
                    },
                    {
                        "name": "everything",
                        "type": "bool",
                        "description": "transfer everything (excluding claims), default: false.",
                        "is_required": false
                    },
                    {
                        "name": "outputs",
                        "type": "int",
                        "description": "split payment across many outputs, default: 1.",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "limit operation to specific wallet.",
                        "is_required": false
                    },
                    {
                        "name": "broadcast",
                        "type": "bool",
                        "description": "actually broadcast the transaction, default: false.",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Transfer 2 LBC from default account to specific account",
                        "curl": "curl -d'{\"method\": \"account_fund\", \"params\": {\"to_account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\", \"amount\": \"2.0\", \"everything\": false, \"broadcast\": true}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account fund --to_account=\"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\" --amount=2.0 --broadcast",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_fund\", \"params\": {\"to_account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\", \"amount\": \"2.0\", \"everything\": false, \"broadcast\": true}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"01000000018210d9351186994be0216d214311bb938bdd3be6fcbadf429b081bb02a147def010000006b483045022100fa64304647fa5a2b910f81d81b0261b5f9b21270b7da7e3bfdd376735d5c79de02204279646540f67cfeee5de266f7a84772b20adba5ebd9bd1e32c3e73a7170188401210356f76624a0e43db8317226bed0983e81991d75a0c37010a854b576e2df34f81effffffff0200c2eb0b000000001976a914111e990ac6c707da88bf6195b1e79ad6f506a26788ac90d7ae2f000000001976a91436526557e14d5f50dfc00d5058c98a38480363ab88ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"myBdfgpt8KVmhfRmGZ97miPpLccRFNRWoG\",\n        \"amount\": \"10.0\",\n        \"confirmations\": 6,\n        \"height\": 201,\n        \"nout\": 1,\n        \"timestamp\": 1651689430,\n        \"txid\": \"ef7d142ab01b089b42dfbafce63bdd8b93bb1143216d21e04b99861135d91082\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mh5USHiR8FYTt1LK61LS6JcwDea9ufutQw\",\n        \"amount\": \"2.0\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 0,\n        \"timestamp\": null,\n        \"txid\": \"618646b2cab7230e00390a8c7405e8b076df379f61bedbec0ee1c1b761f1c7be\",\n        \"type\": \"payment\"\n      },\n      {\n        \"address\": \"mkUBVNuHid7HKuBpSGVrYuRSTAa6w13fTb\",\n        \"amount\": \"7.999876\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"timestamp\": null,\n        \"txid\": \"618646b2cab7230e00390a8c7405e8b076df379f61bedbec0ee1c1b761f1c7be\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.000124\",\n    \"total_input\": \"10.0\",\n    \"total_output\": \"9.999876\",\n    \"txid\": \"618646b2cab7230e00390a8c7405e8b076df379f61bedbec0ee1c1b761f1c7be\"\n  }\n}"
                    },
                    {
                        "title": "Spread LBC between multiple addresses",
                        "curl": "curl -d'{\"method\": \"account_fund\", \"params\": {\"to_account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\", \"from_account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\", \"amount\": \"1.5\", \"everything\": false, \"outputs\": 2, \"broadcast\": true}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account fund --to_account=\"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\" --from_account=\"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\" --amount=1.5 --outputs=2 --broadcast",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_fund\", \"params\": {\"to_account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\", \"from_account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\", \"amount\": \"1.5\", \"everything\": false, \"outputs\": 2, \"broadcast\": true}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"0100000001bec7f161b7c1e10eecdbbe619f37df76b0e805748c0a39000e23b7cab2468661000000006a47304402204b8e36eb39a07b439ef659e5b1f731399b37602961fb88701f5808da9ffb70ad022066fc3b4c823f6f39fc94879f33002e7a2af5bf2a15d1a98da7b76ea7b469e73c0121022d590fe5df695889ba15a8f0fdfe6e08215ebf28e6d5456e6d54d2a78719a946ffffffff03c0687804000000001976a9140e533a5270e439c834bcdc0f60962541555698bd88acc0687804000000001976a9140e533a5270e439c834bcdc0f60962541555698bd88ac6cb9fa02000000001976a914c9c0afc27efc9e37aa02091189157447c0d7fd0988ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mh5USHiR8FYTt1LK61LS6JcwDea9ufutQw\",\n        \"amount\": \"2.0\",\n        \"confirmations\": 1,\n        \"height\": 207,\n        \"nout\": 0,\n        \"timestamp\": 1651689431,\n        \"txid\": \"618646b2cab7230e00390a8c7405e8b076df379f61bedbec0ee1c1b761f1c7be\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mgphTWXrvscnLwqBLSUZUeuwceSLBzuwkK\",\n        \"amount\": \"0.75\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 0,\n        \"timestamp\": null,\n        \"txid\": \"d01238e5031df7338820e55e8d8dc20f4aa2541219b488f71278b39ec8452a3f\",\n        \"type\": \"payment\"\n      },\n      {\n        \"address\": \"mgphTWXrvscnLwqBLSUZUeuwceSLBzuwkK\",\n        \"amount\": \"0.75\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"timestamp\": null,\n        \"txid\": \"d01238e5031df7338820e55e8d8dc20f4aa2541219b488f71278b39ec8452a3f\",\n        \"type\": \"payment\"\n      },\n      {\n        \"address\": \"myuiwi58CcW3H32yJiGiWcopRxZgzNjJza\",\n        \"amount\": \"0.499859\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 2,\n        \"timestamp\": null,\n        \"txid\": \"d01238e5031df7338820e55e8d8dc20f4aa2541219b488f71278b39ec8452a3f\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.000141\",\n    \"total_input\": \"2.0\",\n    \"total_output\": \"1.999859\",\n    \"txid\": \"d01238e5031df7338820e55e8d8dc20f4aa2541219b488f71278b39ec8452a3f\"\n  }\n}"
                    },
                    {
                        "title": "Transfer all LBC to a specified account",
                        "curl": "curl -d'{\"method\": \"account_fund\", \"params\": {\"from_account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\", \"everything\": true, \"broadcast\": true}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account fund --from_account=\"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\" --everything --broadcast",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_fund\", \"params\": {\"from_account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\", \"everything\": true, \"broadcast\": true}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"01000000033f2a45c89eb37812f788b4191254a24a0fc28d8d5ee5208833f71d03e53812d0000000006a47304402202e405854ad76924ece762623ba5a6f3735539345faa746e089640bf60e81614502206fd8f2cae20356fd6b6a423f06354e401832f34c98c3bf9d74fc2f81f47bf5ad01210317f1563062fefdaad9f6d8203dd1dc23c1a3c890fb06e0a3ba5dd918f2852848ffffffff3f2a45c89eb37812f788b4191254a24a0fc28d8d5ee5208833f71d03e53812d0010000006b483045022100d0fc955cd65ccc5dae64bd3b23604bf71887d0fe15ebda378bccb8c7ae47885a022003346025160f0fad9c84c7aac00e2e1a981668b3f43485d78f65d3ee6bf2063501210317f1563062fefdaad9f6d8203dd1dc23c1a3c890fb06e0a3ba5dd918f2852848ffffffff3f2a45c89eb37812f788b4191254a24a0fc28d8d5ee5208833f71d03e53812d0020000006b483045022100926449cc39e233197c1d1efebb4ec1b5a024425c041c255c6036b9e1e5c1840a022058a6a5566a35bb36ef1df454ac533b9510444a06ed56f2ad79ab6ab30f7afdee01210223bcd05e9bf38da0571caab5d3715c51177017fbb656e13784d0df14f720ca1cffffffff015027eb0b000000001976a914d9760cf904ed0e65da666eb6b3c3f2b6bb6bd75c88ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mgphTWXrvscnLwqBLSUZUeuwceSLBzuwkK\",\n        \"amount\": \"0.75\",\n        \"confirmations\": 1,\n        \"height\": 208,\n        \"nout\": 0,\n        \"timestamp\": 1651689431,\n        \"txid\": \"d01238e5031df7338820e55e8d8dc20f4aa2541219b488f71278b39ec8452a3f\",\n        \"type\": \"payment\"\n      },\n      {\n        \"address\": \"mgphTWXrvscnLwqBLSUZUeuwceSLBzuwkK\",\n        \"amount\": \"0.75\",\n        \"confirmations\": 1,\n        \"height\": 208,\n        \"nout\": 1,\n        \"timestamp\": 1651689431,\n        \"txid\": \"d01238e5031df7338820e55e8d8dc20f4aa2541219b488f71278b39ec8452a3f\",\n        \"type\": \"payment\"\n      },\n      {\n        \"address\": \"myuiwi58CcW3H32yJiGiWcopRxZgzNjJza\",\n        \"amount\": \"0.499859\",\n        \"confirmations\": 1,\n        \"height\": 208,\n        \"nout\": 2,\n        \"timestamp\": 1651689431,\n        \"txid\": \"d01238e5031df7338820e55e8d8dc20f4aa2541219b488f71278b39ec8452a3f\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"n1LnLz8pJ6yqfxX8DyNiTkZYBBvFHePLmm\",\n        \"amount\": \"1.999604\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 0,\n        \"timestamp\": null,\n        \"txid\": \"ea6796278165553c9f04d121b967e74bbc848998ae6f00954ac6b459aa0da060\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.000255\",\n    \"total_input\": \"1.999859\",\n    \"total_output\": \"1.999604\",\n    \"txid\": \"ea6796278165553c9f04d121b967e74bbc848998ae6f00954ac6b459aa0da060\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "account_list",
                "description": "List details of all of the accounts or a specific account.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "If provided only the balance for this account will be given",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "accounts in specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "confirmations",
                        "type": "int",
                        "description": "required confirmations (default: 0)",
                        "is_required": false
                    },
                    {
                        "name": "include_claims",
                        "type": "bool",
                        "description": "include claims, requires than a LBC account is specified (default: false)",
                        "is_required": false
                    },
                    {
                        "name": "show_seed",
                        "type": "bool",
                        "description": "show the seed for the account",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"total_items\": \"Total number of items.\",\n                \"items\": [\n                    {\n                        \"id\": \"account_id\",\n                        \"is_default\": \"this account is used by default\",\n                        \"ledger\": \"name of crypto currency and network\",\n                        \"name\": \"optional account name\",\n                        \"seed\": \"human friendly words from which account can be recreated\",\n                        \"encrypted\": \"if account is encrypted\",\n                        \"private_key\": \"extended private key\",\n                        \"public_key\": \"extended public key\",\n                        \"address_generator\": \"settings for generating addresses\",\n                        \"modified_on\": \"date of last modification to account settings\"\n                    }\n                ]\n            }",
                "examples": [
                    {
                        "title": "List your accounts",
                        "curl": "curl -d'{\"method\": \"account_list\", \"params\": {\"include_claims\": false, \"show_seed\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_list\", \"params\": {\"include_claims\": false, \"show_seed\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"address_generator\": {\n          \"change\": {\n            \"gap\": 6,\n            \"maximum_uses_per_address\": 1\n          },\n          \"name\": \"deterministic-chain\",\n          \"receiving\": {\n            \"gap\": 20,\n            \"maximum_uses_per_address\": 1\n          }\n        },\n        \"certificates\": 0,\n        \"coins\": 10.0,\n        \"encrypted\": false,\n        \"id\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"is_default\": true,\n        \"ledger\": \"lbc_regtest\",\n        \"name\": \"Account #mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"public_key\": \"tpubD6NzVbkrYhZ4YLSK14HANvtrjPvTB1vYbZF6n7dwdDGzRtxdvsc2uboKvfjLybiiZ7YW2Ca4h5Ldp25pPFMpz7WdNV1xZWdrjq5i4WzJ2c5\",\n        \"satoshis\": 1000000000\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 1,\n    \"total_pages\": 1\n  }\n}"
                    }
                ]
            },
            {
                "name": "account_max_address_gap",
                "description": "Finds ranges of consecutive addresses that are unused and returns the length\nof the longest such range: for change and receiving address chains. This is\nuseful to figure out ideal values to set for 'receiving_gap' and 'change_gap'\naccount settings.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account for which to get max gaps",
                        "is_required": true
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "(map) maximum gap for change and receiving addresses",
                "examples": []
            },
            {
                "name": "account_remove",
                "description": "Remove an existing account.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to remove",
                        "is_required": true
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"id\": \"account_id\",\n                \"is_default\": \"this account is used by default\",\n                \"ledger\": \"name of crypto currency and network\",\n                \"name\": \"optional account name\",\n                \"seed\": \"human friendly words from which account can be recreated\",\n                \"encrypted\": \"if account is encrypted\",\n                \"private_key\": \"extended private key\",\n                \"public_key\": \"extended public key\",\n                \"address_generator\": \"settings for generating addresses\",\n                \"modified_on\": \"date of last modification to account settings\"\n            }",
                "examples": [
                    {
                        "title": "Remove an account",
                        "curl": "curl -d'{\"method\": \"account_remove\", \"params\": {\"account_id\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account remove n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_remove\", \"params\": {\"account_id\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"address_generator\": {\n      \"change\": {\n        \"gap\": 6,\n        \"maximum_uses_per_address\": 1\n      },\n      \"name\": \"deterministic-chain\",\n      \"receiving\": {\n        \"gap\": 20,\n        \"maximum_uses_per_address\": 1\n      }\n    },\n    \"encrypted\": false,\n    \"id\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n    \"is_default\": false,\n    \"ledger\": \"lbc_regtest\",\n    \"modified_on\": 1651689419,\n    \"name\": \"generated account\",\n    \"private_key\": \"tprv8ZgxMBicQKsPdwRD3uYBKxn47pmYuEXVk2t1wymSJBsBEwqHKPKHKySw6jXmNqJhzU6CZb931diR4GAC1xNxueb37sakkbDYStD2EhftLEZ\",\n    \"public_key\": \"tpubD6NzVbkrYhZ4XQSzwZCmjNSAgrHV4ZiQKLUoEVojiTfa5S63wn8sWU4oGrmQMQd9PdG349CDNRUBCKGHzFULDb1mZ65hZLfXkxp2eUVmrE5\",\n    \"seed\": \"menu double angry basic speed such ethics slide shed zebra lizard naive\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "account_send",
                "description": "Send the same number of credits to multiple addresses from a specific account (or default account).",
                "arguments": [
                    {
                        "name": "amount",
                        "type": "decimal",
                        "description": "the amount to transfer lbc",
                        "is_required": true
                    },
                    {
                        "name": "amount_everything",
                        "type": "bool",
                        "description": "send everything from funding accounts (excluding claims), default: false.",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account to fund the transaction",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until tx has synced",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": []
            },
            {
                "name": "account_set",
                "description": "Change various settings on an account.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to change",
                        "is_required": true
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "default",
                        "type": "bool",
                        "description": "make this account the default",
                        "is_required": false
                    },
                    {
                        "name": "new_name",
                        "type": "str",
                        "description": "new name for the account",
                        "is_required": false
                    },
                    {
                        "name": "receiving_gap",
                        "type": "int",
                        "description": "set the gap for receiving addresses",
                        "is_required": false
                    },
                    {
                        "name": "receiving_max_uses",
                        "type": "int",
                        "description": "set the maximum number of times to use a receiving address",
                        "is_required": false
                    },
                    {
                        "name": "change_gap",
                        "type": "int",
                        "description": "set the gap for change addresses",
                        "is_required": false
                    },
                    {
                        "name": "change_max_uses",
                        "type": "int",
                        "description": "set the maximum number of times to use a change address",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"id\": \"account_id\",\n                \"is_default\": \"this account is used by default\",\n                \"ledger\": \"name of crypto currency and network\",\n                \"name\": \"optional account name\",\n                \"seed\": \"human friendly words from which account can be recreated\",\n                \"encrypted\": \"if account is encrypted\",\n                \"private_key\": \"extended private key\",\n                \"public_key\": \"extended public key\",\n                \"address_generator\": \"settings for generating addresses\",\n                \"modified_on\": \"date of last modification to account settings\"\n            }",
                "examples": [
                    {
                        "title": "Modify maximum number of times a change address can be reused",
                        "curl": "curl -d'{\"method\": \"account_set\", \"params\": {\"account_id\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\", \"default\": false, \"change_max_uses\": 10}}' http://localhost:5279/",
                        "lbrynet": "lbrynet account set n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc --change_max_uses=10",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"account_set\", \"params\": {\"account_id\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\", \"default\": false, \"change_max_uses\": 10}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"address_generator\": {\n      \"change\": {\n        \"gap\": 6,\n        \"maximum_uses_per_address\": 10\n      },\n      \"name\": \"deterministic-chain\",\n      \"receiving\": {\n        \"gap\": 20,\n        \"maximum_uses_per_address\": 1\n      }\n    },\n    \"encrypted\": false,\n    \"id\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n    \"is_default\": false,\n    \"ledger\": \"lbc_regtest\",\n    \"modified_on\": 1651689421,\n    \"name\": \"new account\",\n    \"private_key\": \"tprv8ZgxMBicQKsPdwRD3uYBKxn47pmYuEXVk2t1wymSJBsBEwqHKPKHKySw6jXmNqJhzU6CZb931diR4GAC1xNxueb37sakkbDYStD2EhftLEZ\",\n    \"public_key\": \"tpubD6NzVbkrYhZ4XQSzwZCmjNSAgrHV4ZiQKLUoEVojiTfa5S63wn8sWU4oGrmQMQd9PdG349CDNRUBCKGHzFULDb1mZ65hZLfXkxp2eUVmrE5\",\n    \"seed\": \"menu double angry basic speed such ethics slide shed zebra lizard naive\"\n  }\n}"
                    }
                ]
            }
        ]
    },
    "address": {
        "doc": "List, generate and verify addresses.",
        "commands": [
            {
                "name": "address_is_mine",
                "description": "Checks if an address is associated with the current wallet.",
                "arguments": [
                    {
                        "name": "address",
                        "type": "str",
                        "description": "address to check",
                        "is_required": true
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "(bool) true, if address is associated with current wallet",
                "examples": [
                    {
                        "title": "Check if address is mine",
                        "curl": "curl -d'{\"method\": \"address_is_mine\", \"params\": {\"address\": \"msuNBdYovFPqvQfaCuks8LUJRxwaw1BqD9\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet address is_mine msuNBdYovFPqvQfaCuks8LUJRxwaw1BqD9",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"address_is_mine\", \"params\": {\"address\": \"msuNBdYovFPqvQfaCuks8LUJRxwaw1BqD9\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": true\n}"
                    }
                ]
            },
            {
                "name": "address_list",
                "description": "List account addresses or details of single address.",
                "arguments": [
                    {
                        "name": "address",
                        "type": "str",
                        "description": "just show details for single address",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"total_items\": \"Total number of items.\",\n                \"items\": [\n                    \"an address in base58\"\n                ]\n            }",
                "examples": [
                    {
                        "title": "List addresses in default account",
                        "curl": "curl -d'{\"method\": \"address_list\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet address list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"address_list\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"mgvm4xqEf7evKhnhFE3SYGwRo2E4JLcTXf\",\n        \"pubkey\": \"tpubDA9GDAntyJu4J5xCtGT6WfuLXzkV2mf35S53gwDU8p4BdKrVwaQcQvJdKBtDxyBBHonYZee2YguG1QKmiMCkjPBpKtFMsM6hESiH84GEgSp\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"miZz2J7V5HPc9hqkHNYoDHBNpJZzUt8BTU\",\n        \"pubkey\": \"tpubDA9GDAntyJu4QwNCe56oHgr4MeLs6vAbFWBxUXgNZK4PKTWMU25UcZy3Cx7ckZBNFRThfHpmseArBPRmRW6s2dAihTaEmYWF6nEps8EqrFF\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"mip4B1iHXiMYzpnfpcbHDHG3EiJ1BEESfk\",\n        \"pubkey\": \"tpubDA9GDAntyJu4ypnzFmpWLzEKmEkKztjqXPhtcfvp5noDt68vx8wDArBR69inpmahXjBDu9i3HZ74yy7ppqbceW7QDGaChLSqKeA2USY3FJV\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"mj4coh8w2AfG2euEgq8na7dJV9GXXVmDiZ\",\n        \"pubkey\": \"tpubDA9GDAntyJu4b6GMvGUrYMGZgRN6W2drr5pNVwxCAvoS6KvuKcDDovQtmYBLeadFk1Kp1a1HucL3McxjzcY79izFgndgHPN6Jn35F6vsjom\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"mj5QmtV3zW3mqn8hbbWxMKsN9LA1iP6eeY\",\n        \"pubkey\": \"tpubDA9GDAntyJu4T5mULFzJ8as2wQ3r2XaYA5aNngX5LT9Kd8To49wE3pyMne78LP1G9CmAJSLDpcKUi5RJP1XywyGF6RC6DvxjFNfEzuvXL5N\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"mjQgcyUXB7jwbJ2bU6EtjqJFSe7KehWUNV\",\n        \"pubkey\": \"tpubDA9GDAntyJu54rY7e5s9uTFbqPwvU7CXUuZBUcubPFqLid6kWWs96xTEUwxEN8MPjJQRJj4PvRntUgGMnseb9Tqmg8GXGA6bz5zFmMEz6om\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"mkUBVNuHid7HKuBpSGVrYuRSTAa6w13fTb\",\n        \"pubkey\": \"tpubDA9GDAntyJu4FE86HM41f2g1n8QunqHozUB8MXx8Ewjdx4BTnDAC9udYrJrm3ErVVVKh9xaVX1NNngvRtLz8NyYkbFijCkKaDoAqiqoVokA\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"mmKMgDrUXnHTrKN8MgPNSY52MfXhRi1f1c\",\n        \"pubkey\": \"tpubDA9GDAntyJu4Mp1eoXDiQsP3caH9Xx2iztkAmMwi8StyNat9DQvNSBtufnYCeHsR5HPWdcEcTMSuTKGk3xjBgLPSm2mAv2mRFwVVaGmLeZo\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"mosSjQ2YU52ZjtFJAzQVv42oKtZdNH7pwK\",\n        \"pubkey\": \"tpubDA9GDAntyJu4Wg9K2jApMk4b5n4fDLYupufD9RFSX5Jy65BN1fap1akHDDgKBcuybMHrkZmFWNih5vd7ojJj3faZx4VPcwoGN6JWX6CRrE8\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"mq8JifgNH2TktWhb8KfnzPwBe91HCcARko\",\n        \"pubkey\": \"tpubDA9GDAntyJu4MQTykjsywNVgurR6GSAKunNgt95yHRfUNJHL2FUJAfgFdyo6jKBMqz9mEU9k64Bva3ycGnr2ez79HbwrEHuT5mQTFDaa1rB\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"mqWRKzh5mZoPvVdgdhapa846wxNVeXsKN7\",\n        \"pubkey\": \"tpubDA9GDAntyJu57bgLb5LjMWZ57sYveyVbzKHZ3sh4vr3FJpu9Hiez7tieU4dumWPFoPGXHEwMzCsL7azakyiG89xQUUrp45bv7P5m38QMxXM\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"mstwfY2JBQXxDQCCHm8kX2w3mizmmLH7Hy\",\n        \"pubkey\": \"tpubDA9GDAntyJu4koALK7BHbxeQ4FJUPqTiGWcMJvgKqx28b7QsnX1Ua1BqTKCZERQYU3s6wZgyBJoHsbEVzQCua453i7JSAP3iV8gTmexN1Mp\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"msuNBdYovFPqvQfaCuks8LUJRxwaw1BqD9\",\n        \"pubkey\": \"tpubDA9GDAntyJu4NyeWRqyw97RF8BEJcAxcNugyE3R78m31n3mDYeDSAEuwvDBqo5adoAotCsiUSPyfFBpHAPN7mJW2GcdzgCrQfrhUFbESK4S\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"muxSw648FruEA2UTuAa2MtEnTpjJV7pxsy\",\n        \"pubkey\": \"tpubDA9GDAntyJu4uFmpXzvoTwMGhm8BKJWrSGuoiEXca6enFqod4WVWBnAMQ1DM3R4XVy8kVTjsXnEnTjgRmqCPHfQ7hyXZ89wgsBh5dvn7uN1\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n        \"pubkey\": \"tpubDA9GDAntyJu4SBgGiSwb1j4BhSroZnfiWwpg1S7zRbdEgHQiuD7wQ8p1DXu3YX5vtaKLH63XKCPjJSuWWj34F6A1GuaxLx7188e3VHvnyKn\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"mw9VhxS8fuTysjckkJvT6J6iRVj49VFGDn\",\n        \"pubkey\": \"tpubDA9GDAntyJu4oVdyc359NjXJ1Fwory64qA7RxadKQke9vRiVrewYgkAdHGoXJ3P6N3FAzmybjqszHzFP7n3wsmnaHdqR3osoHo7XFMywqSE\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"mwDSaaLtkryNwecdtbnPtcZGPzRWPMa7BN\",\n        \"pubkey\": \"tpubDA9GDAntyJu4LK7ex7QzFu5V4D76s3oe1NDGaFfKyjeBAMt59HM2gfGRkNZC3qNgmn9jCRqmnXShezFXWi3Y6Nn79Ahyzy3FR8CPR6CkCBn\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"myBdfgpt8KVmhfRmGZ97miPpLccRFNRWoG\",\n        \"pubkey\": \"tpubDA9GDAntyJu4FjoCpCKHeFLC4kf9L8uHpvSimsji6RfwFT1B6Sn39i7cigE3fkCgrnyYNueLGyrXbPXJxdPL7MGnVdqGf9HXksaWJgwBW5W\",\n        \"used_times\": 1\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"myFDWM3dTfBuTnKAm4QTBcCiTSvdKcPBhG\",\n        \"pubkey\": \"tpubDA9GDAntyJu4w94dE8oNnhPZF3uQ7XSsFQGAQWGnQiy7hPk8FY7Lw6vopngkYvQ9tjgzcMPEhTxUCfNRcKwS1FVvooAzRDr9c41egdCXTDE\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"mzoWrLgkbfSc2QhS7j7p1UY1FZnjVgftut\",\n        \"address\": \"mzWDJudg68FxE2KWfgQ87aei5ugh1AEjDW\",\n        \"pubkey\": \"tpubDA9GDAntyJu4ercpvr1VUWJhRm3FxnBMZuheF5pBAbDSkjZ5BqmWU4qhGyrujmwkJJf4CAKDAqu6cKb9tenPSiPcf4ZTBNRTNZ6GcPB56n1\",\n        \"used_times\": 0\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 53,\n    \"total_pages\": 3\n  }\n}"
                    },
                    {
                        "title": "List addresses in specified account",
                        "curl": "curl -d'{\"method\": \"address_list\", \"params\": {\"account_id\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet address list --account_id=\"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"address_list\", \"params\": {\"account_id\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mfrmSakAMY28yfYoCdhngarvxR7aiyC164\",\n        \"pubkey\": \"tpubDA9GDAntyJu4JxnyTtNECHCTrHwyikUehKWpWncZE8AckMhnzyVbZhRzVJchdzMTMfFyWphhaG6sZznpkP7MkBR4PPpKN8WNXHoVxMuiz5h\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mgphTWXrvscnLwqBLSUZUeuwceSLBzuwkK\",\n        \"pubkey\": \"tpubDA9GDAntyJu4UJfmSrx5oXCHZQcKTRBbNjYLzj6CWbi9PV91JXs7QNkHy3SJ2apkYGMTr4zJuZ5bRGFkt1f6eYweteJ4pETYaURcuXkUD8j\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mgu4i1bVwky4H3FbNzR6vUdzWJ9FWc1jgj\",\n        \"pubkey\": \"tpubDA9GDAntyJu4YE4bJUFDzmUAVuptHDY3G1qW2qFVHwtJqBTHEvoJP9WXFu2Kq76ygot5QGjHZS2eWjwkMvrCa6vQpi99AXoMH4Ey2VicXpu\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mh5USHiR8FYTt1LK61LS6JcwDea9ufutQw\",\n        \"pubkey\": \"tpubDA9GDAntyJu4EUUeMK7egQQL9j7po23NyQzhsuMu49iiQskQBddMnStoCVNrb288fbeV74EfYE162owf3SExBeNyUVpLxfnS3fhoD43XYtq\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mhJWptexKtGpMPqac4pMBSk8js9mw1Cfso\",\n        \"pubkey\": \"tpubDA9GDAntyJu4Lo6ZzKLdpZeJPU2Q2nkLKy3ifnfM1ysYaLeVoiLcnwyN2NK2VPL3jHRctJ4a5RrGxrrouHnVFMrDwLZD5FAaxQ6FN88gm1V\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mhtEBbqY9kg1re5ZdMtzVNV4bzRp6y6Stq\",\n        \"pubkey\": \"tpubDA9GDAntyJu4zqXy28xHTgfFAAvG4RnsWr6cdNXorkF9TeAAuqymtJBs64rRu6CgsYMzFiA2SFngN1WegAC7imJpFUZijK88tyjWV4U1UBq\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mi2Ly9EMXveGSL42ChRByfuuXGrSes1TEp\",\n        \"pubkey\": \"tpubDA9GDAntyJu4rJRk5sJwTmozXYeNeAEaFACC6kUFR7vG8bvc9fpiBSk1X1XdNhExst5SRj2j64RcGj4ep2eRrpKh8yqGgTt4m6cme7yWU87\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"miiftyibNeFcGYq5ycQMcRtBqrBjjoFUZe\",\n        \"pubkey\": \"tpubDA9GDAntyJu52pFZR29WbUdX7ZWk7WnnyWchms3a4Jb8n93HVLsyn3vP8hTGeZiaTEiyz6wCqFcdbo7Qm4rS6jCYZ8czizsBDrkpNRJ58ZT\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mjSTVqBxKjj3AuRpYdMuGibzoHvU6Ztep8\",\n        \"pubkey\": \"tpubDA9GDAntyJu4uNvETxRJT1gDSakuHYCB77vvX2A4nJkJN4XLXzJHfJGXvDBT8B9NZiZmUjMExTnuDwSDADEbhpZSVd92rkvr7jVHuv4gFAS\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mkH3Kd7odqLwNf8eEgraT4DozgSegRCK6b\",\n        \"pubkey\": \"tpubDA9GDAntyJu4wYqjpAi6q1NqguD42DJei5T5iA8mUb1oLrQcEse8McLS4WEvZcwQ3kTeMCFAqEFizY5z3pDrdf93SEdYg8f5u5eGz8ZC9C6\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mkn7MTC2DKDDXt7Fy8TVVC5sZWKAjqkBZB\",\n        \"pubkey\": \"tpubDA9GDAntyJu4per9uw4UKDvLj9NZcte2i2gvA8fe1hWRZ2baoeHeHnyX3ouK2UWiPEz1PJWSMkSzprhTATyd8QAVjbDnuNGS3J9croWAVpG\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mm4H4EFT1TaJGWNSgcgHDe8TvdzMTccVtk\",\n        \"pubkey\": \"tpubDA9GDAntyJu4Rm3aJpTDtdb1paT3kdmyrZcAPTJu1LsnjXrzJJUMNcTPaVXDUTGEMSUCrWQE9zYCydbUMKiM1U3yXz915FtKPm3oMkhD6rq\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mn9dmT63bbjbNhWxqtuMTiePeAXxYbRKiE\",\n        \"pubkey\": \"tpubDA9GDAntyJu4VsgcuAsT5EtZWktK2pYhQ8LCUc8hm3fwX1hVHY2oqACSFKV7hjeVyNn6byNMCwNQKnrnZA84Y1S3p9VYS4Q5zgoqKg9ptY5\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mo5HqpjCQLJLDPmXEKpmkk5BWcufWQQ1Vc\",\n        \"pubkey\": \"tpubDA9GDAntyJu4P1Y4i8HMog2W71TwXQWiQ9ZQDpH3CtjWah3Z3yKMpNVrC3jjpwamGSruSU35joSJQdHPKGf6uNqCnqnRVPEKYM7cEKC2BjZ\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mpSVrJ8YH1T3gnVG2KsiRrwzokk4tEEjcg\",\n        \"pubkey\": \"tpubDA9GDAntyJu4iPga1TXWJaTjXmdv4qrMxanXV7XmK4nuCHFs92KVHMV4NEVkbfMaWqgkTkGo5bpZs8kLaUN9CGJmStqwehrfoUKuk6H3tom\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mqfVM4SJShegvndb9nAQDggCYXwdbcSQta\",\n        \"pubkey\": \"tpubDA9GDAntyJu4La72DfffNt4cpBK7JKMcc3WK1LSk6KsCEnSjnfFGXE8oFMZZ4xjgapWPRW5yVaZPK1w9aTRR6xYSPJSCqaYnSeqm3WQA4Ap\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mqqPG7mDajXULL96t2yEvNmVvgkG4gTiss\",\n        \"pubkey\": \"tpubDA9GDAntyJu4Tg4GDaC5KMjQLWqPQu12zFjrsuZUtSNVij25B12Mc4NTzbkM8cVGVk2VUpY3BUuEbvpPTjmEGMXZfrYH1eNGVgife2HbZKd\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mtaH7w29Cmg1mTtwCw7n15hynpdT5m6CWE\",\n        \"pubkey\": \"tpubDA9GDAntyJu4ePJoihgn97F2pqKLn6iRRydKyFg3Bue9QNLseYh3718xSffkp3VgRvxTBM7yuSb32drNhRmLEc4uh5oSRztw4egef96uL9v\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"muWTYNcvFWsYa6GvbQg5B7x19U2ETnUrjs\",\n        \"pubkey\": \"tpubDA9GDAntyJu4HvGuy4L4vFhSZnaQNR496Mvrz7HQ2ctfWg5M8anqjaPC1UwzHvVd6yUYTc3MWCKtauB5HC5XS2notN1PtWaLD1kR7Z2tqzK\",\n        \"used_times\": 0\n      },\n      {\n        \"account\": \"n21p92W2irz7LUAGfmnpvnB1ich7jf8gzc\",\n        \"address\": \"mub639UcTt9NFTftmq9spEaFYrztr8Xb6n\",\n        \"pubkey\": \"tpubDA9GDAntyJu4hNyrauFrLPj5rGChHYTPUkYVxioryvHga8UCjcvN6124sw8o7tH9wZXVkydTHt9yYgzTT2A79fBatZ92K4kFQFh37wArBsX\",\n        \"used_times\": 0\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 26,\n    \"total_pages\": 2\n  }\n}"
                    }
                ]
            },
            {
                "name": "address_unused",
                "description": "Return an address containing no balance, will create\na new address if there is none.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "            \"an address in base58\"",
                "examples": [
                    {
                        "title": "Get an unused address",
                        "curl": "curl -d'{\"method\": \"address_unused\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet address unused",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"address_unused\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"msuNBdYovFPqvQfaCuks8LUJRxwaw1BqD9\"\n}"
                    }
                ]
            }
        ]
    },
    "blob": {
        "doc": "Blob management.",
        "commands": [
            {
                "name": "blob_announce",
                "description": "Announce blobs to the DHT",
                "arguments": [
                    {
                        "name": "blob_hash",
                        "type": "str",
                        "description": "announce a blob, specified by blob_hash",
                        "is_required": false
                    },
                    {
                        "name": "stream_hash",
                        "type": "str",
                        "description": "announce all blobs associated with stream_hash",
                        "is_required": false
                    },
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "announce all blobs associated with sd_hash and the sd_hash itself",
                        "is_required": false
                    }
                ],
                "returns": "(bool) true if successful",
                "examples": []
            },
            {
                "name": "blob_clean",
                "description": "Deletes blobs to cleanup disk space",
                "arguments": [],
                "returns": "(bool) true if successful",
                "examples": []
            },
            {
                "name": "blob_delete",
                "description": "Delete a blob",
                "arguments": [
                    {
                        "name": "blob_hash",
                        "type": "str",
                        "description": "blob hash of the blob to delete",
                        "is_required": true
                    }
                ],
                "returns": "(str) Success/fail message",
                "examples": [
                    {
                        "title": "Delete a blob",
                        "curl": "curl -d'{\"method\": \"blob_delete\", \"params\": {\"blob_hash\": \"d5d30e1338ef47b3bdd46ddefdf1e305e18b55e3679499533ea173efb3b4250ac3cbd87977574ed1d288a3d9bdf9e679\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet blob delete d5d30e1338ef47b3bdd46ddefdf1e305e18b55e3679499533ea173efb3b4250ac3cbd87977574ed1d288a3d9bdf9e679",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"blob_delete\", \"params\": {\"blob_hash\": \"d5d30e1338ef47b3bdd46ddefdf1e305e18b55e3679499533ea173efb3b4250ac3cbd87977574ed1d288a3d9bdf9e679\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"Deleted d5d30e1338ef47b3bdd46ddefdf1e305e18b55e3679499533ea173efb3b4250ac3cbd87977574ed1d288a3d9bdf9e679\"\n}"
                    }
                ]
            },
            {
                "name": "blob_get",
                "description": "Download and return a blob",
                "arguments": [
                    {
                        "name": "blob_hash",
                        "type": "str",
                        "description": "blob hash of the blob to get",
                        "is_required": true
                    },
                    {
                        "name": "timeout",
                        "type": "int",
                        "description": "timeout in number of seconds",
                        "is_required": false
                    }
                ],
                "returns": "(str) Success/Fail message or (dict) decoded data",
                "examples": []
            },
            {
                "name": "blob_list",
                "description": "Returns blob hashes. If not given filters, returns all blobs known by the blob manager",
                "arguments": [
                    {
                        "name": "needed",
                        "type": "bool",
                        "description": "only return needed blobs",
                        "is_required": false
                    },
                    {
                        "name": "finished",
                        "type": "bool",
                        "description": "only return finished blobs",
                        "is_required": false
                    },
                    {
                        "name": "uri",
                        "type": "str",
                        "description": "filter blobs by stream in a uri",
                        "is_required": false
                    },
                    {
                        "name": "stream_hash",
                        "type": "str",
                        "description": "filter blobs by stream hash",
                        "is_required": false
                    },
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "filter blobs in a stream by sd hash, ie the hash of the stream descriptor blob for a stream that has been downloaded",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "(list) List of blob hashes",
                "examples": [
                    {
                        "title": "List your local blobs",
                        "curl": "curl -d'{\"method\": \"blob_list\", \"params\": {\"needed\": false, \"finished\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet blob list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"blob_list\", \"params\": {\"needed\": false, \"finished\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      \"d5d30e1338ef47b3bdd46ddefdf1e305e18b55e3679499533ea173efb3b4250ac3cbd87977574ed1d288a3d9bdf9e679\",\n      \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n      \"06fac97e3581754a511a6d73c1ad279a521e34884fabaaf29f807b35ea5a8c859c69b1843268097014f86fcc22b96c7f\",\n      \"79f6d865d02048e795dd50b30f6349a2e6a55b524f4e721a35593b6a98270c79ecb606e88c69ee9615b20af7c0841149\"\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 4,\n    \"total_pages\": 1\n  }\n}"
                    }
                ]
            },
            {
                "name": "blob_reflect",
                "description": "Reflects specified blobs",
                "arguments": [
                    {
                        "name": "reflector_server",
                        "type": "str",
                        "description": "reflector address",
                        "is_required": false
                    }
                ],
                "returns": "(list) reflected blob hashes",
                "examples": []
            },
            {
                "name": "blob_reflect_all",
                "description": "Reflects all saved blobs",
                "arguments": [],
                "returns": "(bool) true if successful",
                "examples": []
            }
        ]
    },
    "channel": {
        "doc": "Create, update, abandon and list your channel claims.",
        "commands": [
            {
                "name": "channel_abandon",
                "description": "Abandon one of my channel claims.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "claim_id of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "txid of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "nout",
                        "type": "int",
                        "description": "nout of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until abandon is in mempool",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Abandon a channel claim",
                        "curl": "curl -d'{\"method\": \"channel_abandon\", \"params\": {\"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\", \"preview\": false, \"blocking\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet channel abandon 879a99e68ea282a397e16ca1680cc925a160c169",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"channel_abandon\", \"params\": {\"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\", \"preview\": false, \"blocking\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"0100000001dd7837f494570fca1e66ebd64f2bce580888deeac3446d8c578ef2069e5538d1000000006a47304402207615e76f47834ed7c2cfc93b2ee278b65f32fc34586672cc93fb4be2f70ba24602200e37244db881d3739a881b28b987fb985d062a28b53368d8ff27a7fdc624036f012102ef5464c9bf949c4770e6ba1e61bf56b9bec340e2ac86f6d55956748b5d291582ffffffff0134b7f505000000001976a9149533493c01adbd4dadcc58361bef2cde402c052a88ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 9,\n        \"has_signing_key\": true,\n        \"height\": 210,\n        \"meta\": {},\n        \"name\": \"@channel\",\n        \"normalized_name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"timestamp\": 1651689431,\n        \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n          \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n          \"title\": \"New Channel\"\n        },\n        \"value_type\": \"channel\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mu7rR4Ax65xHUHkZjdCKjv3JqSAdC1T9qS\",\n        \"amount\": \"0.999893\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 0,\n        \"timestamp\": null,\n        \"txid\": \"0c90386513881e428197586a70f976c4b211f4de047dbbf4ea09d3396574bb1c\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.000107\",\n    \"total_input\": \"1.0\",\n    \"total_output\": \"0.999893\",\n    \"txid\": \"0c90386513881e428197586a70f976c4b211f4de047dbbf4ea09d3396574bb1c\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "channel_create",
                "description": "Create a new channel by generating a channel private key and establishing an '@' prefixed claim.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "str",
                        "description": "name of the channel prefixed with '@'",
                        "is_required": true
                    },
                    {
                        "name": "bid",
                        "type": "decimal",
                        "description": "amount to back the claim",
                        "is_required": true
                    },
                    {
                        "name": "bid_everything",
                        "type": "bool",
                        "description": "bid everything from funding accounts (excluding claims), default: false.",
                        "is_required": false
                    },
                    {
                        "name": "allow_duplicate_name",
                        "type": "bool",
                        "description": "create new channel even if one already exists with given name. default: false.",
                        "is_required": false
                    },
                    {
                        "name": "title",
                        "type": "str",
                        "description": "title of the publication",
                        "is_required": false
                    },
                    {
                        "name": "description",
                        "type": "str",
                        "description": "description of the publication",
                        "is_required": false
                    },
                    {
                        "name": "email",
                        "type": "str",
                        "description": "email of channel owner",
                        "is_required": false
                    },
                    {
                        "name": "website_url",
                        "type": "str",
                        "description": "website url",
                        "is_required": false
                    },
                    {
                        "name": "featured",
                        "type": "list",
                        "description": "claim_ids of featured content in channel",
                        "is_required": false
                    },
                    {
                        "name": "tags",
                        "type": "list",
                        "description": "content tags",
                        "is_required": false
                    },
                    {
                        "name": "languages",
                        "type": "list",
                        "description": "languages used by the channel, using RFC 5646 format, eg: for English `--languages=en` for Spanish (Spain) `--languages=es-ES` for Spanish (Mexican) `--languages=es-MX` for Chinese (Simplified) `--languages=zh-Hans` for Chinese (Traditional) `--languages=zh-Hant`",
                        "is_required": false
                    },
                    {
                        "name": "locations",
                        "type": "list",
                        "description": "locations of the channel, consisting of 2 letter `country` code and a `state`, `city` and a postal `code` along with a `latitude` and `longitude`. for JSON RPC: pass a dictionary with aforementioned attributes as keys, eg: ... \"locations\": [{'country': 'US', 'state': 'NH'}] ... for command line: pass a colon delimited list with values in the following order: \"COUNTRY:STATE:CITY:CODE:LATITUDE:LONGITUDE\" making sure to include colon for blank values, for example to provide only the city: ... --locations=\"::Manchester\" with all values set: ... --locations=\"US:NH:Manchester:03101:42.990605:-71.460989\" optionally, you can just pass the \"LATITUDE:LONGITUDE\": ... --locations=\"42.990605:-71.460989\" finally, you can also pass JSON string of dictionary on the command line as you would via JSON RPC ... --locations=\"{'country': 'US', 'state': 'NH'}\"",
                        "is_required": false
                    },
                    {
                        "name": "thumbnail_url",
                        "type": "str",
                        "description": "thumbnail url",
                        "is_required": false
                    },
                    {
                        "name": "cover_url",
                        "type": "str",
                        "description": "url of cover image",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account to use for holding the transaction",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "funding_account_ids",
                        "type": "list",
                        "description": "ids of accounts to fund this transaction",
                        "is_required": false
                    },
                    {
                        "name": "claim_address",
                        "type": "str",
                        "description": "address where the channel is sent to, if not specified it will be determined automatically from the account",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until transaction is in mempool",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Create a channel claim without metadata",
                        "curl": "curl -d'{\"method\": \"channel_create\", \"params\": {\"name\": \"@channel\", \"bid\": \"1.0\", \"bid_everything\": false, \"featured\": [], \"tags\": [], \"languages\": [], \"locations\": [], \"funding_account_ids\": [], \"preview\": false, \"blocking\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet channel create @channel 1.0",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"channel_create\", \"params\": {\"name\": \"@channel\", \"bid\": \"1.0\", \"bid_everything\": false, \"featured\": [], \"tags\": [], \"languages\": [], \"locations\": [], \"funding_account_ids\": [], \"preview\": false, \"blocking\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"0100000001bec7f161b7c1e10eecdbbe619f37df76b0e805748c0a39000e23b7cab2468661010000006b483045022100b12f8d327288b7e4ba943092dc992ed402c893350e2f2eb1ec6821523ecfb63502201b3399f4fa192f235ec2b3f493af08ce1c2a14cea8e635b68fdf891a85ce29b4012102192579a2bfc6018efea6fa4197b42f9a47b37f4b5aead6230fa898d9c20cdd0effffffff0200e1f505000000004cb508406368616e6e656c260012230a2103a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f7096d7576a9149ecd8961673460542f461f981763971f0513c5a688acc462a029000000001976a914217b116580237994c741c77df3e0163933a4491288ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mkUBVNuHid7HKuBpSGVrYuRSTAa6w13fTb\",\n        \"amount\": \"7.999876\",\n        \"confirmations\": 2,\n        \"height\": 207,\n        \"nout\": 1,\n        \"timestamp\": 1651689431,\n        \"txid\": \"618646b2cab7230e00390a8c7405e8b076df379f61bedbec0ee1c1b761f1c7be\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"claim_op\": \"create\",\n        \"confirmations\": -2,\n        \"has_signing_key\": true,\n        \"height\": -2,\n        \"meta\": {},\n        \"name\": \"@channel\",\n        \"normalized_name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"timestamp\": null,\n        \"txid\": \"4c38e9c657417039445308399839d188af8cd6366a4ee2bf723eca9c0d05d53d\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n          \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\"\n        },\n        \"value_type\": \"channel\"\n      },\n      {\n        \"address\": \"miZz2J7V5HPc9hqkHNYoDHBNpJZzUt8BTU\",\n        \"amount\": \"6.983769\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"timestamp\": null,\n        \"txid\": \"4c38e9c657417039445308399839d188af8cd6366a4ee2bf723eca9c0d05d53d\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.016107\",\n    \"total_input\": \"7.999876\",\n    \"total_output\": \"7.983769\",\n    \"txid\": \"4c38e9c657417039445308399839d188af8cd6366a4ee2bf723eca9c0d05d53d\"\n  }\n}"
                    },
                    {
                        "title": "Create a channel claim with all metadata",
                        "curl": "curl -d'{\"method\": \"channel_create\", \"params\": {\"name\": \"@bigchannel\", \"bid\": \"1.0\", \"bid_everything\": false, \"title\": \"Big Channel\", \"description\": \"A channel with lots of videos.\", \"email\": \"creator@smallmedia.com\", \"website_url\": \"http://smallmedia.com\", \"featured\": [], \"tags\": [\"music\", \"art\"], \"languages\": [\"pt-BR\", \"uk\"], \"locations\": [\"BR\", \"UA::Kiyv\"], \"thumbnail_url\": \"http://smallmedia.com/logo.jpg\", \"cover_url\": \"http://smallmedia.com/logo.jpg\", \"funding_account_ids\": [], \"preview\": false, \"blocking\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet channel create @bigchannel 1.0 --title=\"Big Channel\" --description=\"A channel with lots of videos.\" --email=\"creator@smallmedia.com\" --tags=music --tags=art --languages=pt-BR --languages=uk --locations=BR --locations=UA::Kiyv --website_url=\"http://smallmedia.com\" --thumbnail_url=\"http://smallmedia.com/logo.jpg\" --cover_url=\"http://smallmedia.com/logo.jpg\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"channel_create\", \"params\": {\"name\": \"@bigchannel\", \"bid\": \"1.0\", \"bid_everything\": false, \"title\": \"Big Channel\", \"description\": \"A channel with lots of videos.\", \"email\": \"creator@smallmedia.com\", \"website_url\": \"http://smallmedia.com\", \"featured\": [], \"tags\": [\"music\", \"art\"], \"languages\": [\"pt-BR\", \"uk\"], \"locations\": [\"BR\", \"UA::Kiyv\"], \"thumbnail_url\": \"http://smallmedia.com/logo.jpg\", \"cover_url\": \"http://smallmedia.com/logo.jpg\", \"funding_account_ids\": [], \"preview\": false, \"blocking\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"0100000001dd7837f494570fca1e66ebd64f2bce580888deeac3446d8c578ef2069e5538d1010000006b483045022100facf3da4be69071f7b31d000e6cf83ccd9496299152d2dd90b14d57cf4ec6ed002203f9a7f28d1d47be658574cc95ac1cacb01d05f38a4b28a52ffe447042c8b303a012102452a9e36a78eee28ae7f7ce98f8c23dac13f1b92141a3c47bca96e56d3c3c7e8ffffffff0200e1f50500000000fd1701b50b406269676368616e6e656c4ced0012740a210382b3efda3b44a0935681695a8e457d5569b6ce5f2c5f4b5f4984211d15046758121663726561746f7240736d616c6c6d656469612e636f6d1a15687474703a2f2f736d616c6c6d656469612e636f6d22202a1e687474703a2f2f736d616c6c6d656469612e636f6d2f6c6f676f2e6a7067420b426967204368616e6e656c4a1e41206368616e6e656c2077697468206c6f7473206f6620766964656f732e52202a1e687474703a2f2f736d616c6c6d656469612e636f6d2f6c6f676f2e6a70675a056d757369635a0361727462050883011820620308ab016a0208206a0908e9011a044b6979766d7576a9145ba11040a83c031a7567856c69eb52b5c7958cab88acd22cd305000000001976a9143ee122fc9d88fb2f5081726f0a218232f42d5a9b88ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"n3qAPYkzxVBWURGCDVpPey2v68CiXaQiGS\",\n        \"amount\": \"1.9993635\",\n        \"confirmations\": 1,\n        \"height\": 210,\n        \"nout\": 1,\n        \"timestamp\": 1651689431,\n        \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mosSjQ2YU52ZjtFJAzQVv42oKtZdNH7pwK\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"9ce786f2548d5128675471b8e87142f0b7d50c93\",\n        \"claim_op\": \"create\",\n        \"confirmations\": -2,\n        \"has_signing_key\": true,\n        \"height\": -2,\n        \"meta\": {},\n        \"name\": \"@bigchannel\",\n        \"normalized_name\": \"@bigchannel\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://@bigchannel#9ce786f2548d5128675471b8e87142f0b7d50c93\",\n        \"timestamp\": null,\n        \"txid\": \"86f2157440e086342e7f85f55c9e75ba35f1aeb2f00ceba51f56e42cce488388\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"cover\": {\n            \"url\": \"http://smallmedia.com/logo.jpg\"\n          },\n          \"description\": \"A channel with lots of videos.\",\n          \"email\": \"creator@smallmedia.com\",\n          \"languages\": [\n            \"pt-BR\",\n            \"uk\"\n          ],\n          \"locations\": [\n            {\n              \"country\": \"BR\"\n            },\n            {\n              \"city\": \"Kiyv\",\n              \"country\": \"UA\"\n            }\n          ],\n          \"public_key\": \"0382b3efda3b44a0935681695a8e457d5569b6ce5f2c5f4b5f4984211d15046758\",\n          \"public_key_id\": \"mt2nVC5RhPUCzza8818d1hSxgwmaghbMY8\",\n          \"tags\": [\n            \"music\",\n            \"art\"\n          ],\n          \"thumbnail\": {\n            \"url\": \"http://smallmedia.com/logo.jpg\"\n          },\n          \"title\": \"Big Channel\",\n          \"website_url\": \"http://smallmedia.com\"\n        },\n        \"value_type\": \"channel\"\n      },\n      {\n        \"address\": \"mmFRtiZVsNfptLsqm5RybET7SckysLdvin\",\n        \"amount\": \"0.9772565\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"timestamp\": null,\n        \"txid\": \"86f2157440e086342e7f85f55c9e75ba35f1aeb2f00ceba51f56e42cce488388\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.022107\",\n    \"total_input\": \"1.9993635\",\n    \"total_output\": \"1.9772565\",\n    \"txid\": \"86f2157440e086342e7f85f55c9e75ba35f1aeb2f00ceba51f56e42cce488388\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "channel_export",
                "description": "Export channel private key.",
                "arguments": [
                    {
                        "name": "channel_id",
                        "type": "str",
                        "description": "claim id of channel to export",
                        "is_required": true
                    },
                    {
                        "name": "channel_name",
                        "type": "str",
                        "description": "name of channel to export",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "one or more account ids for accounts to look in for channels, defaults to all accounts.",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "(str) serialized channel private key",
                "examples": []
            },
            {
                "name": "channel_import",
                "description": "Import serialized channel private key (to allow signing new streams to the channel)",
                "arguments": [
                    {
                        "name": "channel_data",
                        "type": "str",
                        "description": "serialized channel, as exported by channel export",
                        "is_required": true
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "import into specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "(dict) Result dictionary",
                "examples": []
            },
            {
                "name": "channel_list",
                "description": "List my channel claims.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "str or list",
                        "description": "channel name",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str or list",
                        "description": "channel id",
                        "is_required": false
                    },
                    {
                        "name": "is_spent",
                        "type": "bool",
                        "description": "shows previous channel updates and abandons",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict results to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    },
                    {
                        "name": "resolve",
                        "type": "bool",
                        "description": "resolves each channel to provide additional metadata",
                        "is_required": false
                    },
                    {
                        "name": "no_totals",
                        "type": "bool",
                        "description": "do not calculate the total number of pages and items in result set (significant performance boost)",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"total_items\": \"Total number of items.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ]\n            }",
                "examples": [
                    {
                        "title": "List your channel claims",
                        "curl": "curl -d'{\"method\": \"channel_list\", \"params\": {\"name\": [], \"claim_id\": [], \"is_spent\": false, \"resolve\": false, \"no_totals\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet channel list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"channel_list\", \"params\": {\"name\": [], \"claim_id\": [], \"is_spent\": false, \"resolve\": false, \"no_totals\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"claim_op\": \"create\",\n        \"confirmations\": 1,\n        \"has_signing_key\": true,\n        \"height\": 209,\n        \"is_internal_transfer\": false,\n        \"is_my_input\": true,\n        \"is_my_output\": true,\n        \"is_spent\": false,\n        \"meta\": {},\n        \"name\": \"@channel\",\n        \"normalized_name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"timestamp\": 1651689431,\n        \"txid\": \"4c38e9c657417039445308399839d188af8cd6366a4ee2bf723eca9c0d05d53d\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n          \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\"\n        },\n        \"value_type\": \"channel\"\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 1,\n    \"total_pages\": 1\n  }\n}"
                    },
                    {
                        "title": "Paginate your channel claims",
                        "curl": "curl -d'{\"method\": \"channel_list\", \"params\": {\"name\": [], \"claim_id\": [], \"is_spent\": false, \"page\": 1, \"page_size\": 20, \"resolve\": false, \"no_totals\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet channel list --page=1 --page_size=20",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"channel_list\", \"params\": {\"name\": [], \"claim_id\": [], \"is_spent\": false, \"page\": 1, \"page_size\": 20, \"resolve\": false, \"no_totals\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"claim_op\": \"create\",\n        \"confirmations\": 1,\n        \"has_signing_key\": true,\n        \"height\": 209,\n        \"is_internal_transfer\": false,\n        \"is_my_input\": true,\n        \"is_my_output\": true,\n        \"is_spent\": false,\n        \"meta\": {},\n        \"name\": \"@channel\",\n        \"normalized_name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"timestamp\": 1651689431,\n        \"txid\": \"4c38e9c657417039445308399839d188af8cd6366a4ee2bf723eca9c0d05d53d\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n          \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\"\n        },\n        \"value_type\": \"channel\"\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 1,\n    \"total_pages\": 1\n  }\n}"
                    }
                ]
            },
            {
                "name": "channel_sign",
                "description": "Signs data using the specified channel signing key.",
                "arguments": [
                    {
                        "name": "channel_name",
                        "type": "str",
                        "description": "name of channel used to sign (or use channel id)",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str",
                        "description": "claim id of channel used to sign (or use channel name)",
                        "is_required": false
                    },
                    {
                        "name": "hexdata",
                        "type": "str",
                        "description": "data to sign, encoded as hexadecimal",
                        "is_required": false
                    },
                    {
                        "name": "channel_account_id",
                        "type": "str",
                        "description": "one or more account ids for accounts to look in for channel certificates, defaults to all accounts.",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "(dict) Signature if successfully made, (None) or an error otherwise\n    {\n        \"signature\":    (str) The signature of the comment,\n        \"signing_ts\":   (str) The timestamp used to sign the comment,\n    }",
                "examples": []
            },
            {
                "name": "channel_update",
                "description": "Update an existing channel claim.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "claim_id of the channel to update",
                        "is_required": true
                    },
                    {
                        "name": "bid",
                        "type": "decimal",
                        "description": "amount to back the claim",
                        "is_required": false
                    },
                    {
                        "name": "bid_everything",
                        "type": "bool",
                        "description": "bid everything from funding accounts (excluding claims), default: false.",
                        "is_required": false
                    },
                    {
                        "name": "title",
                        "type": "str",
                        "description": "title of the publication",
                        "is_required": false
                    },
                    {
                        "name": "description",
                        "type": "str",
                        "description": "description of the publication",
                        "is_required": false
                    },
                    {
                        "name": "email",
                        "type": "str",
                        "description": "email of channel owner",
                        "is_required": false
                    },
                    {
                        "name": "website_url",
                        "type": "str",
                        "description": "website url",
                        "is_required": false
                    },
                    {
                        "name": "featured",
                        "type": "list",
                        "description": "claim_ids of featured content in channel",
                        "is_required": false
                    },
                    {
                        "name": "clear_featured",
                        "type": "bool",
                        "description": "clear existing featured content (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "tags",
                        "type": "list",
                        "description": "add content tags",
                        "is_required": false
                    },
                    {
                        "name": "clear_tags",
                        "type": "bool",
                        "description": "clear existing tags (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "languages",
                        "type": "list",
                        "description": "languages used by the channel, using RFC 5646 format, eg: for English `--languages=en` for Spanish (Spain) `--languages=es-ES` for Spanish (Mexican) `--languages=es-MX` for Chinese (Simplified) `--languages=zh-Hans` for Chinese (Traditional) `--languages=zh-Hant`",
                        "is_required": false
                    },
                    {
                        "name": "clear_languages",
                        "type": "bool",
                        "description": "clear existing languages (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "locations",
                        "type": "list",
                        "description": "locations of the channel, consisting of 2 letter `country` code and a `state`, `city` and a postal `code` along with a `latitude` and `longitude`. for JSON RPC: pass a dictionary with aforementioned attributes as keys, eg: ... \"locations\": [{'country': 'US', 'state': 'NH'}] ... for command line: pass a colon delimited list with values in the following order: \"COUNTRY:STATE:CITY:CODE:LATITUDE:LONGITUDE\" making sure to include colon for blank values, for example to provide only the city: ... --locations=\"::Manchester\" with all values set: ... --locations=\"US:NH:Manchester:03101:42.990605:-71.460989\" optionally, you can just pass the \"LATITUDE:LONGITUDE\": ... --locations=\"42.990605:-71.460989\" finally, you can also pass JSON string of dictionary on the command line as you would via JSON RPC ... --locations=\"{'country': 'US', 'state': 'NH'}\"",
                        "is_required": false
                    },
                    {
                        "name": "clear_locations",
                        "type": "bool",
                        "description": "clear existing locations (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "thumbnail_url",
                        "type": "str",
                        "description": "thumbnail url",
                        "is_required": false
                    },
                    {
                        "name": "cover_url",
                        "type": "str",
                        "description": "url of cover image",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account in which to look for channel (default: all)",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "funding_account_ids",
                        "type": "list",
                        "description": "ids of accounts to fund this transaction",
                        "is_required": false
                    },
                    {
                        "name": "claim_address",
                        "type": "str",
                        "description": "address where the channel is sent",
                        "is_required": false
                    },
                    {
                        "name": "new_signing_key",
                        "type": "bool",
                        "description": "generate a new signing key, will invalidate all previous publishes",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until transaction is in mempool",
                        "is_required": false
                    },
                    {
                        "name": "replace",
                        "type": "bool",
                        "description": "instead of modifying specific values on the channel, this will clear all existing values and only save passed in values, useful for form submissions where all values are always set",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Update a channel claim",
                        "curl": "curl -d'{\"method\": \"channel_update\", \"params\": {\"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\", \"bid_everything\": false, \"title\": \"New Channel\", \"featured\": [], \"clear_featured\": false, \"tags\": [], \"clear_tags\": false, \"languages\": [], \"clear_languages\": false, \"locations\": [], \"clear_locations\": false, \"new_signing_key\": false, \"funding_account_ids\": [], \"preview\": false, \"blocking\": false, \"replace\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet channel update 879a99e68ea282a397e16ca1680cc925a160c169 --title=\"New Channel\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"channel_update\", \"params\": {\"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\", \"bid_everything\": false, \"title\": \"New Channel\", \"featured\": [], \"clear_featured\": false, \"tags\": [], \"clear_tags\": false, \"languages\": [], \"clear_languages\": false, \"locations\": [], \"clear_locations\": false, \"new_signing_key\": false, \"funding_account_ids\": [], \"preview\": false, \"blocking\": false, \"replace\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"01000000023dd5050d9cca3e72bfe24e6a36d68caf88d139983908534439704157c6e9384c000000006a47304402200654fbde058bf7272cd4cd9de5315760e57165f3aa5462fdfd674cb57eec0df5022054649b819d3c8367c5d16db77a4c35327932a0740739c8a5827d18f87ed89efc012102ef5464c9bf949c4770e6ba1e61bf56b9bec340e2ac86f6d55956748b5d291582ffffffff60a00daa59b4c64a95006fae988984bc4be767b921d1049f3c556581279667ea000000006a47304402202cea1e2dcdf12468f9b55cd95abce412d2646d70f8c873abf17d917bcfe1bbd002204760c886536105f8fa4be3d2cfd6181b618921889a1b0b5c38d0db5a92e11c98012103fb77d532fd2f0dfdb8d19d6d9a6b318ba96f7ec00f231dcc9f83f4ed2a56c658ffffffff0200e1f505000000006eb708406368616e6e656c1469c160a125c90c68a16ce197a382a28ee6999a87330012230a2103a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709420b4e6577204368616e6e656c6d6d76a9149ecd8961673460542f461f981763971f0513c5a688ac5ec9ea0b000000001976a914f4c459c94af9b7a64d22493d1136ffa5ec788ac288ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"claim_op\": \"create\",\n        \"confirmations\": 1,\n        \"has_signing_key\": true,\n        \"height\": 209,\n        \"meta\": {},\n        \"name\": \"@channel\",\n        \"normalized_name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"timestamp\": 1651689431,\n        \"txid\": \"4c38e9c657417039445308399839d188af8cd6366a4ee2bf723eca9c0d05d53d\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n          \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\"\n        },\n        \"value_type\": \"channel\"\n      },\n      {\n        \"address\": \"n1LnLz8pJ6yqfxX8DyNiTkZYBBvFHePLmm\",\n        \"amount\": \"1.999604\",\n        \"confirmations\": 1,\n        \"height\": 209,\n        \"nout\": 0,\n        \"timestamp\": 1651689431,\n        \"txid\": \"ea6796278165553c9f04d121b967e74bbc848998ae6f00954ac6b459aa0da060\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"claim_op\": \"update\",\n        \"confirmations\": -2,\n        \"has_signing_key\": true,\n        \"height\": -2,\n        \"meta\": {},\n        \"name\": \"@channel\",\n        \"normalized_name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"timestamp\": null,\n        \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n          \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n          \"title\": \"New Channel\"\n        },\n        \"value_type\": \"channel\"\n      },\n      {\n        \"address\": \"n3qAPYkzxVBWURGCDVpPey2v68CiXaQiGS\",\n        \"amount\": \"1.9993635\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"timestamp\": null,\n        \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.0002405\",\n    \"total_input\": \"2.999604\",\n    \"total_output\": \"2.9993635\",\n    \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\"\n  }\n}"
                    }
                ]
            }
        ]
    },
    "claim": {
        "doc": "List and search all types of claims.",
        "commands": [
            {
                "name": "claim_list",
                "description": "List my stream and channel claims.",
                "arguments": [
                    {
                        "name": "claim_type",
                        "type": "str or list",
                        "description": "claim type: channel, stream, repost, collection",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str or list",
                        "description": "claim id",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str or list",
                        "description": "streams in this channel",
                        "is_required": false
                    },
                    {
                        "name": "name",
                        "type": "str or list",
                        "description": "claim name",
                        "is_required": false
                    },
                    {
                        "name": "is_spent",
                        "type": "bool",
                        "description": "shows previous claim updates and abandons",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict results to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "has_source",
                        "type": "bool",
                        "description": "list claims containing a source field",
                        "is_required": false
                    },
                    {
                        "name": "has_no_source",
                        "type": "bool",
                        "description": "list claims not containing a source field",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    },
                    {
                        "name": "resolve",
                        "type": "bool",
                        "description": "resolves each claim to provide additional metadata",
                        "is_required": false
                    },
                    {
                        "name": "order_by",
                        "type": "str",
                        "description": "field to order by: 'name', 'height', 'amount'",
                        "is_required": false
                    },
                    {
                        "name": "no_totals",
                        "type": "bool",
                        "description": "do not calculate the total number of pages and items in result set (significant performance boost)",
                        "is_required": false
                    },
                    {
                        "name": "include_received_tips",
                        "type": "bool",
                        "description": "calculate the amount of tips received for claim outputs",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"total_items\": \"Total number of items.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ]\n            }",
                "examples": [
                    {
                        "title": "List all your claims",
                        "curl": "curl -d'{\"method\": \"claim_list\", \"params\": {\"claim_type\": [], \"claim_id\": [], \"name\": [], \"is_spent\": false, \"channel_id\": [], \"has_source\": false, \"has_no_source\": false, \"resolve\": false, \"no_totals\": false, \"include_received_tips\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet claim list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"claim_list\", \"params\": {\"claim_type\": [], \"claim_id\": [], \"name\": [], \"is_spent\": false, \"channel_id\": [], \"has_source\": false, \"has_no_source\": false, \"resolve\": false, \"no_totals\": false, \"include_received_tips\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"address\": \"n28FYUe42shoUtuxDH9BKaTsn3rvf2JCV2\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 1,\n        \"height\": 214,\n        \"is_channel_signature_valid\": true,\n        \"is_internal_transfer\": false,\n        \"is_my_input\": true,\n        \"is_my_output\": true,\n        \"is_spent\": false,\n        \"meta\": {},\n        \"name\": \"astream\",\n        \"normalized_name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://astream#713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"signing_channel\": {\n          \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n          \"amount\": \"1.0\",\n          \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"claim_op\": \"update\",\n          \"confirmations\": 5,\n          \"has_signing_key\": true,\n          \"height\": 210,\n          \"meta\": {},\n          \"name\": \"@channel\",\n          \"normalized_name\": \"@channel\",\n          \"nout\": 0,\n          \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"timestamp\": 1651689431,\n          \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n          \"type\": \"claim\",\n          \"value\": {\n            \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n            \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n            \"title\": \"New Channel\"\n          },\n          \"value_type\": \"channel\"\n        },\n        \"timestamp\": 1651689434,\n        \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpnta3qbuz\",\n            \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n            \"size\": \"11\"\n          },\n          \"stream_type\": \"binary\"\n        },\n        \"value_type\": \"stream\"\n      },\n      {\n        \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 5,\n        \"has_signing_key\": true,\n        \"height\": 210,\n        \"is_internal_transfer\": false,\n        \"is_my_input\": true,\n        \"is_my_output\": true,\n        \"is_spent\": false,\n        \"meta\": {},\n        \"name\": \"@channel\",\n        \"normalized_name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"timestamp\": 1651689431,\n        \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n          \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n          \"title\": \"New Channel\"\n        },\n        \"value_type\": \"channel\"\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 2,\n    \"total_pages\": 1\n  }\n}"
                    },
                    {
                        "title": "Paginate your claims",
                        "curl": "curl -d'{\"method\": \"claim_list\", \"params\": {\"claim_type\": [], \"claim_id\": [], \"name\": [], \"is_spent\": false, \"channel_id\": [], \"has_source\": false, \"has_no_source\": false, \"page\": 1, \"page_size\": 20, \"resolve\": false, \"no_totals\": false, \"include_received_tips\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet claim list --page=1 --page_size=20",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"claim_list\", \"params\": {\"claim_type\": [], \"claim_id\": [], \"name\": [], \"is_spent\": false, \"channel_id\": [], \"has_source\": false, \"has_no_source\": false, \"page\": 1, \"page_size\": 20, \"resolve\": false, \"no_totals\": false, \"include_received_tips\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"address\": \"n28FYUe42shoUtuxDH9BKaTsn3rvf2JCV2\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 1,\n        \"height\": 214,\n        \"is_channel_signature_valid\": true,\n        \"is_internal_transfer\": false,\n        \"is_my_input\": true,\n        \"is_my_output\": true,\n        \"is_spent\": false,\n        \"meta\": {},\n        \"name\": \"astream\",\n        \"normalized_name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://astream#713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"signing_channel\": {\n          \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n          \"amount\": \"1.0\",\n          \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"claim_op\": \"update\",\n          \"confirmations\": 5,\n          \"has_signing_key\": true,\n          \"height\": 210,\n          \"meta\": {},\n          \"name\": \"@channel\",\n          \"normalized_name\": \"@channel\",\n          \"nout\": 0,\n          \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"timestamp\": 1651689431,\n          \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n          \"type\": \"claim\",\n          \"value\": {\n            \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n            \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n            \"title\": \"New Channel\"\n          },\n          \"value_type\": \"channel\"\n        },\n        \"timestamp\": 1651689434,\n        \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpnta3qbuz\",\n            \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n            \"size\": \"11\"\n          },\n          \"stream_type\": \"binary\"\n        },\n        \"value_type\": \"stream\"\n      },\n      {\n        \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 5,\n        \"has_signing_key\": true,\n        \"height\": 210,\n        \"is_internal_transfer\": false,\n        \"is_my_input\": true,\n        \"is_my_output\": true,\n        \"is_spent\": false,\n        \"meta\": {},\n        \"name\": \"@channel\",\n        \"normalized_name\": \"@channel\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"timestamp\": 1651689431,\n        \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n          \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n          \"title\": \"New Channel\"\n        },\n        \"value_type\": \"channel\"\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 2,\n    \"total_pages\": 1\n  }\n}"
                    }
                ]
            },
            {
                "name": "claim_search",
                "description": "Search for stream and channel claims on the blockchain.\n\nArguments marked with \"supports equality constraints\" allow prepending the\nvalue with an equality constraint such as '>', '>=', '<' and '<='\neg. --height=\">400000\" would limit results to only claims above 400k block height.\n\nThey also support multiple constraints passed as a list of the args described above.\neg. --release_time=[\">1000000\", \"<2000000\"]",
                "arguments": [
                    {
                        "name": "name",
                        "type": "str",
                        "description": "claim name (normalized)",
                        "is_required": false
                    },
                    {
                        "name": "text",
                        "type": "str",
                        "description": "full text search",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "full or partial claim id",
                        "is_required": false
                    },
                    {
                        "name": "claim_ids",
                        "type": "list",
                        "description": "list of full claim ids",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "transaction id",
                        "is_required": false
                    },
                    {
                        "name": "nout",
                        "type": "str",
                        "description": "position in the transaction",
                        "is_required": false
                    },
                    {
                        "name": "channel",
                        "type": "str",
                        "description": "claims signed by this channel (argument is a URL which automatically gets resolved), see --channel_ids if you need to filter by multiple channels at the same time, includes claims with invalid signatures, use in conjunction with --valid_channel_signature",
                        "is_required": false
                    },
                    {
                        "name": "channel_ids",
                        "type": "list",
                        "description": "claims signed by any of these channels (arguments must be claim ids of the channels), includes claims with invalid signatures, implies --has_channel_signature, use in conjunction with --valid_channel_signature",
                        "is_required": false
                    },
                    {
                        "name": "not_channel_ids",
                        "type": "list",
                        "description": "exclude claims signed by any of these channels (arguments must be claim ids of the channels)",
                        "is_required": false
                    },
                    {
                        "name": "has_channel_signature",
                        "type": "bool",
                        "description": "claims with a channel signature (valid or invalid)",
                        "is_required": false
                    },
                    {
                        "name": "valid_channel_signature",
                        "type": "bool",
                        "description": "claims with a valid channel signature or no signature, use in conjunction with --has_channel_signature to only get claims with valid signatures",
                        "is_required": false
                    },
                    {
                        "name": "invalid_channel_signature",
                        "type": "bool",
                        "description": "claims with invalid channel signature or no signature, use in conjunction with --has_channel_signature to only get claims with invalid signatures",
                        "is_required": false
                    },
                    {
                        "name": "limit_claims_per_channel",
                        "type": "int",
                        "description": "only return up to the specified number of claims per channel",
                        "is_required": false
                    },
                    {
                        "name": "is_controlling",
                        "type": "bool",
                        "description": "winning claims of their respective name",
                        "is_required": false
                    },
                    {
                        "name": "public_key_id",
                        "type": "str",
                        "description": "only return channels having this public key id, this is the same key as used in the wallet file to map channel certificate private keys: {'public_key_id': 'private key'}",
                        "is_required": false
                    },
                    {
                        "name": "height",
                        "type": "int",
                        "description": "last updated block height (supports equality constraints)",
                        "is_required": false
                    },
                    {
                        "name": "timestamp",
                        "type": "int",
                        "description": "last updated timestamp (supports equality constraints)",
                        "is_required": false
                    },
                    {
                        "name": "creation_height",
                        "type": "int",
                        "description": "created at block height (supports equality constraints)",
                        "is_required": false
                    },
                    {
                        "name": "creation_timestamp",
                        "type": "int",
                        "description": "created at timestamp (supports equality constraints)",
                        "is_required": false
                    },
                    {
                        "name": "activation_height",
                        "type": "int",
                        "description": "height at which claim starts competing for name (supports equality constraints)",
                        "is_required": false
                    },
                    {
                        "name": "expiration_height",
                        "type": "int",
                        "description": "height at which claim will expire (supports equality constraints)",
                        "is_required": false
                    },
                    {
                        "name": "release_time",
                        "type": "int",
                        "description": "limit to claims self-described as having been released to the public on or after this UTC timestamp, when claim does not provide a release time the publish time is used instead (supports equality constraints)",
                        "is_required": false
                    },
                    {
                        "name": "amount",
                        "type": "int",
                        "description": "limit by claim value (supports equality constraints)",
                        "is_required": false
                    },
                    {
                        "name": "support_amount",
                        "type": "int",
                        "description": "limit by supports and tips received (supports equality constraints)",
                        "is_required": false
                    },
                    {
                        "name": "effective_amount",
                        "type": "int",
                        "description": "limit by total value (initial claim value plus all tips and supports received), this amount is blank until claim has reached activation height (supports equality constraints)",
                        "is_required": false
                    },
                    {
                        "name": "trending_score",
                        "type": "int",
                        "description": "limit by trending score (supports equality constraints)",
                        "is_required": false
                    },
                    {
                        "name": "trending_group",
                        "type": "int",
                        "description": "DEPRECATED - instead please use trending_score",
                        "is_required": false
                    },
                    {
                        "name": "trending_mixed",
                        "type": "int",
                        "description": "DEPRECATED - instead please use trending_score",
                        "is_required": false
                    },
                    {
                        "name": "trending_local",
                        "type": "int",
                        "description": "DEPRECATED - instead please use trending_score",
                        "is_required": false
                    },
                    {
                        "name": "trending_global",
                        "type": "int",
                        "description": "DEPRECATED - instead please use trending_score",
                        "is_required": false
                    },
                    {
                        "name": "reposted_claim_id",
                        "type": "str",
                        "description": "all reposts of the specified original claim id",
                        "is_required": false
                    },
                    {
                        "name": "reposted",
                        "type": "int",
                        "description": "claims reposted this many times (supports equality constraints)",
                        "is_required": false
                    },
                    {
                        "name": "claim_type",
                        "type": "str",
                        "description": "filter by 'channel', 'stream', 'repost' or 'collection'",
                        "is_required": false
                    },
                    {
                        "name": "stream_types",
                        "type": "list",
                        "description": "filter by 'video', 'image', 'document', etc",
                        "is_required": false
                    },
                    {
                        "name": "media_types",
                        "type": "list",
                        "description": "filter by 'video/mp4', 'image/png', etc",
                        "is_required": false
                    },
                    {
                        "name": "fee_currency",
                        "type": "string",
                        "description": "specify fee currency: LBC, BTC, USD",
                        "is_required": false
                    },
                    {
                        "name": "fee_amount",
                        "type": "decimal",
                        "description": "content download fee (supports equality constraints)",
                        "is_required": false
                    },
                    {
                        "name": "duration",
                        "type": "int",
                        "description": "duration of video or audio in seconds (supports equality constraints)",
                        "is_required": false
                    },
                    {
                        "name": "any_tags",
                        "type": "list",
                        "description": "find claims containing any of the tags",
                        "is_required": false
                    },
                    {
                        "name": "all_tags",
                        "type": "list",
                        "description": "find claims containing every tag",
                        "is_required": false
                    },
                    {
                        "name": "not_tags",
                        "type": "list",
                        "description": "find claims not containing any of these tags",
                        "is_required": false
                    },
                    {
                        "name": "any_languages",
                        "type": "list",
                        "description": "find claims containing any of the languages",
                        "is_required": false
                    },
                    {
                        "name": "all_languages",
                        "type": "list",
                        "description": "find claims containing every language",
                        "is_required": false
                    },
                    {
                        "name": "not_languages",
                        "type": "list",
                        "description": "find claims not containing any of these languages",
                        "is_required": false
                    },
                    {
                        "name": "any_locations",
                        "type": "list",
                        "description": "find claims containing any of the locations",
                        "is_required": false
                    },
                    {
                        "name": "all_locations",
                        "type": "list",
                        "description": "find claims containing every location",
                        "is_required": false
                    },
                    {
                        "name": "not_locations",
                        "type": "list",
                        "description": "find claims not containing any of these locations",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    },
                    {
                        "name": "order_by",
                        "type": "list",
                        "description": "field to order by, default is descending order, to do an ascending order prepend ^ to the field name, eg. '^amount' available fields: 'name', 'height', 'release_time', 'publish_time', 'amount', 'effective_amount', 'support_amount', 'trending_group', 'trending_mixed', 'trending_local', 'trending_global', 'activation_height'",
                        "is_required": false
                    },
                    {
                        "name": "no_totals",
                        "type": "bool",
                        "description": "do not calculate the total number of pages and items in result set (significant performance boost)",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "wallet to check for claim purchase receipts",
                        "is_required": false
                    },
                    {
                        "name": "include_purchase_receipt",
                        "type": "bool",
                        "description": "lookup and include a receipt if this wallet has purchased the claim",
                        "is_required": false
                    },
                    {
                        "name": "include_is_my_output",
                        "type": "bool",
                        "description": "lookup and include a boolean indicating if claim being resolved is yours",
                        "is_required": false
                    },
                    {
                        "name": "remove_duplicates",
                        "type": "bool",
                        "description": "removes duplicated content from search by picking either the original claim or the oldest matching repost",
                        "is_required": false
                    },
                    {
                        "name": "has_source",
                        "type": "bool",
                        "description": "find claims containing a source field",
                        "is_required": false
                    },
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "find claims where the source stream descriptor hash matches (partially or completely) the given hexadecimal string",
                        "is_required": false
                    },
                    {
                        "name": "has_no_source",
                        "type": "bool",
                        "description": "find claims not containing a source field",
                        "is_required": false
                    },
                    {
                        "name": "new_sdk_server",
                        "type": "str",
                        "description": "URL of the new SDK server (EXPERIMENTAL)",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"total_items\": \"Total number of items.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ]\n            }",
                "examples": [
                    {
                        "title": "Search for all claims in channel",
                        "curl": "curl -d'{\"method\": \"claim_search\", \"params\": {\"claim_ids\": [], \"channel\": \"@channel\", \"channel_ids\": [], \"not_channel_ids\": [], \"has_channel_signature\": false, \"valid_channel_signature\": false, \"invalid_channel_signature\": false, \"is_controlling\": false, \"stream_types\": [], \"media_types\": [], \"any_tags\": [], \"all_tags\": [], \"not_tags\": [], \"any_languages\": [], \"all_languages\": [], \"not_languages\": [], \"any_locations\": [], \"all_locations\": [], \"not_locations\": [], \"order_by\": [], \"no_totals\": false, \"include_purchase_receipt\": false, \"include_is_my_output\": false, \"remove_duplicates\": false, \"has_source\": false, \"has_no_source\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet claim search --channel=@channel",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"claim_search\", \"params\": {\"claim_ids\": [], \"channel\": \"@channel\", \"channel_ids\": [], \"not_channel_ids\": [], \"has_channel_signature\": false, \"valid_channel_signature\": false, \"invalid_channel_signature\": false, \"is_controlling\": false, \"stream_types\": [], \"media_types\": [], \"any_tags\": [], \"all_tags\": [], \"not_tags\": [], \"any_languages\": [], \"all_languages\": [], \"not_languages\": [], \"any_locations\": [], \"all_locations\": [], \"not_locations\": [], \"order_by\": [], \"no_totals\": false, \"include_purchase_receipt\": false, \"include_is_my_output\": false, \"remove_duplicates\": false, \"has_source\": false, \"has_no_source\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"blocked\": {\n      \"channels\": [],\n      \"total\": 0\n    },\n    \"items\": [\n      {\n        \"address\": \"n28FYUe42shoUtuxDH9BKaTsn3rvf2JCV2\",\n        \"amount\": \"1.0\",\n        \"canonical_url\": \"lbry://@channel#8/astream#7\",\n        \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 1,\n        \"height\": 214,\n        \"is_channel_signature_valid\": true,\n        \"meta\": {\n          \"activation_height\": 214,\n          \"creation_height\": 213,\n          \"creation_timestamp\": 1651689432,\n          \"effective_amount\": \"1.0\",\n          \"expiration_height\": 714,\n          \"is_controlling\": true,\n          \"reposted\": 0,\n          \"support_amount\": \"0.0\",\n          \"take_over_height\": 213\n        },\n        \"name\": \"astream\",\n        \"normalized_name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://astream#713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"short_url\": \"lbry://astream#7\",\n        \"signing_channel\": {\n          \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n          \"amount\": \"1.0\",\n          \"canonical_url\": \"lbry://@channel#8\",\n          \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"claim_op\": \"update\",\n          \"confirmations\": 5,\n          \"has_signing_key\": false,\n          \"height\": 210,\n          \"meta\": {\n            \"activation_height\": 210,\n            \"claims_in_channel\": 1,\n            \"creation_height\": 209,\n            \"creation_timestamp\": 1651689431,\n            \"effective_amount\": \"1.0\",\n            \"expiration_height\": 710,\n            \"is_controlling\": true,\n            \"reposted\": 0,\n            \"support_amount\": \"0.0\",\n            \"take_over_height\": 209\n          },\n          \"name\": \"@channel\",\n          \"normalized_name\": \"@channel\",\n          \"nout\": 0,\n          \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"short_url\": \"lbry://@channel#8\",\n          \"timestamp\": 1651689431,\n          \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n          \"type\": \"claim\",\n          \"value\": {\n            \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n            \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n            \"title\": \"New Channel\"\n          },\n          \"value_type\": \"channel\"\n        },\n        \"timestamp\": 1651689434,\n        \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpnta3qbuz\",\n            \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n            \"size\": \"11\"\n          },\n          \"stream_type\": \"binary\"\n        },\n        \"value_type\": \"stream\"\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 1,\n    \"total_pages\": 1\n  }\n}"
                    },
                    {
                        "title": "Search for claims matching a name",
                        "curl": "curl -d'{\"method\": \"claim_search\", \"params\": {\"name\": \"astream\", \"claim_ids\": [], \"channel_ids\": [], \"not_channel_ids\": [], \"has_channel_signature\": false, \"valid_channel_signature\": false, \"invalid_channel_signature\": false, \"is_controlling\": false, \"stream_types\": [], \"media_types\": [], \"any_tags\": [], \"all_tags\": [], \"not_tags\": [], \"any_languages\": [], \"all_languages\": [], \"not_languages\": [], \"any_locations\": [], \"all_locations\": [], \"not_locations\": [], \"order_by\": [], \"no_totals\": false, \"include_purchase_receipt\": false, \"include_is_my_output\": false, \"remove_duplicates\": false, \"has_source\": false, \"has_no_source\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet claim search --name=\"astream\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"claim_search\", \"params\": {\"name\": \"astream\", \"claim_ids\": [], \"channel_ids\": [], \"not_channel_ids\": [], \"has_channel_signature\": false, \"valid_channel_signature\": false, \"invalid_channel_signature\": false, \"is_controlling\": false, \"stream_types\": [], \"media_types\": [], \"any_tags\": [], \"all_tags\": [], \"not_tags\": [], \"any_languages\": [], \"all_languages\": [], \"not_languages\": [], \"any_locations\": [], \"all_locations\": [], \"not_locations\": [], \"order_by\": [], \"no_totals\": false, \"include_purchase_receipt\": false, \"include_is_my_output\": false, \"remove_duplicates\": false, \"has_source\": false, \"has_no_source\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"blocked\": {\n      \"channels\": [],\n      \"total\": 0\n    },\n    \"items\": [\n      {\n        \"address\": \"n28FYUe42shoUtuxDH9BKaTsn3rvf2JCV2\",\n        \"amount\": \"1.0\",\n        \"canonical_url\": \"lbry://@channel#8/astream#7\",\n        \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 1,\n        \"height\": 214,\n        \"is_channel_signature_valid\": true,\n        \"meta\": {\n          \"activation_height\": 214,\n          \"creation_height\": 213,\n          \"creation_timestamp\": 1651689432,\n          \"effective_amount\": \"1.0\",\n          \"expiration_height\": 714,\n          \"is_controlling\": true,\n          \"reposted\": 0,\n          \"support_amount\": \"0.0\",\n          \"take_over_height\": 213\n        },\n        \"name\": \"astream\",\n        \"normalized_name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://astream#713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"short_url\": \"lbry://astream#7\",\n        \"signing_channel\": {\n          \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n          \"amount\": \"1.0\",\n          \"canonical_url\": \"lbry://@channel#8\",\n          \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"claim_op\": \"update\",\n          \"confirmations\": 5,\n          \"has_signing_key\": false,\n          \"height\": 210,\n          \"meta\": {\n            \"activation_height\": 210,\n            \"claims_in_channel\": 1,\n            \"creation_height\": 209,\n            \"creation_timestamp\": 1651689431,\n            \"effective_amount\": \"1.0\",\n            \"expiration_height\": 710,\n            \"is_controlling\": true,\n            \"reposted\": 0,\n            \"support_amount\": \"0.0\",\n            \"take_over_height\": 209\n          },\n          \"name\": \"@channel\",\n          \"normalized_name\": \"@channel\",\n          \"nout\": 0,\n          \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"short_url\": \"lbry://@channel#8\",\n          \"timestamp\": 1651689431,\n          \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n          \"type\": \"claim\",\n          \"value\": {\n            \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n            \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n            \"title\": \"New Channel\"\n          },\n          \"value_type\": \"channel\"\n        },\n        \"timestamp\": 1651689434,\n        \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpnta3qbuz\",\n            \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n            \"size\": \"11\"\n          },\n          \"stream_type\": \"binary\"\n        },\n        \"value_type\": \"stream\"\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 1,\n    \"total_pages\": 1\n  }\n}"
                    }
                ]
            }
        ]
    },
    "collection": {
        "doc": "Create, update, list, resolve, and abandon collections.",
        "commands": [
            {
                "name": "collection_abandon",
                "description": "Abandon one of my collection claims.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "claim_id of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "txid of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "nout",
                        "type": "int",
                        "description": "nout of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until abandon is in mempool",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": []
            },
            {
                "name": "collection_create",
                "description": "Create a new collection.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "str",
                        "description": "name of the collection",
                        "is_required": true
                    },
                    {
                        "name": "bid",
                        "type": "decimal",
                        "description": "amount to back the claim",
                        "is_required": true
                    },
                    {
                        "name": "bid_everything",
                        "type": "bool",
                        "description": "bid everything from funding accounts (excluding claims), default: false.",
                        "is_required": false
                    },
                    {
                        "name": "claims",
                        "type": "list",
                        "description": "claim ids to be included in the collection",
                        "is_required": false
                    },
                    {
                        "name": "allow_duplicate_name",
                        "type": "bool",
                        "description": "create new collection even if one already exists with given name. default: false.",
                        "is_required": false
                    },
                    {
                        "name": "title",
                        "type": "str",
                        "description": "title of the collection",
                        "is_required": false
                    },
                    {
                        "name": "description",
                        "type": "str",
                        "description": "description of the collection",
                        "is_required": false
                    },
                    {
                        "name": "tags",
                        "type": "list",
                        "description": "content tags",
                        "is_required": false
                    },
                    {
                        "name": "clear_languages",
                        "type": "bool",
                        "description": "clear existing languages (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "languages",
                        "type": "list",
                        "description": "languages used by the collection, using RFC 5646 format, eg: for English `--languages=en` for Spanish (Spain) `--languages=es-ES` for Spanish (Mexican) `--languages=es-MX` for Chinese (Simplified) `--languages=zh-Hans` for Chinese (Traditional) `--languages=zh-Hant`",
                        "is_required": false
                    },
                    {
                        "name": "locations",
                        "type": "list",
                        "description": "locations of the collection, consisting of 2 letter `country` code and a `state`, `city` and a postal `code` along with a `latitude` and `longitude`. for JSON RPC: pass a dictionary with aforementioned attributes as keys, eg: ... \"locations\": [{'country': 'US', 'state': 'NH'}] ... for command line: pass a colon delimited list with values in the following order: \"COUNTRY:STATE:CITY:CODE:LATITUDE:LONGITUDE\" making sure to include colon for blank values, for example to provide only the city: ... --locations=\"::Manchester\" with all values set: ... --locations=\"US:NH:Manchester:03101:42.990605:-71.460989\" optionally, you can just pass the \"LATITUDE:LONGITUDE\": ... --locations=\"42.990605:-71.460989\" finally, you can also pass JSON string of dictionary on the command line as you would via JSON RPC ... --locations=\"{'country': 'US', 'state': 'NH'}\"",
                        "is_required": false
                    },
                    {
                        "name": "thumbnail_url",
                        "type": "str",
                        "description": "thumbnail url",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str",
                        "description": "claim id of the publisher channel",
                        "is_required": false
                    },
                    {
                        "name": "channel_name",
                        "type": "str",
                        "description": "name of the publisher channel",
                        "is_required": false
                    },
                    {
                        "name": "channel_account_id",
                        "type": "str",
                        "description": "one or more account ids for accounts to look in for channel certificates, defaults to all accounts.",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account to use for holding the transaction",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "funding_account_ids",
                        "type": "list",
                        "description": "ids of accounts to fund this transaction",
                        "is_required": false
                    },
                    {
                        "name": "claim_address",
                        "type": "str",
                        "description": "address where the collection is sent to, if not specified it will be determined automatically from the account",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until transaction is in mempool",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Create a collection of one stream",
                        "curl": "curl -d'{\"method\": \"collection_create\", \"params\": {\"name\": \"tom\", \"bid\": \"1.0\", \"bid_everything\": false, \"claims\": [\"713086e8213eb2e43f8db0168c11fbb670dcff26\"], \"allow_duplicate_name\": false, \"tags\": [], \"languages\": [], \"locations\": [], \"channel_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\", \"channel_account_id\": [], \"funding_account_ids\": [], \"preview\": false, \"blocking\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet collection create --name=tom --bid=1.0 --channel_id=879a99e68ea282a397e16ca1680cc925a160c169 --claims=713086e8213eb2e43f8db0168c11fbb670dcff26",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"collection_create\", \"params\": {\"name\": \"tom\", \"bid\": \"1.0\", \"bid_everything\": false, \"claims\": [\"713086e8213eb2e43f8db0168c11fbb670dcff26\"], \"allow_duplicate_name\": false, \"tags\": [], \"languages\": [], \"locations\": [], \"channel_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\", \"channel_account_id\": [], \"funding_account_ids\": [], \"preview\": false, \"blocking\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"01000000013d3f6dc3ca37ebd960b3e5895ada48fd5ac77181f4556c148a017b579a255fd6010000006b483045022100887b92b7bf34b997159170c4fc01d3e25be502ceddaff8aefaafc0da320971e602201fc5bf2ca236fe404f42a3f2f9e9f2b9aae620ee17fccdec91a3bff6eb8e77cc0121022156e7ee26c6e37b5fc872116e3d104d911c72519fb50b019cc78ed57458f365ffffffff0200e1f5050000000091b503746f6d4c6f0169c160a125c90c68a16ce197a382a28ee6999a878b3e18a46db2480e9d8ed5d580c548af5a10db26a415932d99a8be6957565076559f595716841006238c11704e9cdef576f1613e9b31d30317b2028ddafd957b1a1812160a1426ffdc70b6fb118c16b08d3fe4b23e21e88630716d7576a914d1c66f3f463025c6d22aa14f9f98f8697bcf0db088ac202c7e17000000001976a91484edd27705afcc1fb509854392d27aa2813a448a88ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mzqQkh7ocP5jpPnXno3UvdvYLgQZHyvyEz\",\n        \"amount\": \"4.947555\",\n        \"confirmations\": 2,\n        \"height\": 215,\n        \"nout\": 1,\n        \"timestamp\": 1651689438,\n        \"txid\": \"d65f259a577b018a146c55f48171c75afd48da5a89e5b360d9eb37cac36d3f3d\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mze9EczryosaZVREWmm5BBwTAwnbs3wSn2\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"af778cf08c1debf04cf98e7e815a03a0b4db21b4\",\n        \"claim_op\": \"create\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"is_channel_signature_valid\": true,\n        \"meta\": {},\n        \"name\": \"tom\",\n        \"normalized_name\": \"tom\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://tom#af778cf08c1debf04cf98e7e815a03a0b4db21b4\",\n        \"signing_channel\": {\n          \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n          \"amount\": \"1.0\",\n          \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"claim_op\": \"update\",\n          \"confirmations\": 7,\n          \"has_signing_key\": true,\n          \"height\": 210,\n          \"meta\": {},\n          \"name\": \"@channel\",\n          \"normalized_name\": \"@channel\",\n          \"nout\": 0,\n          \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"timestamp\": 1651689431,\n          \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n          \"type\": \"claim\",\n          \"value\": {\n            \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n            \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n            \"title\": \"New Channel\"\n          },\n          \"value_type\": \"channel\"\n        },\n        \"timestamp\": null,\n        \"txid\": \"7de9ed81fb77031f9852b7891bc6a31e58f82b729d2f1744f6491f6d8b2836f4\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"claims\": [\n            \"713086e8213eb2e43f8db0168c11fbb670dcff26\"\n          ]\n        },\n        \"value_type\": \"collection\"\n      },\n      {\n        \"address\": \"msdpPYfmDx2gdcxXoxabcivvRpKUdvRNem\",\n        \"amount\": \"3.941448\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"timestamp\": null,\n        \"txid\": \"7de9ed81fb77031f9852b7891bc6a31e58f82b729d2f1744f6491f6d8b2836f4\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.006107\",\n    \"total_input\": \"4.947555\",\n    \"total_output\": \"4.941448\",\n    \"txid\": \"7de9ed81fb77031f9852b7891bc6a31e58f82b729d2f1744f6491f6d8b2836f4\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "collection_list",
                "description": "List my collection claims.",
                "arguments": [
                    {
                        "name": "resolve",
                        "type": "bool",
                        "description": "resolve collection claim",
                        "is_required": false
                    },
                    {
                        "name": "resolve_claims",
                        "type": "int",
                        "description": "resolve every claim",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict results to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"total_items\": \"Total number of items.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ]\n            }",
                "examples": [
                    {
                        "title": "List collections",
                        "curl": "curl -d'{\"method\": \"collection_list\", \"params\": {\"resolve_claims\": 1, \"resolve\": true}}' http://localhost:5279/",
                        "lbrynet": "lbrynet collection list --resolve --resolve_claims=1",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"collection_list\", \"params\": {\"resolve_claims\": 1, \"resolve\": true}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"address\": \"mze9EczryosaZVREWmm5BBwTAwnbs3wSn2\",\n        \"amount\": \"1.0\",\n        \"canonical_url\": \"lbry://@channel#8/tom#a\",\n        \"claim_id\": \"af778cf08c1debf04cf98e7e815a03a0b4db21b4\",\n        \"claim_op\": \"create\",\n        \"claims\": [\n          {\n            \"address\": \"n28FYUe42shoUtuxDH9BKaTsn3rvf2JCV2\",\n            \"amount\": \"1.0\",\n            \"canonical_url\": \"lbry://@channel#8/astream#7\",\n            \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n            \"claim_op\": \"update\",\n            \"confirmations\": 4,\n            \"height\": 214,\n            \"is_channel_signature_valid\": true,\n            \"meta\": {\n              \"activation_height\": 214,\n              \"creation_height\": 213,\n              \"creation_timestamp\": 1651689432,\n              \"effective_amount\": \"1.0\",\n              \"expiration_height\": 714,\n              \"is_controlling\": true,\n              \"reposted\": 0,\n              \"support_amount\": \"0.0\",\n              \"take_over_height\": 213\n            },\n            \"name\": \"astream\",\n            \"normalized_name\": \"astream\",\n            \"nout\": 0,\n            \"permanent_url\": \"lbry://astream#713086e8213eb2e43f8db0168c11fbb670dcff26\",\n            \"short_url\": \"lbry://astream#7\",\n            \"signing_channel\": {\n              \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n              \"amount\": \"1.0\",\n              \"canonical_url\": \"lbry://@channel#8\",\n              \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n              \"claim_op\": \"update\",\n              \"confirmations\": 8,\n              \"has_signing_key\": false,\n              \"height\": 210,\n              \"meta\": {\n                \"activation_height\": 210,\n                \"claims_in_channel\": 2,\n                \"creation_height\": 209,\n                \"creation_timestamp\": 1651689431,\n                \"effective_amount\": \"1.0\",\n                \"expiration_height\": 710,\n                \"is_controlling\": true,\n                \"reposted\": 0,\n                \"support_amount\": \"0.0\",\n                \"take_over_height\": 209\n              },\n              \"name\": \"@channel\",\n              \"normalized_name\": \"@channel\",\n              \"nout\": 0,\n              \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n              \"short_url\": \"lbry://@channel#8\",\n              \"timestamp\": 1651689431,\n              \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n              \"type\": \"claim\",\n              \"value\": {\n                \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n                \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n                \"title\": \"New Channel\"\n              },\n              \"value_type\": \"channel\"\n            },\n            \"timestamp\": 1651689434,\n            \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\",\n            \"type\": \"claim\",\n            \"value\": {\n              \"source\": {\n                \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n                \"media_type\": \"application/octet-stream\",\n                \"name\": \"tmpnta3qbuz\",\n                \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n                \"size\": \"11\"\n              },\n              \"stream_type\": \"binary\"\n            },\n            \"value_type\": \"stream\"\n          }\n        ],\n        \"confirmations\": 1,\n        \"height\": 217,\n        \"is_channel_signature_valid\": true,\n        \"meta\": {\n          \"activation_height\": 217,\n          \"creation_height\": 217,\n          \"creation_timestamp\": 1651689441,\n          \"effective_amount\": \"1.0\",\n          \"expiration_height\": 717,\n          \"is_controlling\": true,\n          \"reposted\": 0,\n          \"support_amount\": \"0.0\",\n          \"take_over_height\": 217\n        },\n        \"name\": \"tom\",\n        \"normalized_name\": \"tom\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://tom#af778cf08c1debf04cf98e7e815a03a0b4db21b4\",\n        \"short_url\": \"lbry://tom#a\",\n        \"signing_channel\": {\n          \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n          \"amount\": \"1.0\",\n          \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"claim_op\": \"update\",\n          \"confirmations\": 8,\n          \"has_signing_key\": true,\n          \"height\": 210,\n          \"meta\": {},\n          \"name\": \"@channel\",\n          \"normalized_name\": \"@channel\",\n          \"nout\": 0,\n          \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"timestamp\": 1651689431,\n          \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n          \"type\": \"claim\",\n          \"value\": {\n            \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n            \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n            \"title\": \"New Channel\"\n          },\n          \"value_type\": \"channel\"\n        },\n        \"timestamp\": 1651689441,\n        \"txid\": \"7de9ed81fb77031f9852b7891bc6a31e58f82b729d2f1744f6491f6d8b2836f4\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"claims\": [\n            \"713086e8213eb2e43f8db0168c11fbb670dcff26\"\n          ]\n        },\n        \"value_type\": \"collection\"\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 1,\n    \"total_pages\": 1\n  }\n}"
                    }
                ]
            },
            {
                "name": "collection_resolve",
                "description": "Resolve claims in the collection.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "claim id of the collection",
                        "is_required": false
                    },
                    {
                        "name": "url",
                        "type": "str",
                        "description": "url of the collection",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict results to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"total_items\": \"Total number of items.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ]\n            }",
                "examples": []
            },
            {
                "name": "collection_update",
                "description": "Update an existing collection claim.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "claim_id of the collection to update",
                        "is_required": true
                    },
                    {
                        "name": "bid",
                        "type": "decimal",
                        "description": "amount to back the claim",
                        "is_required": false
                    },
                    {
                        "name": "bid_everything",
                        "type": "bool",
                        "description": "bid everything from funding accounts (excluding claims), default: false.",
                        "is_required": false
                    },
                    {
                        "name": "claims",
                        "type": "list",
                        "description": "claim ids",
                        "is_required": false
                    },
                    {
                        "name": "clear_claims",
                        "type": "bool",
                        "description": "clear existing claim references (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "title",
                        "type": "str",
                        "description": "title of the collection",
                        "is_required": false
                    },
                    {
                        "name": "description",
                        "type": "str",
                        "description": "description of the collection",
                        "is_required": false
                    },
                    {
                        "name": "tags",
                        "type": "list",
                        "description": "add content tags",
                        "is_required": false
                    },
                    {
                        "name": "clear_tags",
                        "type": "bool",
                        "description": "clear existing tags (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "languages",
                        "type": "list",
                        "description": "languages used by the collection, using RFC 5646 format, eg: for English `--languages=en` for Spanish (Spain) `--languages=es-ES` for Spanish (Mexican) `--languages=es-MX` for Chinese (Simplified) `--languages=zh-Hans` for Chinese (Traditional) `--languages=zh-Hant`",
                        "is_required": false
                    },
                    {
                        "name": "clear_languages",
                        "type": "bool",
                        "description": "clear existing languages (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "locations",
                        "type": "list",
                        "description": "locations of the collection, consisting of 2 letter `country` code and a `state`, `city` and a postal `code` along with a `latitude` and `longitude`. for JSON RPC: pass a dictionary with aforementioned attributes as keys, eg: ... \"locations\": [{'country': 'US', 'state': 'NH'}] ... for command line: pass a colon delimited list with values in the following order: \"COUNTRY:STATE:CITY:CODE:LATITUDE:LONGITUDE\" making sure to include colon for blank values, for example to provide only the city: ... --locations=\"::Manchester\" with all values set: ... --locations=\"US:NH:Manchester:03101:42.990605:-71.460989\" optionally, you can just pass the \"LATITUDE:LONGITUDE\": ... --locations=\"42.990605:-71.460989\" finally, you can also pass JSON string of dictionary on the command line as you would via JSON RPC ... --locations=\"{'country': 'US', 'state': 'NH'}\"",
                        "is_required": false
                    },
                    {
                        "name": "clear_locations",
                        "type": "bool",
                        "description": "clear existing locations (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "thumbnail_url",
                        "type": "str",
                        "description": "thumbnail url",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account in which to look for collection (default: all)",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "funding_account_ids",
                        "type": "list",
                        "description": "ids of accounts to fund this transaction",
                        "is_required": false
                    },
                    {
                        "name": "claim_address",
                        "type": "str",
                        "description": "address where the collection is sent",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until transaction is in mempool",
                        "is_required": false
                    },
                    {
                        "name": "replace",
                        "type": "bool",
                        "description": "instead of modifying specific values on the collection, this will clear all existing values and only save passed in values, useful for form submissions where all values are always set",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": []
            }
        ]
    },
    "file": {
        "doc": "File management.",
        "commands": [
            {
                "name": "file_delete",
                "description": "Delete a LBRY file",
                "arguments": [
                    {
                        "name": "delete_from_download_dir",
                        "type": "bool",
                        "description": "delete file from download directory, instead of just deleting blobs",
                        "is_required": false
                    },
                    {
                        "name": "delete_all",
                        "type": "bool",
                        "description": "if there are multiple matching files, allow the deletion of multiple files. Otherwise do not delete anything.",
                        "is_required": false
                    },
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "delete by file sd hash",
                        "is_required": false
                    },
                    {
                        "name": "file_name",
                        "type": "str",
                        "description": "delete by file name in downloads folder",
                        "is_required": false
                    },
                    {
                        "name": "stream_hash",
                        "type": "str",
                        "description": "delete by file stream hash",
                        "is_required": false
                    },
                    {
                        "name": "rowid",
                        "type": "int",
                        "description": "delete by file row id",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "delete by file claim id",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "delete by file claim txid",
                        "is_required": false
                    },
                    {
                        "name": "nout",
                        "type": "int",
                        "description": "delete by file claim nout",
                        "is_required": false
                    },
                    {
                        "name": "claim_name",
                        "type": "str",
                        "description": "delete by file claim name",
                        "is_required": false
                    },
                    {
                        "name": "channel_claim_id",
                        "type": "str",
                        "description": "delete by file channel claim id",
                        "is_required": false
                    },
                    {
                        "name": "channel_name",
                        "type": "str",
                        "description": "delete by file channel claim name",
                        "is_required": false
                    }
                ],
                "returns": "(bool) true if deletion was successful",
                "examples": [
                    {
                        "title": "Delete a file",
                        "curl": "curl -d'{\"method\": \"file_delete\", \"params\": {\"delete_from_download_dir\": false, \"delete_all\": false, \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet file delete --claim_id=\"713086e8213eb2e43f8db0168c11fbb670dcff26\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"file_delete\", \"params\": {\"delete_from_download_dir\": false, \"delete_all\": false, \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": true\n}"
                    }
                ]
            },
            {
                "name": "file_list",
                "description": "List files limited by optional filters",
                "arguments": [
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "get file with matching sd hash",
                        "is_required": false
                    },
                    {
                        "name": "file_name",
                        "type": "str",
                        "description": "get file with matching file name in the downloads folder",
                        "is_required": false
                    },
                    {
                        "name": "stream_hash",
                        "type": "str",
                        "description": "get file with matching stream hash",
                        "is_required": false
                    },
                    {
                        "name": "rowid",
                        "type": "int",
                        "description": "get file with matching row id",
                        "is_required": false
                    },
                    {
                        "name": "added_on",
                        "type": "int",
                        "description": "get file with matching time of insertion",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "get file with matching claim id(s)",
                        "is_required": false
                    },
                    {
                        "name": "outpoint",
                        "type": "str",
                        "description": "get file with matching claim outpoint(s)",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "get file with matching claim txid",
                        "is_required": false
                    },
                    {
                        "name": "nout",
                        "type": "int",
                        "description": "get file with matching claim nout",
                        "is_required": false
                    },
                    {
                        "name": "channel_claim_id",
                        "type": "str",
                        "description": "get file with matching channel claim id(s)",
                        "is_required": false
                    },
                    {
                        "name": "channel_name",
                        "type": "str",
                        "description": "get file with matching channel name",
                        "is_required": false
                    },
                    {
                        "name": "claim_name",
                        "type": "str",
                        "description": "get file with matching claim name",
                        "is_required": false
                    },
                    {
                        "name": "blobs_in_stream",
                        "type": "int",
                        "description": "get file with matching blobs in stream",
                        "is_required": false
                    },
                    {
                        "name": "download_path",
                        "type": "str",
                        "description": "get file with matching download path",
                        "is_required": false
                    },
                    {
                        "name": "uploading_to_reflector",
                        "type": "bool",
                        "description": "get files currently uploading to reflector",
                        "is_required": false
                    },
                    {
                        "name": "is_fully_reflected",
                        "type": "bool",
                        "description": "get files that have been uploaded to reflector",
                        "is_required": false
                    },
                    {
                        "name": "status",
                        "type": "str",
                        "description": "match by status, ( running | finished | stopped )",
                        "is_required": false
                    },
                    {
                        "name": "completed",
                        "type": "bool",
                        "description": "match only completed",
                        "is_required": false
                    },
                    {
                        "name": "blobs_remaining",
                        "type": "int",
                        "description": "amount of remaining blobs to download",
                        "is_required": false
                    },
                    {
                        "name": "sort",
                        "type": "str",
                        "description": "field to sort by (one of the above filter fields)",
                        "is_required": false
                    },
                    {
                        "name": "comparison",
                        "type": "str",
                        "description": "logical comparison, (eq | ne | g | ge | l | le | in)",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "add purchase receipts from this wallet",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"total_items\": \"Total number of items.\",\n                \"items\": [\n                    {\n                        \"streaming_url\": \"(str) url to stream the file using range requests\",\n                        \"completed\": \"(bool) true if download is completed\",\n                        \"file_name\": \"(str) name of file\",\n                        \"download_directory\": \"(str) download directory\",\n                        \"points_paid\": \"(float) credit paid to download file\",\n                        \"stopped\": \"(bool) true if download is stopped\",\n                        \"stream_hash\": \"(str) stream hash of file\",\n                        \"stream_name\": \"(str) stream name\",\n                        \"suggested_file_name\": \"(str) suggested file name\",\n                        \"sd_hash\": \"(str) sd hash of file\",\n                        \"download_path\": \"(str) download path of file\",\n                        \"mime_type\": \"(str) mime type of file\",\n                        \"key\": \"(str) key attached to file\",\n                        \"total_bytes_lower_bound\": \"(int) lower bound file size in bytes\",\n                        \"total_bytes\": \"(int) file upper bound size in bytes\",\n                        \"written_bytes\": \"(int) written size in bytes\",\n                        \"blobs_completed\": \"(int) number of fully downloaded blobs\",\n                        \"blobs_in_stream\": \"(int) total blobs on stream\",\n                        \"blobs_remaining\": \"(int) total blobs remaining to download\",\n                        \"status\": \"(str) downloader status\",\n                        \"claim_id\": \"(str) None if claim is not found else the claim id\",\n                        \"txid\": \"(str) None if claim is not found else the transaction id\",\n                        \"nout\": \"(int) None if claim is not found else the transaction output index\",\n                        \"outpoint\": \"(str) None if claim is not found else the tx and output\",\n                        \"metadata\": \"(dict) None if claim is not found else the claim metadata\",\n                        \"channel_claim_id\": \"(str) None if claim is not found or not signed\",\n                        \"channel_name\": \"(str) None if claim is not found or not signed\",\n                        \"claim_name\": \"(str) None if claim is not found else the claim name\",\n                        \"reflector_progress\": \"(int) reflector upload progress, 0 to 100\",\n                        \"uploading_to_reflector\": \"(bool) set to True when currently uploading to reflector\"\n                    }\n                ]\n            }",
                "examples": [
                    {
                        "title": "List local files",
                        "curl": "curl -d'{\"method\": \"file_list\", \"params\": {\"reverse\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet file list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"file_list\", \"params\": {\"reverse\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"added_on\": null,\n        \"blobs_completed\": 1,\n        \"blobs_in_stream\": 1,\n        \"blobs_remaining\": 0,\n        \"channel_claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"channel_name\": \"@channel\",\n        \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"claim_name\": \"astream\",\n        \"completed\": true,\n        \"confirmations\": -1,\n        \"content_fee\": null,\n        \"download_directory\": null,\n        \"download_path\": null,\n        \"file_name\": null,\n        \"height\": -1,\n        \"is_fully_reflected\": true,\n        \"key\": \"64a9cfc595fbde1db09cb2aed90ce245\",\n        \"metadata\": {\n          \"source\": {\n            \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpnta3qbuz\",\n            \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n            \"size\": \"11\"\n          },\n          \"stream_type\": \"binary\"\n        },\n        \"mime_type\": \"application/octet-stream\",\n        \"nout\": 0,\n        \"outpoint\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5:0\",\n        \"points_paid\": 0.0,\n        \"protobuf\": \"0169c160a125c90c68a16ce197a382a28ee6999a87fc90c0c968700144f7bfba6be4fee0ace026874ae629a7e6158a7b3b944885072662a3d6392938212f45576f00e76d95ee49d32914a010f536f1b49d17b140bc0a90010a8d010a30fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd120b746d706e7461337162757a180b22186170706c69636174696f6e2f6f637465742d73747265616d323043f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n        \"purchase_receipt\": null,\n        \"reflector_progress\": 0,\n        \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n        \"status\": \"finished\",\n        \"stopped\": true,\n        \"stream_hash\": \"2aa82b8d5212a2e794fd115323f812ba0df03e54814d203c0063badbcda99a04d138e6250d0f7cd210ecf05d6d8d1492\",\n        \"stream_name\": \"tmpnta3qbuz\",\n        \"streaming_url\": \"http://localhost:5280/stream/43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n        \"suggested_file_name\": \"tmpnta3qbuz\",\n        \"timestamp\": null,\n        \"total_bytes\": 16,\n        \"total_bytes_lower_bound\": 0,\n        \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\",\n        \"uploading_to_reflector\": false,\n        \"written_bytes\": 0\n      },\n      {\n        \"added_on\": null,\n        \"blobs_completed\": 1,\n        \"blobs_in_stream\": 1,\n        \"blobs_remaining\": 0,\n        \"channel_claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"channel_name\": \"@channel\",\n        \"claim_id\": \"69fd0928b532a51be321a0b92d3066497df9b620\",\n        \"claim_name\": \"blank-image\",\n        \"completed\": false,\n        \"confirmations\": -1,\n        \"content_fee\": null,\n        \"download_directory\": null,\n        \"download_path\": null,\n        \"file_name\": null,\n        \"height\": -1,\n        \"is_fully_reflected\": true,\n        \"key\": \"f051f779f3934e0507e14707b0acaead\",\n        \"metadata\": {\n          \"author\": \"Picaso\",\n          \"description\": \"A blank PNG that is 5x7.\",\n          \"fee\": {\n            \"address\": \"msuNBdYovFPqvQfaCuks8LUJRxwaw1BqD9\",\n            \"amount\": \"0.3\",\n            \"currency\": \"LBC\"\n          },\n          \"image\": {\n            \"height\": 7,\n            \"width\": 5\n          },\n          \"languages\": [\n            \"en\"\n          ],\n          \"license\": \"Public Domain\",\n          \"license_url\": \"http://public-domain.org\",\n          \"locations\": [\n            {\n              \"city\": \"Manchester\",\n              \"country\": \"US\",\n              \"state\": \"NH\"\n            }\n          ],\n          \"release_time\": \"1651689437\",\n          \"source\": {\n            \"hash\": \"6c7df435d412c603390f593ef658c199817c7830ba3f16b7eadd8f99fa50e85dbd0d2b3dc61eadc33fe096e3872d1545\",\n            \"media_type\": \"image/png\",\n            \"name\": \"tmp72t0waoz.png\",\n            \"sd_hash\": \"79f6d865d02048e795dd50b30f6349a2e6a55b524f4e721a35593b6a98270c79ecb606e88c69ee9615b20af7c0841149\",\n            \"size\": \"99\"\n          },\n          \"stream_type\": \"image\",\n          \"tags\": [\n            \"blank\",\n            \"art\"\n          ],\n          \"thumbnail\": {\n            \"url\": \"http://smallmedia.com/thumbnail.jpg\"\n          },\n          \"title\": \"Blank Image\"\n        },\n        \"mime_type\": \"image/png\",\n        \"nout\": 0,\n        \"outpoint\": \"d65f259a577b018a146c55f48171c75afd48da5a89e5b360d9eb37cac36d3f3d:0\",\n        \"points_paid\": 0.0,\n        \"protobuf\": \"0169c160a125c90c68a16ce197a382a28ee6999a8716cf80142b054137adf103a01f556c21d64df0b443d7b0af8352786e75d66fe50914812ea789985dd7ebaa83cb0816504c463ab571a721f9df5eb2db259e87470ae6010a82010a306c7df435d412c603390f593ef658c199817c7830ba3f16b7eadd8f99fa50e85dbd0d2b3dc61eadc33fe096e3872d1545120f746d703732743077616f7a2e706e6718632209696d6167652f706e67323079f6d865d02048e795dd50b30f6349a2e6a55b524f4e721a35593b6a98270c79ecb606e88c69ee9615b20af7c0841149120650696361736f1a0d5075626c696320446f6d61696e2218687474703a2f2f7075626c69632d646f6d61696e2e6f726728dd8fcb93063222080112196f87de9a3129fb3deee4853f620631d1f576eba27b57bf2710188087a70e520408051007420b426c616e6b20496d6167654a184120626c616e6b20504e472074686174206973203578372e52252a23687474703a2f2f736d616c6c6d656469612e636f6d2f7468756d626e61696c2e6a70675a05626c616e6b5a03617274620208016a1308ec0112024e481a0a4d616e63686573746572\",\n        \"purchase_receipt\": null,\n        \"reflector_progress\": 0,\n        \"sd_hash\": \"79f6d865d02048e795dd50b30f6349a2e6a55b524f4e721a35593b6a98270c79ecb606e88c69ee9615b20af7c0841149\",\n        \"status\": \"finished\",\n        \"stopped\": true,\n        \"stream_hash\": \"3eb42505e96541f70f9d09f44b6676005f8a366951c1c8c634fb34adc9f2b44a50ddc1c1049111bbdc3a1a5b5ecbf51d\",\n        \"stream_name\": \"tmp72t0waoz.png\",\n        \"streaming_url\": \"http://localhost:5280/stream/79f6d865d02048e795dd50b30f6349a2e6a55b524f4e721a35593b6a98270c79ecb606e88c69ee9615b20af7c0841149\",\n        \"suggested_file_name\": \"tmp72t0waoz.png\",\n        \"timestamp\": null,\n        \"total_bytes\": 112,\n        \"total_bytes_lower_bound\": 96,\n        \"txid\": \"d65f259a577b018a146c55f48171c75afd48da5a89e5b360d9eb37cac36d3f3d\",\n        \"uploading_to_reflector\": false,\n        \"written_bytes\": 0\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 2,\n    \"total_pages\": 1\n  }\n}"
                    },
                    {
                        "title": "List files matching a parameter",
                        "curl": "curl -d'{\"method\": \"file_list\", \"params\": {\"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\", \"reverse\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet file list --claim_id=\"713086e8213eb2e43f8db0168c11fbb670dcff26\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"file_list\", \"params\": {\"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\", \"reverse\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"added_on\": null,\n        \"blobs_completed\": 1,\n        \"blobs_in_stream\": 1,\n        \"blobs_remaining\": 0,\n        \"channel_claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n        \"channel_name\": \"@channel\",\n        \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"claim_name\": \"astream\",\n        \"completed\": true,\n        \"confirmations\": 4,\n        \"content_fee\": null,\n        \"download_directory\": null,\n        \"download_path\": null,\n        \"file_name\": null,\n        \"height\": 214,\n        \"is_fully_reflected\": true,\n        \"key\": \"64a9cfc595fbde1db09cb2aed90ce245\",\n        \"metadata\": {\n          \"source\": {\n            \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpnta3qbuz\",\n            \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n            \"size\": \"11\"\n          },\n          \"stream_type\": \"binary\"\n        },\n        \"mime_type\": \"application/octet-stream\",\n        \"nout\": 0,\n        \"outpoint\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5:0\",\n        \"points_paid\": 0.0,\n        \"protobuf\": \"0169c160a125c90c68a16ce197a382a28ee6999a87fc90c0c968700144f7bfba6be4fee0ace026874ae629a7e6158a7b3b944885072662a3d6392938212f45576f00e76d95ee49d32914a010f536f1b49d17b140bc0a90010a8d010a30fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd120b746d706e7461337162757a180b22186170706c69636174696f6e2f6f637465742d73747265616d323043f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n        \"purchase_receipt\": null,\n        \"reflector_progress\": 0,\n        \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n        \"status\": \"finished\",\n        \"stopped\": true,\n        \"stream_hash\": \"2aa82b8d5212a2e794fd115323f812ba0df03e54814d203c0063badbcda99a04d138e6250d0f7cd210ecf05d6d8d1492\",\n        \"stream_name\": \"tmpnta3qbuz\",\n        \"streaming_url\": \"http://localhost:5280/stream/43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n        \"suggested_file_name\": \"tmpnta3qbuz\",\n        \"timestamp\": 1651689434,\n        \"total_bytes\": 16,\n        \"total_bytes_lower_bound\": 0,\n        \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\",\n        \"uploading_to_reflector\": false,\n        \"written_bytes\": 0\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 1,\n    \"total_pages\": 1\n  }\n}"
                    }
                ]
            },
            {
                "name": "file_reflect",
                "description": "Reflect all the blobs in a file matching the filter criteria",
                "arguments": [
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "get file with matching sd hash",
                        "is_required": false
                    },
                    {
                        "name": "file_name",
                        "type": "str",
                        "description": "get file with matching file name in the downloads folder",
                        "is_required": false
                    },
                    {
                        "name": "stream_hash",
                        "type": "str",
                        "description": "get file with matching stream hash",
                        "is_required": false
                    },
                    {
                        "name": "rowid",
                        "type": "int",
                        "description": "get file with matching row id",
                        "is_required": false
                    },
                    {
                        "name": "reflector",
                        "type": "str",
                        "description": "reflector server, ip address or url by default choose a server from the config",
                        "is_required": false
                    }
                ],
                "returns": "(list) list of blobs reflected",
                "examples": []
            },
            {
                "name": "file_save",
                "description": "Start saving a file to disk.",
                "arguments": [
                    {
                        "name": "file_name",
                        "type": "str",
                        "description": "file name to save to",
                        "is_required": false
                    },
                    {
                        "name": "download_directory",
                        "type": "str",
                        "description": "directory to save into",
                        "is_required": false
                    },
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "save file with matching sd hash",
                        "is_required": false
                    },
                    {
                        "name": "stream_hash",
                        "type": "str",
                        "description": "save file with matching stream hash",
                        "is_required": false
                    },
                    {
                        "name": "rowid",
                        "type": "int",
                        "description": "save file with matching row id",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "save file with matching claim id",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "save file with matching claim txid",
                        "is_required": false
                    },
                    {
                        "name": "nout",
                        "type": "int",
                        "description": "save file with matching claim nout",
                        "is_required": false
                    },
                    {
                        "name": "claim_name",
                        "type": "str",
                        "description": "save file with matching claim name",
                        "is_required": false
                    },
                    {
                        "name": "channel_claim_id",
                        "type": "str",
                        "description": "save file with matching channel claim id",
                        "is_required": false
                    },
                    {
                        "name": "channel_name",
                        "type": "str",
                        "description": "save file with matching channel claim name",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"streaming_url\": \"(str) url to stream the file using range requests\",\n                \"completed\": \"(bool) true if download is completed\",\n                \"file_name\": \"(str) name of file\",\n                \"download_directory\": \"(str) download directory\",\n                \"points_paid\": \"(float) credit paid to download file\",\n                \"stopped\": \"(bool) true if download is stopped\",\n                \"stream_hash\": \"(str) stream hash of file\",\n                \"stream_name\": \"(str) stream name\",\n                \"suggested_file_name\": \"(str) suggested file name\",\n                \"sd_hash\": \"(str) sd hash of file\",\n                \"download_path\": \"(str) download path of file\",\n                \"mime_type\": \"(str) mime type of file\",\n                \"key\": \"(str) key attached to file\",\n                \"total_bytes_lower_bound\": \"(int) lower bound file size in bytes\",\n                \"total_bytes\": \"(int) file upper bound size in bytes\",\n                \"written_bytes\": \"(int) written size in bytes\",\n                \"blobs_completed\": \"(int) number of fully downloaded blobs\",\n                \"blobs_in_stream\": \"(int) total blobs on stream\",\n                \"blobs_remaining\": \"(int) total blobs remaining to download\",\n                \"status\": \"(str) downloader status\",\n                \"claim_id\": \"(str) None if claim is not found else the claim id\",\n                \"txid\": \"(str) None if claim is not found else the transaction id\",\n                \"nout\": \"(int) None if claim is not found else the transaction output index\",\n                \"outpoint\": \"(str) None if claim is not found else the tx and output\",\n                \"metadata\": \"(dict) None if claim is not found else the claim metadata\",\n                \"channel_claim_id\": \"(str) None if claim is not found or not signed\",\n                \"channel_name\": \"(str) None if claim is not found or not signed\",\n                \"claim_name\": \"(str) None if claim is not found else the claim name\",\n                \"reflector_progress\": \"(int) reflector upload progress, 0 to 100\",\n                \"uploading_to_reflector\": \"(bool) set to True when currently uploading to reflector\"\n            }",
                "examples": [
                    {
                        "title": "Save a file to the downloads directory",
                        "curl": "curl -d'{\"method\": \"file_save\", \"params\": {\"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet file save --sd_hash=\"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"file_save\", \"params\": {\"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"added_on\": 1651689442,\n    \"blobs_completed\": 1,\n    \"blobs_in_stream\": 1,\n    \"blobs_remaining\": 0,\n    \"channel_claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n    \"channel_name\": \"@channel\",\n    \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n    \"claim_name\": \"astream\",\n    \"completed\": true,\n    \"confirmations\": 4,\n    \"content_fee\": null,\n    \"download_directory\": \"/var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmpu6mdpzjj\",\n    \"download_path\": \"/var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmpu6mdpzjj/tmpnta3qbuz_1\",\n    \"file_name\": \"tmpnta3qbuz_1\",\n    \"height\": 214,\n    \"is_fully_reflected\": false,\n    \"key\": \"64a9cfc595fbde1db09cb2aed90ce245\",\n    \"metadata\": {\n      \"source\": {\n        \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n        \"media_type\": \"application/octet-stream\",\n        \"name\": \"tmpnta3qbuz\",\n        \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n        \"size\": \"11\"\n      },\n      \"stream_type\": \"binary\"\n    },\n    \"mime_type\": \"application/octet-stream\",\n    \"nout\": 0,\n    \"outpoint\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5:0\",\n    \"points_paid\": 0.0,\n    \"protobuf\": \"0169c160a125c90c68a16ce197a382a28ee6999a87fc90c0c968700144f7bfba6be4fee0ace026874ae629a7e6158a7b3b944885072662a3d6392938212f45576f00e76d95ee49d32914a010f536f1b49d17b140bc0a90010a8d010a30fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd120b746d706e7461337162757a180b22186170706c69636174696f6e2f6f637465742d73747265616d323043f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n    \"purchase_receipt\": null,\n    \"reflector_progress\": 0,\n    \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n    \"status\": \"finished\",\n    \"stopped\": true,\n    \"stream_hash\": \"2aa82b8d5212a2e794fd115323f812ba0df03e54814d203c0063badbcda99a04d138e6250d0f7cd210ecf05d6d8d1492\",\n    \"stream_name\": \"tmpnta3qbuz\",\n    \"streaming_url\": \"http://localhost:5280/stream/43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n    \"suggested_file_name\": \"tmpnta3qbuz\",\n    \"timestamp\": 1651689434,\n    \"total_bytes\": 16,\n    \"total_bytes_lower_bound\": 0,\n    \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\",\n    \"uploading_to_reflector\": false,\n    \"written_bytes\": 11\n  }\n}"
                    }
                ]
            },
            {
                "name": "file_set_status",
                "description": "Start or stop downloading a file",
                "arguments": [
                    {
                        "name": "status",
                        "type": "str",
                        "description": "one of \"start\" or \"stop\"",
                        "is_required": true
                    },
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "set status of file with matching sd hash",
                        "is_required": false
                    },
                    {
                        "name": "file_name",
                        "type": "str",
                        "description": "set status of file with matching file name in the downloads folder",
                        "is_required": false
                    },
                    {
                        "name": "stream_hash",
                        "type": "str",
                        "description": "set status of file with matching stream hash",
                        "is_required": false
                    },
                    {
                        "name": "rowid",
                        "type": "int",
                        "description": "set status of file with matching row id",
                        "is_required": false
                    }
                ],
                "returns": "(str) Confirmation message",
                "examples": []
            }
        ]
    },
    "peer": {
        "doc": "DHT / Blob Exchange peer commands.",
        "commands": [
            {
                "name": "peer_list",
                "description": "Get peers for blob hash",
                "arguments": [
                    {
                        "name": "blob_hash",
                        "type": "str",
                        "description": "find available peers for this blob hash",
                        "is_required": true
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "(list) List of contact dictionaries {'address': <peer ip>, 'udp_port': <dht port>, 'tcp_port': <peer port>,\n     'node_id': <peer node id>}",
                "examples": []
            },
            {
                "name": "peer_ping",
                "description": "Send a kademlia ping to the specified peer. If address and port are provided the peer is directly pinged,\nif not provided the peer is located first.",
                "arguments": [],
                "returns": "(str) pong, or {'error': <error message>} if an error is encountered",
                "examples": []
            }
        ]
    },
    "preference": {
        "doc": "Preferences management.",
        "commands": [
            {
                "name": "preference_get",
                "description": "Get preference value for key or all values if not key is passed in.",
                "arguments": [
                    {
                        "name": "key",
                        "type": "str",
                        "description": "key associated with value",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "(dict) Dictionary of preference(s)",
                "examples": [
                    {
                        "title": "Get preferences",
                        "curl": "curl -d'{\"method\": \"preference_get\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet preference get",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"preference_get\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"theme\": \"dark\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "preference_set",
                "description": "Set preferences",
                "arguments": [
                    {
                        "name": "key",
                        "type": "str",
                        "description": "key associated with value",
                        "is_required": true
                    },
                    {
                        "name": "value",
                        "type": "str",
                        "description": "key associated with value",
                        "is_required": true
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "(dict) Dictionary with key/value of new preference",
                "examples": [
                    {
                        "title": "Set preference",
                        "curl": "curl -d'{\"method\": \"preference_set\", \"params\": {\"key\": \"theme\", \"value\": \"dark\"}}' http://localhost:5279/",
                        "lbrynet": "lbrynet preference set \"theme\" \"dark\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"preference_set\", \"params\": {\"key\": \"theme\", \"value\": \"dark\"}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"theme\": \"dark\"\n  }\n}"
                    }
                ]
            }
        ]
    },
    "purchase": {
        "doc": "List and make purchases of claims.",
        "commands": [
            {
                "name": "purchase_create",
                "description": "Purchase a claim.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "claim id of claim to purchase",
                        "is_required": false
                    },
                    {
                        "name": "url",
                        "type": "str",
                        "description": "lookup claim to purchase by url",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "funding_account_ids",
                        "type": "list",
                        "description": "ids of accounts to fund this transaction",
                        "is_required": false
                    },
                    {
                        "name": "allow_duplicate_purchase",
                        "type": "bool",
                        "description": "allow purchasing claim_id you already own",
                        "is_required": false
                    },
                    {
                        "name": "override_max_key_fee",
                        "type": "bool",
                        "description": "ignore max key fee for this purchase",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until transaction is in mempool",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": []
            },
            {
                "name": "purchase_list",
                "description": "List my claim purchases.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "purchases for specific claim",
                        "is_required": false
                    },
                    {
                        "name": "resolve",
                        "type": "str",
                        "description": "include resolved claim information",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict results to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"total_items\": \"Total number of items.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ]\n            }",
                "examples": []
            }
        ]
    },
    "settings": {
        "doc": "Settings management.",
        "commands": [
            {
                "name": "settings_clear",
                "description": "Clear daemon settings",
                "arguments": [],
                "returns": "(dict) Updated dictionary of daemon settings",
                "examples": []
            },
            {
                "name": "settings_get",
                "description": "Get daemon settings",
                "arguments": [],
                "returns": "(dict) Dictionary of daemon settings\n    See ADJUSTABLE_SETTINGS in lbry/conf.py for full list of settings",
                "examples": [
                    {
                        "title": "Get settings",
                        "curl": "curl -d'{\"method\": \"settings_get\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet settings get",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"settings_get\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"allowed_origin\": \"\",\n    \"announce_head_and_sd_only\": true,\n    \"api\": \"localhost:5279\",\n    \"audio_encoder\": \"aac -b:a 160k\",\n    \"blob_download_timeout\": 30.0,\n    \"blob_lru_cache_size\": 0,\n    \"blob_storage_limit\": 0,\n    \"blockchain_name\": \"lbrycrd_regtest\",\n    \"coin_selection_strategy\": \"prefer_confirmed\",\n    \"components_to_skip\": [\n      \"dht\",\n      \"upnp\",\n      \"hash_announcer\",\n      \"peer_protocol_server\",\n      \"libtorrent_component\"\n    ],\n    \"concurrent_blob_announcers\": 10,\n    \"concurrent_hub_requests\": 32,\n    \"concurrent_reflector_uploads\": 10,\n    \"config\": \"/var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmpettwqqfq/daemon_settings.yml\",\n    \"data_dir\": \"/var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmpu6mdpzjj\",\n    \"download_dir\": \"/var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmpu6mdpzjj\",\n    \"download_timeout\": 30.0,\n    \"ffmpeg_path\": \"\",\n    \"fixed_peer_delay\": 2.0,\n    \"fixed_peers\": [\n      [\n        \"127.0.0.1\",\n        5567\n      ]\n    ],\n    \"hub_timeout\": 30.0,\n    \"jurisdiction\": null,\n    \"known_dht_nodes\": [],\n    \"lbryum_servers\": [\n      [\n        \"localhost\",\n        50002\n      ]\n    ],\n    \"max_connections_per_download\": 4,\n    \"max_key_fee\": {\n      \"amount\": 50.0,\n      \"currency\": \"USD\"\n    },\n    \"max_wallet_server_fee\": \"0.0\",\n    \"network_interface\": \"0.0.0.0\",\n    \"network_storage_limit\": 0,\n    \"node_rpc_timeout\": 5.0,\n    \"peer_connect_timeout\": 3.0,\n    \"prometheus_port\": 0,\n    \"reflect_streams\": true,\n    \"reflector_servers\": [\n      [\n        \"127.0.0.1\",\n        5566\n      ]\n    ],\n    \"save_blobs\": true,\n    \"save_files\": true,\n    \"save_resolved_claims\": true,\n    \"share_usage_data\": false,\n    \"split_buckets_under_index\": 2,\n    \"streaming_get\": true,\n    \"streaming_server\": \"localhost:5280\",\n    \"tcp_port\": 4444,\n    \"track_bandwidth\": true,\n    \"transaction_cache_size\": 10000,\n    \"udp_port\": 4444,\n    \"use_upnp\": false,\n    \"video_bitrate_maximum\": 5000000,\n    \"video_encoder\": \"libx264 -crf 24 -preset faster -pix_fmt yuv420p\",\n    \"video_scaler\": \"-vf \\\"scale=if(gte(iw\\\\,ih)\\\\,min(1920\\\\,iw)\\\\,-2):if(lt(iw\\\\,ih)\\\\,min(1920\\\\,ih)\\\\,-2)\\\" -maxrate 5500K -bufsize 5000K\",\n    \"volume_analysis_time\": 240,\n    \"volume_filter\": \"\",\n    \"wallet_dir\": \"/var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmpu6mdpzjj\",\n    \"wallets\": [\n      \"default_wallet\"\n    ]\n  }\n}"
                    }
                ]
            },
            {
                "name": "settings_set",
                "description": "Set daemon settings",
                "arguments": [],
                "returns": "(dict) Updated dictionary of daemon settings",
                "examples": [
                    {
                        "title": "Set settings",
                        "curl": "curl -d'{\"method\": \"settings_set\", \"params\": {\"key\": \"tcp_port\", \"value\": 99}}' http://localhost:5279/",
                        "lbrynet": "lbrynet settings set \"tcp_port\" 99",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"settings_set\", \"params\": {\"key\": \"tcp_port\", \"value\": 99}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"tcp_port\": 99\n  }\n}"
                    }
                ]
            }
        ]
    },
    "stream": {
        "doc": "Create, update, abandon, list and inspect your stream claims.",
        "commands": [
            {
                "name": "stream_abandon",
                "description": "Abandon one of my stream claims.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "claim_id of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "txid of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "nout",
                        "type": "int",
                        "description": "nout of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until abandon is in mempool",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Abandon a stream claim",
                        "curl": "curl -d'{\"method\": \"stream_abandon\", \"params\": {\"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\", \"preview\": false, \"blocking\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet stream abandon 713086e8213eb2e43f8db0168c11fbb670dcff26",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"stream_abandon\", \"params\": {\"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\", \"preview\": false, \"blocking\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"0100000001f52e99d9f671d2af315e1ea0788deae74ef37f204e711bc5c784bf98d84cec21000000006a473044022048ba94c9441b67504dfa80692a87f4cc08efd46d9dbe261ef10042d2fadf732a022027c216a2f0f5e2be578b51b7099b85c5152be09767583f240a8eae2f68fcc31d0121024a081e16d8c1a057d4d4d726889a37ee6a74b5fccfe8522bdabd42992fa60280ffffffff0134b7f505000000001976a9140f78bcf5b8bc4cd806d82310f0e157e2de7b5c2388ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"n28FYUe42shoUtuxDH9BKaTsn3rvf2JCV2\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 4,\n        \"height\": 214,\n        \"meta\": {},\n        \"name\": \"astream\",\n        \"normalized_name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://astream#713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"timestamp\": 1651689434,\n        \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpnta3qbuz\",\n            \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n            \"size\": \"11\"\n          },\n          \"stream_type\": \"binary\"\n        },\n        \"value_type\": \"stream\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"mgvm4xqEf7evKhnhFE3SYGwRo2E4JLcTXf\",\n        \"amount\": \"0.999893\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 0,\n        \"timestamp\": null,\n        \"txid\": \"5815cb11aa04246cff1bb6e55c6c5e38683dd0dcec16c770dbf02a99d4145f62\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.000107\",\n    \"total_input\": \"1.0\",\n    \"total_output\": \"0.999893\",\n    \"txid\": \"5815cb11aa04246cff1bb6e55c6c5e38683dd0dcec16c770dbf02a99d4145f62\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "stream_cost_estimate",
                "description": "Get estimated cost for a lbry stream",
                "arguments": [
                    {
                        "name": "uri",
                        "type": "str",
                        "description": "uri to use",
                        "is_required": true
                    }
                ],
                "returns": "(float) Estimated cost in lbry credits, returns None if uri is not\n        resolvable",
                "examples": []
            },
            {
                "name": "stream_create",
                "description": "Make a new stream claim and announce the associated file to lbrynet.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "str",
                        "description": "name of the content (can only consist of a-z A-Z 0-9 and -(dash))",
                        "is_required": true
                    },
                    {
                        "name": "bid",
                        "type": "decimal",
                        "description": "amount to back the claim",
                        "is_required": true
                    },
                    {
                        "name": "bid_everything",
                        "type": "bool",
                        "description": "bid everything from funding accounts (excluding claims), default: false.",
                        "is_required": false
                    },
                    {
                        "name": "file_path",
                        "type": "str",
                        "description": "path to file to be associated with name.",
                        "is_required": false
                    },
                    {
                        "name": "file_name",
                        "type": "str",
                        "description": "name of file to be associated with stream.",
                        "is_required": false
                    },
                    {
                        "name": "file_hash",
                        "type": "str",
                        "description": "hash of file to be associated with stream.",
                        "is_required": false
                    },
                    {
                        "name": "validate_file",
                        "type": "bool",
                        "description": "validate that the video container and encodings match common web browser support or that optimization succeeds if specified. FFmpeg is required",
                        "is_required": false
                    },
                    {
                        "name": "optimize_file",
                        "type": "bool",
                        "description": "transcode the video & audio if necessary to ensure common web browser support. FFmpeg is required",
                        "is_required": false
                    },
                    {
                        "name": "allow_duplicate_name",
                        "type": "bool",
                        "description": "create new claim even if one already exists with given name. default: false.",
                        "is_required": false
                    },
                    {
                        "name": "fee_currency",
                        "type": "string",
                        "description": "specify fee currency",
                        "is_required": false
                    },
                    {
                        "name": "fee_amount",
                        "type": "decimal",
                        "description": "content download fee",
                        "is_required": false
                    },
                    {
                        "name": "fee_address",
                        "type": "str",
                        "description": "address where to send fee payments, will use value from --claim_address if not provided",
                        "is_required": false
                    },
                    {
                        "name": "title",
                        "type": "str",
                        "description": "title of the publication",
                        "is_required": false
                    },
                    {
                        "name": "description",
                        "type": "str",
                        "description": "description of the publication",
                        "is_required": false
                    },
                    {
                        "name": "author",
                        "type": "str",
                        "description": "author of the publication. The usage for this field is not the same as for channels. The author field is used to credit an author who is not the publisher and is not represented by the channel. For example, a pdf file of 'The Odyssey' has an author of 'Homer' but may by published to a channel such as '@classics', or to no channel at all",
                        "is_required": false
                    },
                    {
                        "name": "tags",
                        "type": "list",
                        "description": "add content tags",
                        "is_required": false
                    },
                    {
                        "name": "languages",
                        "type": "list",
                        "description": "languages used by the channel, using RFC 5646 format, eg: for English `--languages=en` for Spanish (Spain) `--languages=es-ES` for Spanish (Mexican) `--languages=es-MX` for Chinese (Simplified) `--languages=zh-Hans` for Chinese (Traditional) `--languages=zh-Hant`",
                        "is_required": false
                    },
                    {
                        "name": "locations",
                        "type": "list",
                        "description": "locations relevant to the stream, consisting of 2 letter `country` code and a `state`, `city` and a postal `code` along with a `latitude` and `longitude`. for JSON RPC: pass a dictionary with aforementioned attributes as keys, eg: ... \"locations\": [{'country': 'US', 'state': 'NH'}] ... for command line: pass a colon delimited list with values in the following order: \"COUNTRY:STATE:CITY:CODE:LATITUDE:LONGITUDE\" making sure to include colon for blank values, for example to provide only the city: ... --locations=\"::Manchester\" with all values set: ... --locations=\"US:NH:Manchester:03101:42.990605:-71.460989\" optionally, you can just pass the \"LATITUDE:LONGITUDE\": ... --locations=\"42.990605:-71.460989\" finally, you can also pass JSON string of dictionary on the command line as you would via JSON RPC ... --locations=\"{'country': 'US', 'state': 'NH'}\"",
                        "is_required": false
                    },
                    {
                        "name": "license",
                        "type": "str",
                        "description": "publication license",
                        "is_required": false
                    },
                    {
                        "name": "license_url",
                        "type": "str",
                        "description": "publication license url",
                        "is_required": false
                    },
                    {
                        "name": "thumbnail_url",
                        "type": "str",
                        "description": "thumbnail url",
                        "is_required": false
                    },
                    {
                        "name": "release_time",
                        "type": "int",
                        "description": "original public release of content, seconds since UNIX epoch",
                        "is_required": false
                    },
                    {
                        "name": "width",
                        "type": "int",
                        "description": "image/video width, automatically calculated from media file",
                        "is_required": false
                    },
                    {
                        "name": "height",
                        "type": "int",
                        "description": "image/video height, automatically calculated from media file",
                        "is_required": false
                    },
                    {
                        "name": "duration",
                        "type": "int",
                        "description": "audio/video duration in seconds, automatically calculated",
                        "is_required": false
                    },
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "sd_hash of stream",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str",
                        "description": "claim id of the publisher channel",
                        "is_required": false
                    },
                    {
                        "name": "channel_name",
                        "type": "str",
                        "description": "name of the publisher channel",
                        "is_required": false
                    },
                    {
                        "name": "channel_account_id",
                        "type": "str",
                        "description": "one or more account ids for accounts to look in for channel certificates, defaults to all accounts.",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account to use for holding the transaction",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "funding_account_ids",
                        "type": "list",
                        "description": "ids of accounts to fund this transaction",
                        "is_required": false
                    },
                    {
                        "name": "claim_address",
                        "type": "str",
                        "description": "address where the claim is sent to, if not specified it will be determined automatically from the account",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until transaction is in mempool",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Create a stream claim without metadata",
                        "curl": "curl -d'{\"method\": \"stream_create\", \"params\": {\"name\": \"astream\", \"bid\": \"1.0\", \"bid_everything\": false, \"file_path\": \"/var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmpnta3qbuz\", \"validate_file\": false, \"optimize_file\": false, \"tags\": [], \"languages\": [], \"locations\": [], \"channel_account_id\": [], \"funding_account_ids\": [], \"preview\": false, \"blocking\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet stream create astream 1.0 /var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmpnta3qbuz",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"stream_create\", \"params\": {\"name\": \"astream\", \"bid\": \"1.0\", \"bid_everything\": false, \"file_path\": \"/var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmpnta3qbuz\", \"validate_file\": false, \"optimize_file\": false, \"tags\": [], \"languages\": [], \"locations\": [], \"channel_account_id\": [], \"funding_account_ids\": [], \"preview\": false, \"blocking\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"01000000013dd5050d9cca3e72bfe24e6a36d68caf88d139983908534439704157c6e9384c010000006b4830450221008e15bff3ccb992b34d58f9e9ed13c8faa30e653c7ed769e04bceeea7c50dd0d90220290cc942ca332d2909fa28615d5940768ac58f7d24630078ff14d5ab49075359012103044a9d4ebfb165ee57bd18a81f9f9992e854df48203ad5c5e2275e0dea0224e2ffffffff0200e1f50500000000bab5076173747265616d4c94000a90010a8d010a30fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd120b746d706e7461337162757a180b22186170706c69636174696f6e2f6f637465742d73747265616d323043f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b36d7576a914e20f790a0b5f23f1bd4d6dc996f6696e145070ab88ac38fb9423000000001976a91479e552dbcbc47896e55b624544e76c95cd04ab5a88ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"miZz2J7V5HPc9hqkHNYoDHBNpJZzUt8BTU\",\n        \"amount\": \"6.983769\",\n        \"confirmations\": 4,\n        \"height\": 209,\n        \"nout\": 1,\n        \"timestamp\": 1651689431,\n        \"txid\": \"4c38e9c657417039445308399839d188af8cd6366a4ee2bf723eca9c0d05d53d\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"n28FYUe42shoUtuxDH9BKaTsn3rvf2JCV2\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"claim_op\": \"create\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"meta\": {},\n        \"name\": \"astream\",\n        \"normalized_name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://astream#713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"timestamp\": null,\n        \"txid\": \"def57b8a13929c6e4acfe6697f1b6db9aa731ef20694661e436b7b6a0227e7c9\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpnta3qbuz\",\n            \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n            \"size\": \"11\"\n          },\n          \"stream_type\": \"binary\"\n        },\n        \"value_type\": \"stream\"\n      },\n      {\n        \"address\": \"mrdUmxEjMZo591MiaXL2FXgxEdc5pjGq5P\",\n        \"amount\": \"5.969662\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"timestamp\": null,\n        \"txid\": \"def57b8a13929c6e4acfe6697f1b6db9aa731ef20694661e436b7b6a0227e7c9\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.014107\",\n    \"total_input\": \"6.983769\",\n    \"total_output\": \"6.969662\",\n    \"txid\": \"def57b8a13929c6e4acfe6697f1b6db9aa731ef20694661e436b7b6a0227e7c9\"\n  }\n}"
                    },
                    {
                        "title": "Create an image stream claim with all metadata and fee",
                        "curl": "curl -d'{\"method\": \"stream_create\", \"params\": {\"name\": \"blank-image\", \"bid\": \"1.0\", \"bid_everything\": false, \"file_path\": \"/var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmp72t0waoz.png\", \"validate_file\": false, \"optimize_file\": false, \"fee_currency\": \"LBC\", \"fee_amount\": \"0.3\", \"title\": \"Blank Image\", \"description\": \"A blank PNG that is 5x7.\", \"author\": \"Picaso\", \"tags\": [\"blank\", \"art\"], \"languages\": [\"en\"], \"locations\": [\"US:NH:Manchester\"], \"license\": \"Public Domain\", \"license_url\": \"http://public-domain.org\", \"thumbnail_url\": \"http://smallmedia.com/thumbnail.jpg\", \"release_time\": 1651689437, \"channel_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\", \"channel_account_id\": [], \"funding_account_ids\": [], \"preview\": false, \"blocking\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet stream create blank-image 1.0 /var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmp72t0waoz.png --tags=blank --tags=art --languages=en --locations=US:NH:Manchester --fee_currency=LBC --fee_amount=0.3 --title=\"Blank Image\" --description=\"A blank PNG that is 5x7.\" --author=Picaso --license=\"Public Domain\" --license_url=http://public-domain.org --thumbnail_url=\"http://smallmedia.com/thumbnail.jpg\" --release_time=1651689437 --channel_id=\"879a99e68ea282a397e16ca1680cc925a160c169\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"stream_create\", \"params\": {\"name\": \"blank-image\", \"bid\": \"1.0\", \"bid_everything\": false, \"file_path\": \"/var/folders/46/44w2zhrx16b8gsvff9dxtr640000gq/T/tmp72t0waoz.png\", \"validate_file\": false, \"optimize_file\": false, \"fee_currency\": \"LBC\", \"fee_amount\": \"0.3\", \"title\": \"Blank Image\", \"description\": \"A blank PNG that is 5x7.\", \"author\": \"Picaso\", \"tags\": [\"blank\", \"art\"], \"languages\": [\"en\"], \"locations\": [\"US:NH:Manchester\"], \"license\": \"Public Domain\", \"license_url\": \"http://public-domain.org\", \"thumbnail_url\": \"http://smallmedia.com/thumbnail.jpg\", \"release_time\": 1651689437, \"channel_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\", \"channel_account_id\": [], \"funding_account_ids\": [], \"preview\": false, \"blocking\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"0100000001c9e727026a7b6b431e669406f21e73aab96d1b7f69e6cf4a6e9c92138a7bf5de010000006b483045022100a91b8eb490d2ae0782a3e79ffd3f2b9576dd0165906b02be65f221dffa9a27d40220728d8fd069978136771af179d0b44eeb913267485e7ea0ee410a6f4b86996e8401210275402cfaf4b3d0c407721895ec3955739c2dcb1f8c9bdb5aca56b2a05cbc63c0ffffffff0200e1f50500000000fddc01b50b626c616e6b2d696d6167654db1010169c160a125c90c68a16ce197a382a28ee6999a8716cf80142b054137adf103a01f556c21d64df0b443d7b0af8352786e75d66fe50914812ea789985dd7ebaa83cb0816504c463ab571a721f9df5eb2db259e87470ae6010a82010a306c7df435d412c603390f593ef658c199817c7830ba3f16b7eadd8f99fa50e85dbd0d2b3dc61eadc33fe096e3872d1545120f746d703732743077616f7a2e706e6718632209696d6167652f706e67323079f6d865d02048e795dd50b30f6349a2e6a55b524f4e721a35593b6a98270c79ecb606e88c69ee9615b20af7c0841149120650696361736f1a0d5075626c696320446f6d61696e2218687474703a2f2f7075626c69632d646f6d61696e2e6f726728dd8fcb93063222080112196f87de9a3129fb3deee4853f620631d1f576eba27b57bf2710188087a70e520408051007420b426c616e6b20496d6167654a184120626c616e6b20504e472074686174206973203578372e52252a23687474703a2f2f736d616c6c6d656469612e636f6d2f7468756d626e61696c2e6a70675a05626c616e6b5a03617274620208016a1308ec0112024e481a0a4d616e636865737465726d7576a91487de9a3129fb3deee4853f620631d1f576eba27b88acac5e7d1d000000001976a914d3e7f6dc7eb04a4aa691ce6c65aeb063d0ec85e288ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"mrdUmxEjMZo591MiaXL2FXgxEdc5pjGq5P\",\n        \"amount\": \"5.969662\",\n        \"confirmations\": 2,\n        \"height\": 213,\n        \"nout\": 1,\n        \"timestamp\": 1651689432,\n        \"txid\": \"def57b8a13929c6e4acfe6697f1b6db9aa731ef20694661e436b7b6a0227e7c9\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"msuNBdYovFPqvQfaCuks8LUJRxwaw1BqD9\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"69fd0928b532a51be321a0b92d3066497df9b620\",\n        \"claim_op\": \"create\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"is_channel_signature_valid\": true,\n        \"meta\": {},\n        \"name\": \"blank-image\",\n        \"normalized_name\": \"blank-image\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://blank-image#69fd0928b532a51be321a0b92d3066497df9b620\",\n        \"signing_channel\": {\n          \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n          \"amount\": \"1.0\",\n          \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"claim_op\": \"update\",\n          \"confirmations\": 5,\n          \"has_signing_key\": true,\n          \"height\": 210,\n          \"meta\": {},\n          \"name\": \"@channel\",\n          \"normalized_name\": \"@channel\",\n          \"nout\": 0,\n          \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"timestamp\": 1651689431,\n          \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n          \"type\": \"claim\",\n          \"value\": {\n            \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n            \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n            \"title\": \"New Channel\"\n          },\n          \"value_type\": \"channel\"\n        },\n        \"timestamp\": null,\n        \"txid\": \"d65f259a577b018a146c55f48171c75afd48da5a89e5b360d9eb37cac36d3f3d\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"author\": \"Picaso\",\n          \"description\": \"A blank PNG that is 5x7.\",\n          \"fee\": {\n            \"address\": \"msuNBdYovFPqvQfaCuks8LUJRxwaw1BqD9\",\n            \"amount\": \"0.3\",\n            \"currency\": \"LBC\"\n          },\n          \"image\": {\n            \"height\": 7,\n            \"width\": 5\n          },\n          \"languages\": [\n            \"en\"\n          ],\n          \"license\": \"Public Domain\",\n          \"license_url\": \"http://public-domain.org\",\n          \"locations\": [\n            {\n              \"city\": \"Manchester\",\n              \"country\": \"US\",\n              \"state\": \"NH\"\n            }\n          ],\n          \"release_time\": \"1651689437\",\n          \"source\": {\n            \"hash\": \"6c7df435d412c603390f593ef658c199817c7830ba3f16b7eadd8f99fa50e85dbd0d2b3dc61eadc33fe096e3872d1545\",\n            \"media_type\": \"image/png\",\n            \"name\": \"tmp72t0waoz.png\",\n            \"sd_hash\": \"79f6d865d02048e795dd50b30f6349a2e6a55b524f4e721a35593b6a98270c79ecb606e88c69ee9615b20af7c0841149\",\n            \"size\": \"99\"\n          },\n          \"stream_type\": \"image\",\n          \"tags\": [\n            \"blank\",\n            \"art\"\n          ],\n          \"thumbnail\": {\n            \"url\": \"http://smallmedia.com/thumbnail.jpg\"\n          },\n          \"title\": \"Blank Image\"\n        },\n        \"value_type\": \"stream\"\n      },\n      {\n        \"address\": \"mzqQkh7ocP5jpPnXno3UvdvYLgQZHyvyEz\",\n        \"amount\": \"4.947555\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"timestamp\": null,\n        \"txid\": \"d65f259a577b018a146c55f48171c75afd48da5a89e5b360d9eb37cac36d3f3d\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.022107\",\n    \"total_input\": \"5.969662\",\n    \"total_output\": \"5.947555\",\n    \"txid\": \"d65f259a577b018a146c55f48171c75afd48da5a89e5b360d9eb37cac36d3f3d\"\n  }\n}"
                    }
                ]
            },
            {
                "name": "stream_list",
                "description": "List my stream claims.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "str or list",
                        "description": "stream name",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str or list",
                        "description": "stream id",
                        "is_required": false
                    },
                    {
                        "name": "is_spent",
                        "type": "bool",
                        "description": "shows previous stream updates and abandons",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict results to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    },
                    {
                        "name": "resolve",
                        "type": "bool",
                        "description": "resolves each stream to provide additional metadata",
                        "is_required": false
                    },
                    {
                        "name": "no_totals",
                        "type": "bool",
                        "description": "do not calculate the total number of pages and items in result set (significant performance boost)",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"total_items\": \"Total number of items.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ]\n            }",
                "examples": [
                    {
                        "title": "List all your stream claims",
                        "curl": "curl -d'{\"method\": \"stream_list\", \"params\": {\"name\": [], \"claim_id\": [], \"is_spent\": false, \"resolve\": false, \"no_totals\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet stream list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"stream_list\", \"params\": {\"name\": [], \"claim_id\": [], \"is_spent\": false, \"resolve\": false, \"no_totals\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"address\": \"n28FYUe42shoUtuxDH9BKaTsn3rvf2JCV2\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 1,\n        \"height\": 214,\n        \"is_channel_signature_valid\": true,\n        \"is_internal_transfer\": false,\n        \"is_my_input\": true,\n        \"is_my_output\": true,\n        \"is_spent\": false,\n        \"meta\": {},\n        \"name\": \"astream\",\n        \"normalized_name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://astream#713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"signing_channel\": {\n          \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n          \"amount\": \"1.0\",\n          \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"claim_op\": \"update\",\n          \"confirmations\": 5,\n          \"has_signing_key\": true,\n          \"height\": 210,\n          \"meta\": {},\n          \"name\": \"@channel\",\n          \"normalized_name\": \"@channel\",\n          \"nout\": 0,\n          \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"timestamp\": 1651689431,\n          \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n          \"type\": \"claim\",\n          \"value\": {\n            \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n            \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n            \"title\": \"New Channel\"\n          },\n          \"value_type\": \"channel\"\n        },\n        \"timestamp\": 1651689434,\n        \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpnta3qbuz\",\n            \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n            \"size\": \"11\"\n          },\n          \"stream_type\": \"binary\"\n        },\n        \"value_type\": \"stream\"\n      },\n      {\n        \"address\": \"n28FYUe42shoUtuxDH9BKaTsn3rvf2JCV2\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"claim_op\": \"create\",\n        \"confirmations\": 2,\n        \"height\": 213,\n        \"is_internal_transfer\": false,\n        \"is_my_input\": true,\n        \"is_my_output\": true,\n        \"is_spent\": true,\n        \"meta\": {},\n        \"name\": \"astream\",\n        \"normalized_name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://astream#713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"timestamp\": 1651689432,\n        \"txid\": \"def57b8a13929c6e4acfe6697f1b6db9aa731ef20694661e436b7b6a0227e7c9\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpnta3qbuz\",\n            \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n            \"size\": \"11\"\n          },\n          \"stream_type\": \"binary\"\n        },\n        \"value_type\": \"stream\"\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 2,\n    \"total_pages\": 1\n  }\n}"
                    },
                    {
                        "title": "Paginate your stream claims",
                        "curl": "curl -d'{\"method\": \"stream_list\", \"params\": {\"name\": [], \"claim_id\": [], \"is_spent\": false, \"page\": 1, \"page_size\": 20, \"resolve\": false, \"no_totals\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet stream list --page=1 --page_size=20",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"stream_list\", \"params\": {\"name\": [], \"claim_id\": [], \"is_spent\": false, \"page\": 1, \"page_size\": 20, \"resolve\": false, \"no_totals\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"address\": \"n28FYUe42shoUtuxDH9BKaTsn3rvf2JCV2\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"claim_op\": \"update\",\n        \"confirmations\": 1,\n        \"height\": 214,\n        \"is_channel_signature_valid\": true,\n        \"is_internal_transfer\": false,\n        \"is_my_input\": true,\n        \"is_my_output\": true,\n        \"is_spent\": false,\n        \"meta\": {},\n        \"name\": \"astream\",\n        \"normalized_name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://astream#713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"signing_channel\": {\n          \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n          \"amount\": \"1.0\",\n          \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"claim_op\": \"update\",\n          \"confirmations\": 5,\n          \"has_signing_key\": true,\n          \"height\": 210,\n          \"meta\": {},\n          \"name\": \"@channel\",\n          \"normalized_name\": \"@channel\",\n          \"nout\": 0,\n          \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"timestamp\": 1651689431,\n          \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n          \"type\": \"claim\",\n          \"value\": {\n            \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n            \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n            \"title\": \"New Channel\"\n          },\n          \"value_type\": \"channel\"\n        },\n        \"timestamp\": 1651689434,\n        \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpnta3qbuz\",\n            \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n            \"size\": \"11\"\n          },\n          \"stream_type\": \"binary\"\n        },\n        \"value_type\": \"stream\"\n      },\n      {\n        \"address\": \"n28FYUe42shoUtuxDH9BKaTsn3rvf2JCV2\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"claim_op\": \"create\",\n        \"confirmations\": 2,\n        \"height\": 213,\n        \"is_internal_transfer\": false,\n        \"is_my_input\": true,\n        \"is_my_output\": true,\n        \"is_spent\": true,\n        \"meta\": {},\n        \"name\": \"astream\",\n        \"normalized_name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://astream#713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"timestamp\": 1651689432,\n        \"txid\": \"def57b8a13929c6e4acfe6697f1b6db9aa731ef20694661e436b7b6a0227e7c9\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpnta3qbuz\",\n            \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n            \"size\": \"11\"\n          },\n          \"stream_type\": \"binary\"\n        },\n        \"value_type\": \"stream\"\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 2,\n    \"total_pages\": 1\n  }\n}"
                    }
                ]
            },
            {
                "name": "stream_repost",
                "description": "Creates a claim that references an existing stream by its claim id.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "str",
                        "description": "name of the content (can only consist of a-z A-Z 0-9 and -(dash))",
                        "is_required": true
                    },
                    {
                        "name": "bid",
                        "type": "decimal",
                        "description": "amount to back the claim",
                        "is_required": true
                    },
                    {
                        "name": "bid_everything",
                        "type": "bool",
                        "description": "bid everything from funding accounts (excluding claims), default: false.",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "id of the claim being reposted",
                        "is_required": true
                    },
                    {
                        "name": "allow_duplicate_name",
                        "type": "bool",
                        "description": "create new claim even if one already exists with given name. default: false.",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str",
                        "description": "claim id of the publisher channel",
                        "is_required": false
                    },
                    {
                        "name": "channel_name",
                        "type": "str",
                        "description": "name of the publisher channel",
                        "is_required": false
                    },
                    {
                        "name": "channel_account_id",
                        "type": "str",
                        "description": "one or more account ids for accounts to look in for channel certificates, defaults to all accounts.",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account to use for holding the transaction",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "funding_account_ids",
                        "type": "list",
                        "description": "ids of accounts to fund this transaction",
                        "is_required": false
                    },
                    {
                        "name": "claim_address",
                        "type": "str",
                        "description": "address where the claim is sent to, if not specified it will be determined automatically from the account",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until transaction is in mempool",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": []
            },
            {
                "name": "stream_update",
                "description": "Update an existing stream claim and if a new file is provided announce it to lbrynet.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "id of the stream claim to update",
                        "is_required": true
                    },
                    {
                        "name": "bid",
                        "type": "decimal",
                        "description": "amount to back the claim",
                        "is_required": false
                    },
                    {
                        "name": "bid_everything",
                        "type": "bool",
                        "description": "bid everything from funding accounts (excluding claims), default: false.",
                        "is_required": false
                    },
                    {
                        "name": "file_path",
                        "type": "str",
                        "description": "path to file to be associated with name.",
                        "is_required": false
                    },
                    {
                        "name": "validate_file",
                        "type": "bool",
                        "description": "validate that the video container and encodings match common web browser support or that optimization succeeds if specified. FFmpeg is required and file_path must be specified.",
                        "is_required": false
                    },
                    {
                        "name": "optimize_file",
                        "type": "bool",
                        "description": "transcode the video & audio if necessary to ensure common web browser support. FFmpeg is required and file_path must be specified.",
                        "is_required": false
                    },
                    {
                        "name": "file_name",
                        "type": "str",
                        "description": "override file name, defaults to name from file_path.",
                        "is_required": false
                    },
                    {
                        "name": "file_size",
                        "type": "str",
                        "description": "override file size, otherwise automatically computed.",
                        "is_required": false
                    },
                    {
                        "name": "file_hash",
                        "type": "str",
                        "description": "override file hash, otherwise automatically computed.",
                        "is_required": false
                    },
                    {
                        "name": "fee_currency",
                        "type": "string",
                        "description": "specify fee currency",
                        "is_required": false
                    },
                    {
                        "name": "fee_amount",
                        "type": "decimal",
                        "description": "content download fee",
                        "is_required": false
                    },
                    {
                        "name": "fee_address",
                        "type": "str",
                        "description": "address where to send fee payments, will use value from --claim_address if not provided",
                        "is_required": false
                    },
                    {
                        "name": "clear_fee",
                        "type": "bool",
                        "description": "clear previously set fee",
                        "is_required": false
                    },
                    {
                        "name": "title",
                        "type": "str",
                        "description": "title of the publication",
                        "is_required": false
                    },
                    {
                        "name": "description",
                        "type": "str",
                        "description": "description of the publication",
                        "is_required": false
                    },
                    {
                        "name": "author",
                        "type": "str",
                        "description": "author of the publication. The usage for this field is not the same as for channels. The author field is used to credit an author who is not the publisher and is not represented by the channel. For example, a pdf file of 'The Odyssey' has an author of 'Homer' but may by published to a channel such as '@classics', or to no channel at all",
                        "is_required": false
                    },
                    {
                        "name": "tags",
                        "type": "list",
                        "description": "add content tags",
                        "is_required": false
                    },
                    {
                        "name": "clear_tags",
                        "type": "bool",
                        "description": "clear existing tags (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "languages",
                        "type": "list",
                        "description": "languages used by the channel, using RFC 5646 format, eg: for English `--languages=en` for Spanish (Spain) `--languages=es-ES` for Spanish (Mexican) `--languages=es-MX` for Chinese (Simplified) `--languages=zh-Hans` for Chinese (Traditional) `--languages=zh-Hant`",
                        "is_required": false
                    },
                    {
                        "name": "clear_languages",
                        "type": "bool",
                        "description": "clear existing languages (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "locations",
                        "type": "list",
                        "description": "locations relevant to the stream, consisting of 2 letter `country` code and a `state`, `city` and a postal `code` along with a `latitude` and `longitude`. for JSON RPC: pass a dictionary with aforementioned attributes as keys, eg: ... \"locations\": [{'country': 'US', 'state': 'NH'}] ... for command line: pass a colon delimited list with values in the following order: \"COUNTRY:STATE:CITY:CODE:LATITUDE:LONGITUDE\" making sure to include colon for blank values, for example to provide only the city: ... --locations=\"::Manchester\" with all values set: ... --locations=\"US:NH:Manchester:03101:42.990605:-71.460989\" optionally, you can just pass the \"LATITUDE:LONGITUDE\": ... --locations=\"42.990605:-71.460989\" finally, you can also pass JSON string of dictionary on the command line as you would via JSON RPC ... --locations=\"{'country': 'US', 'state': 'NH'}\"",
                        "is_required": false
                    },
                    {
                        "name": "clear_locations",
                        "type": "bool",
                        "description": "clear existing locations (prior to adding new ones)",
                        "is_required": false
                    },
                    {
                        "name": "license",
                        "type": "str",
                        "description": "publication license",
                        "is_required": false
                    },
                    {
                        "name": "license_url",
                        "type": "str",
                        "description": "publication license url",
                        "is_required": false
                    },
                    {
                        "name": "thumbnail_url",
                        "type": "str",
                        "description": "thumbnail url",
                        "is_required": false
                    },
                    {
                        "name": "release_time",
                        "type": "int",
                        "description": "original public release of content, seconds since UNIX epoch",
                        "is_required": false
                    },
                    {
                        "name": "width",
                        "type": "int",
                        "description": "image/video width, automatically calculated from media file",
                        "is_required": false
                    },
                    {
                        "name": "height",
                        "type": "int",
                        "description": "image/video height, automatically calculated from media file",
                        "is_required": false
                    },
                    {
                        "name": "duration",
                        "type": "int",
                        "description": "audio/video duration in seconds, automatically calculated",
                        "is_required": false
                    },
                    {
                        "name": "sd_hash",
                        "type": "str",
                        "description": "sd_hash of stream",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str",
                        "description": "claim id of the publisher channel",
                        "is_required": false
                    },
                    {
                        "name": "channel_name",
                        "type": "str",
                        "description": "name of the publisher channel",
                        "is_required": false
                    },
                    {
                        "name": "clear_channel",
                        "type": "bool",
                        "description": "remove channel signature",
                        "is_required": false
                    },
                    {
                        "name": "channel_account_id",
                        "type": "str",
                        "description": "one or more account ids for accounts to look in for channel certificates, defaults to all accounts.",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account in which to look for stream (default: all)",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "funding_account_ids",
                        "type": "list",
                        "description": "ids of accounts to fund this transaction",
                        "is_required": false
                    },
                    {
                        "name": "claim_address",
                        "type": "str",
                        "description": "address where the claim is sent to, if not specified it will be determined automatically from the account",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until transaction is in mempool",
                        "is_required": false
                    },
                    {
                        "name": "replace",
                        "type": "bool",
                        "description": "instead of modifying specific values on the stream, this will clear all existing values and only save passed in values, useful for form submissions where all values are always set",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": [
                    {
                        "title": "Update a stream claim to add channel",
                        "curl": "curl -d'{\"method\": \"stream_update\", \"params\": {\"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\", \"bid_everything\": false, \"validate_file\": false, \"optimize_file\": false, \"clear_fee\": false, \"tags\": [], \"clear_tags\": false, \"languages\": [], \"clear_languages\": false, \"locations\": [], \"clear_locations\": false, \"channel_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\", \"clear_channel\": false, \"channel_account_id\": [], \"funding_account_ids\": [], \"preview\": false, \"blocking\": false, \"replace\": false}}' http://localhost:5279/",
                        "lbrynet": "lbrynet stream update 713086e8213eb2e43f8db0168c11fbb670dcff26 --channel_id=\"879a99e68ea282a397e16ca1680cc925a160c169\"",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"stream_update\", \"params\": {\"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\", \"bid_everything\": false, \"validate_file\": false, \"optimize_file\": false, \"clear_fee\": false, \"tags\": [], \"clear_tags\": false, \"languages\": [], \"clear_languages\": false, \"locations\": [], \"clear_locations\": false, \"channel_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\", \"clear_channel\": false, \"channel_account_id\": [], \"funding_account_ids\": [], \"preview\": false, \"blocking\": false, \"replace\": false}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"height\": -2,\n    \"hex\": \"0100000002c9e727026a7b6b431e669406f21e73aab96d1b7f69e6cf4a6e9c92138a7bf5de000000006a4730440220609b040242e1fdf4dd27fa0fc21afc39a63b4d0f78c67e99cb2b34e8a8c6b93702200471db0206edb61b3286712a5e15f40998d9ac4f030f1139da698ef475ca69740121024a081e16d8c1a057d4d4d726889a37ee6a74b5fccfe8522bdabd42992fa60280ffffffff888348ce2ce4561fa5eb0cf0b2aef135ba759e5cf5857f2e3486e0407415f286010000006b483045022100ea1b942da91de17a2eeea1308b48d1400da5b0aefa8fdf8ce5cf58efb248391d0220651d7a861b7e57af0503f736f4e42b1bebf33fdcb4b768413c6a31ccbba9fa980121033ed512722b0efb766e38ae455734bf6921ff2e8382361e290e890f3544bc4695ffffffff0200e1f50500000000fd2301b7076173747265616d1426ffdc70b6fb118c16b08d3fe4b23e21e88630714ce80169c160a125c90c68a16ce197a382a28ee6999a87fc90c0c968700144f7bfba6be4fee0ace026874ae629a7e6158a7b3b944885072662a3d6392938212f45576f00e76d95ee49d32914a010f536f1b49d17b140bc0a90010a8d010a30fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd120b746d706e7461337162757a180b22186170706c69636174696f6e2f6f637465742d73747265616d323043f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b36d6d76a914e20f790a0b5f23f1bd4d6dc996f6696e145070ab88ac22abd205000000001976a914db3e582552f0c360916cc5a0bf97b34bfb8aac0d88ac00000000\",\n    \"inputs\": [\n      {\n        \"address\": \"n28FYUe42shoUtuxDH9BKaTsn3rvf2JCV2\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"claim_op\": \"create\",\n        \"confirmations\": 1,\n        \"height\": 213,\n        \"meta\": {},\n        \"name\": \"astream\",\n        \"normalized_name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://astream#713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"timestamp\": 1651689432,\n        \"txid\": \"def57b8a13929c6e4acfe6697f1b6db9aa731ef20694661e436b7b6a0227e7c9\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpnta3qbuz\",\n            \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n            \"size\": \"11\"\n          },\n          \"stream_type\": \"binary\"\n        },\n        \"value_type\": \"stream\"\n      },\n      {\n        \"address\": \"mmFRtiZVsNfptLsqm5RybET7SckysLdvin\",\n        \"amount\": \"0.9772565\",\n        \"confirmations\": 3,\n        \"height\": 211,\n        \"nout\": 1,\n        \"timestamp\": 1651689431,\n        \"txid\": \"86f2157440e086342e7f85f55c9e75ba35f1aeb2f00ceba51f56e42cce488388\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"n28FYUe42shoUtuxDH9BKaTsn3rvf2JCV2\",\n        \"amount\": \"1.0\",\n        \"claim_id\": \"713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"claim_op\": \"update\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"is_channel_signature_valid\": true,\n        \"meta\": {},\n        \"name\": \"astream\",\n        \"normalized_name\": \"astream\",\n        \"nout\": 0,\n        \"permanent_url\": \"lbry://astream#713086e8213eb2e43f8db0168c11fbb670dcff26\",\n        \"signing_channel\": {\n          \"address\": \"muzdHJKogaaC3Ds78NpkokbiC7iFgPSsAV\",\n          \"amount\": \"1.0\",\n          \"claim_id\": \"879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"claim_op\": \"update\",\n          \"confirmations\": 4,\n          \"has_signing_key\": true,\n          \"height\": 210,\n          \"meta\": {},\n          \"name\": \"@channel\",\n          \"normalized_name\": \"@channel\",\n          \"nout\": 0,\n          \"permanent_url\": \"lbry://@channel#879a99e68ea282a397e16ca1680cc925a160c169\",\n          \"timestamp\": 1651689431,\n          \"txid\": \"d138559e06f28e578c6d44c3eade880858ce2b4fd6eb661eca0f5794f43778dd\",\n          \"type\": \"claim\",\n          \"value\": {\n            \"public_key\": \"03a86afb9501a658856e07f248ff6899e536ae21f0d3c9badae5d886e67166f709\",\n            \"public_key_id\": \"moTBSdaQFDE93Msck3HAdJme9WLVeP89qw\",\n            \"title\": \"New Channel\"\n          },\n          \"value_type\": \"channel\"\n        },\n        \"timestamp\": null,\n        \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\",\n        \"type\": \"claim\",\n        \"value\": {\n          \"source\": {\n            \"hash\": \"fdbd8e75a67f29f701a4e040385e2e23986303ea10239211af907fcbb83578b3e417cb71ce646efd0819dd8c088de1bd\",\n            \"media_type\": \"application/octet-stream\",\n            \"name\": \"tmpnta3qbuz\",\n            \"sd_hash\": \"43f902adfff33fefc1efe5507186d308f8c562fbd24b633eb6535171f9de73b34bfc877da4694bde7ea51996a1fe80b3\",\n            \"size\": \"11\"\n          },\n          \"stream_type\": \"binary\"\n        },\n        \"value_type\": \"stream\"\n      },\n      {\n        \"address\": \"n1WCxpkg2rW2hofBmkk6MFF5nzaFSSsEPy\",\n        \"amount\": \"0.9769245\",\n        \"confirmations\": -2,\n        \"height\": -2,\n        \"nout\": 1,\n        \"timestamp\": null,\n        \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\",\n        \"type\": \"payment\"\n      }\n    ],\n    \"total_fee\": \"0.000332\",\n    \"total_input\": \"1.9772565\",\n    \"total_output\": \"1.9769245\",\n    \"txid\": \"21ec4cd898bf84c7c51b714e207ff34ee7ea8d78a01e5e31afd271f6d9992ef5\"\n  }\n}"
                    }
                ]
            }
        ]
    },
    "support": {
        "doc": "Create, list and abandon all types of supports.",
        "commands": [
            {
                "name": "support_abandon",
                "description": "Abandon supports, including tips, of a specific claim, optionally\nkeeping some amount as supports.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "claim_id of the support to abandon",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "txid of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "nout",
                        "type": "int",
                        "description": "nout of the claim to abandon",
                        "is_required": false
                    },
                    {
                        "name": "keep",
                        "type": "decimal",
                        "description": "amount of lbc to keep as support",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to use",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until abandon is in mempool",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": []
            },
            {
                "name": "support_create",
                "description": "Create a support or a tip for name claim.",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "claim_id of the claim to support",
                        "is_required": true
                    },
                    {
                        "name": "amount",
                        "type": "decimal",
                        "description": "amount of support",
                        "is_required": true
                    },
                    {
                        "name": "amount_everything",
                        "type": "bool",
                        "description": "send everything from funding accounts (excluding claims), default: false.",
                        "is_required": false
                    },
                    {
                        "name": "tip",
                        "type": "bool",
                        "description": "send support to claim owner, default: false.",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str",
                        "description": "claim id of the supporters identity channel",
                        "is_required": false
                    },
                    {
                        "name": "channel_name",
                        "type": "str",
                        "description": "name of the supporters identity channel",
                        "is_required": false
                    },
                    {
                        "name": "channel_account_id",
                        "type": "str",
                        "description": "one or more account ids for accounts to look in for channel certificates, defaults to all accounts.",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "account to use for holding the transaction",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "funding_account_ids",
                        "type": "list",
                        "description": "ids of accounts to fund this transaction",
                        "is_required": false
                    },
                    {
                        "name": "comment",
                        "type": "str",
                        "description": "add a comment to the support",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until transaction is in mempool",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": []
            },
            {
                "name": "support_list",
                "description": "List staked supports and sent/received tips.",
                "arguments": [
                    {
                        "name": "name",
                        "type": "str or list",
                        "description": "claim name",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str or list",
                        "description": "claim id",
                        "is_required": false
                    },
                    {
                        "name": "received",
                        "type": "bool",
                        "description": "only show received (tips)",
                        "is_required": false
                    },
                    {
                        "name": "sent",
                        "type": "bool",
                        "description": "only show sent (tips)",
                        "is_required": false
                    },
                    {
                        "name": "staked",
                        "type": "bool",
                        "description": "only show my staked supports",
                        "is_required": false
                    },
                    {
                        "name": "is_spent",
                        "type": "bool",
                        "description": "show abandoned supports",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict results to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    },
                    {
                        "name": "no_totals",
                        "type": "bool",
                        "description": "do not calculate the total number of pages and items in result set (significant performance boost)",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"total_items\": \"Total number of items.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ]\n            }",
                "examples": []
            },
            {
                "name": "support_sum",
                "description": "List total staked supports for a claim, grouped by the channel that signed the support.\n\nIf claim_id is a channel claim, you can use --include_channel_content to also include supports for\ncontent claims in the channel.\n\n!!!! NOTE: PAGINATION DOES NOT DO ANYTHING AT THE MOMENT !!!!!",
                "arguments": [
                    {
                        "name": "claim_id",
                        "type": "str",
                        "description": "claim id",
                        "is_required": false
                    },
                    {
                        "name": "new_sdk_server",
                        "type": "str",
                        "description": "URL of the new SDK server (EXPERIMENTAL)",
                        "is_required": false
                    },
                    {
                        "name": "include_channel_content",
                        "type": "bool",
                        "description": "if claim_id is for a channel, include supports for claims in that channel",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"total_items\": \"Total number of items.\",\n                \"items\": [\n                    \"glorious data in dictionary\"\n                ]\n            }",
                "examples": []
            }
        ]
    },
    "sync": {
        "doc": "Wallet synchronization.",
        "commands": [
            {
                "name": "sync_apply",
                "description": "Apply incoming synchronization data, if provided, and return a sync hash and update wallet data.\n\nWallet must be unlocked to perform this operation.\n\nIf \"encrypt-on-disk\" preference is True and supplied password is different from local password,\nor there is no local password (because local wallet was not encrypted), then the supplied password\nwill be used for local encryption (overwriting previous local encryption password).",
                "arguments": [
                    {
                        "name": "password",
                        "type": "str",
                        "description": "password to decrypt incoming and encrypt outgoing data",
                        "is_required": false
                    },
                    {
                        "name": "data",
                        "type": "str",
                        "description": "incoming sync data, if any",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "wallet being sync'ed",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until any new accounts have sync'ed",
                        "is_required": false
                    }
                ],
                "returns": "(map) sync hash and data",
                "examples": []
            },
            {
                "name": "sync_hash",
                "description": "Deterministic hash of the wallet.",
                "arguments": [
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "wallet for which to generate hash",
                        "is_required": false
                    }
                ],
                "returns": "(str) sha256 hash of wallet",
                "examples": []
            }
        ]
    },
    "tracemalloc": {
        "doc": "Controls and queries tracemalloc memory tracing tools for troubleshooting.",
        "commands": [
            {
                "name": "tracemalloc_disable",
                "description": "Disable tracemalloc memory tracing",
                "arguments": [],
                "returns": "(bool) is it tracing?",
                "examples": []
            },
            {
                "name": "tracemalloc_enable",
                "description": "Enable tracemalloc memory tracing",
                "arguments": [],
                "returns": "(bool) is it tracing?",
                "examples": []
            },
            {
                "name": "tracemalloc_top",
                "description": "Show most common objects, the place that created them and their size.",
                "arguments": [
                    {
                        "name": "items",
                        "type": "int",
                        "description": "maximum items to return, from the most common",
                        "is_required": true
                    }
                ],
                "returns": "(dict) dictionary containing most common objects in memory\n    {\n        \"line\": (str) filename and line number where it was created,\n        \"code\": (str) code that created it,\n        \"size\": (int) size in bytes, for each \"memory block\",\n        \"count\" (int) number of memory blocks\n    }",
                "examples": []
            }
        ]
    },
    "transaction": {
        "doc": "Transaction management.",
        "commands": [
            {
                "name": "transaction_list",
                "description": "List transactions belonging to wallet",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict results to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "(list) List of transactions\n\n    {\n        \"claim_info\": (list) claim info if in txn [{\n                                                \"address\": (str) address of claim,\n                                                \"balance_delta\": (float) bid amount,\n                                                \"amount\": (float) claim amount,\n                                                \"claim_id\": (str) claim id,\n                                                \"claim_name\": (str) claim name,\n                                                \"nout\": (int) nout\n                                                }],\n        \"abandon_info\": (list) abandon info if in txn [{\n                                                \"address\": (str) address of abandoned claim,\n                                                \"balance_delta\": (float) returned amount,\n                                                \"amount\": (float) claim amount,\n                                                \"claim_id\": (str) claim id,\n                                                \"claim_name\": (str) claim name,\n                                                \"nout\": (int) nout\n                                                }],\n        \"confirmations\": (int) number of confirmations for the txn,\n        \"date\": (str) date and time of txn,\n        \"fee\": (float) txn fee,\n        \"support_info\": (list) support info if in txn [{\n                                                \"address\": (str) address of support,\n                                                \"balance_delta\": (float) support amount,\n                                                \"amount\": (float) support amount,\n                                                \"claim_id\": (str) claim id,\n                                                \"claim_name\": (str) claim name,\n                                                \"is_tip\": (bool),\n                                                \"nout\": (int) nout\n                                                }],\n        \"timestamp\": (int) timestamp,\n        \"txid\": (str) txn id,\n        \"update_info\": (list) update info if in txn [{\n                                                \"address\": (str) address of claim,\n                                                \"balance_delta\": (float) credited/debited\n                                                \"amount\": (float) absolute amount,\n                                                \"claim_id\": (str) claim id,\n                                                \"claim_name\": (str) claim name,\n                                                \"nout\": (int) nout\n                                                }],\n        \"value\": (float) value of txn\n    }",
                "examples": [
                    {
                        "title": "List your transactions",
                        "curl": "curl -d'{\"method\": \"transaction_list\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet transaction list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"transaction_list\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"abandon_info\": [],\n        \"claim_info\": [],\n        \"confirmations\": 1,\n        \"date\": \"2022-05-04 14:37\",\n        \"fee\": \"-0.000124\",\n        \"purchase_info\": [],\n        \"support_info\": [],\n        \"timestamp\": 1651689431,\n        \"txid\": \"618646b2cab7230e00390a8c7405e8b076df379f61bedbec0ee1c1b761f1c7be\",\n        \"update_info\": [],\n        \"value\": \"0.0\"\n      },\n      {\n        \"abandon_info\": [],\n        \"claim_info\": [],\n        \"confirmations\": 7,\n        \"date\": \"2022-05-04 14:37\",\n        \"fee\": \"0.0\",\n        \"purchase_info\": [],\n        \"support_info\": [],\n        \"timestamp\": 1651689430,\n        \"txid\": \"ef7d142ab01b089b42dfbafce63bdd8b93bb1143216d21e04b99861135d91082\",\n        \"update_info\": [],\n        \"value\": \"10.0\"\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 2,\n    \"total_pages\": 1\n  }\n}"
                    }
                ]
            },
            {
                "name": "transaction_show",
                "description": "Get a decoded transaction from a txid",
                "arguments": [
                    {
                        "name": "txid",
                        "type": "str",
                        "description": "txid of the transaction",
                        "is_required": true
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": []
            }
        ]
    },
    "txo": {
        "doc": "List and sum transaction outputs.",
        "commands": [
            {
                "name": "txo_list",
                "description": "List my transaction outputs.",
                "arguments": [
                    {
                        "name": "type",
                        "type": "str or list",
                        "description": "claim type: stream, channel, support, purchase, collection, repost, other",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str or list",
                        "description": "transaction id of outputs",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str or list",
                        "description": "claim id",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str or list",
                        "description": "claims in this channel",
                        "is_required": false
                    },
                    {
                        "name": "not_channel_id",
                        "type": "str or list",
                        "description": "claims not in this channel",
                        "is_required": false
                    },
                    {
                        "name": "name",
                        "type": "str or list",
                        "description": "claim name",
                        "is_required": false
                    },
                    {
                        "name": "is_spent",
                        "type": "bool",
                        "description": "only show spent txos",
                        "is_required": false
                    },
                    {
                        "name": "is_not_spent",
                        "type": "bool",
                        "description": "only show not spent txos",
                        "is_required": false
                    },
                    {
                        "name": "is_my_input_or_output",
                        "type": "bool",
                        "description": "txos which have your inputs or your outputs, if using this flag the other related flags are ignored (--is_my_output, --is_my_input, etc)",
                        "is_required": false
                    },
                    {
                        "name": "is_my_output",
                        "type": "bool",
                        "description": "show outputs controlled by you",
                        "is_required": false
                    },
                    {
                        "name": "is_not_my_output",
                        "type": "bool",
                        "description": "show outputs not controlled by you",
                        "is_required": false
                    },
                    {
                        "name": "is_my_input",
                        "type": "bool",
                        "description": "show outputs created by you",
                        "is_required": false
                    },
                    {
                        "name": "is_not_my_input",
                        "type": "bool",
                        "description": "show outputs not created by you",
                        "is_required": false
                    },
                    {
                        "name": "exclude_internal_transfers",
                        "type": "bool",
                        "description": "excludes any outputs that are exactly this combination: \"--is_my_input --is_my_output --type=other\" this allows to exclude \"change\" payments, this flag can be used in combination with any of the other flags",
                        "is_required": false
                    },
                    {
                        "name": "include_received_tips",
                        "type": "bool",
                        "description": "calculate the amount of tips received for claim outputs",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict results to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    },
                    {
                        "name": "resolve",
                        "type": "bool",
                        "description": "resolves each claim to provide additional metadata",
                        "is_required": false
                    },
                    {
                        "name": "order_by",
                        "type": "str",
                        "description": "field to order by: 'name', 'height', 'amount' and 'none'",
                        "is_required": false
                    },
                    {
                        "name": "no_totals",
                        "type": "bool",
                        "description": "do not calculate the total number of pages and items in result set (significant performance boost)",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"total_items\": \"Total number of items.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ]\n            }",
                "examples": []
            },
            {
                "name": "txo_plot",
                "description": "Plot transaction output sum over days.",
                "arguments": [
                    {
                        "name": "type",
                        "type": "str or list",
                        "description": "claim type: stream, channel, support, purchase, collection, repost, other",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str or list",
                        "description": "transaction id of outputs",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str or list",
                        "description": "claim id",
                        "is_required": false
                    },
                    {
                        "name": "name",
                        "type": "str or list",
                        "description": "claim name",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str or list",
                        "description": "claims in this channel",
                        "is_required": false
                    },
                    {
                        "name": "not_channel_id",
                        "type": "str or list",
                        "description": "claims not in this channel",
                        "is_required": false
                    },
                    {
                        "name": "is_spent",
                        "type": "bool",
                        "description": "only show spent txos",
                        "is_required": false
                    },
                    {
                        "name": "is_not_spent",
                        "type": "bool",
                        "description": "only show not spent txos",
                        "is_required": false
                    },
                    {
                        "name": "is_my_input_or_output",
                        "type": "bool",
                        "description": "txos which have your inputs or your outputs, if using this flag the other related flags are ignored (--is_my_output, --is_my_input, etc)",
                        "is_required": false
                    },
                    {
                        "name": "is_my_output",
                        "type": "bool",
                        "description": "show outputs controlled by you",
                        "is_required": false
                    },
                    {
                        "name": "is_not_my_output",
                        "type": "bool",
                        "description": "show outputs not controlled by you",
                        "is_required": false
                    },
                    {
                        "name": "is_my_input",
                        "type": "bool",
                        "description": "show outputs created by you",
                        "is_required": false
                    },
                    {
                        "name": "is_not_my_input",
                        "type": "bool",
                        "description": "show outputs not created by you",
                        "is_required": false
                    },
                    {
                        "name": "exclude_internal_transfers",
                        "type": "bool",
                        "description": "excludes any outputs that are exactly this combination: \"--is_my_input --is_my_output --type=other\" this allows to exclude \"change\" payments, this flag can be used in combination with any of the other flags",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict results to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "days_back",
                        "type": "int",
                        "description": "number of days back from today (not compatible with --start_day, --days_after, --end_day)",
                        "is_required": false
                    },
                    {
                        "name": "start_day",
                        "type": "date",
                        "description": "start on specific date (YYYY-MM-DD) (instead of --days_back)",
                        "is_required": false
                    },
                    {
                        "name": "days_after",
                        "type": "int",
                        "description": "end number of days after --start_day (instead of --end_day)",
                        "is_required": false
                    },
                    {
                        "name": "end_day",
                        "type": "date",
                        "description": "end on specific date (YYYY-MM-DD) (instead of --days_after)",
                        "is_required": false
                    }
                ],
                "returns": "List[Dict]",
                "examples": []
            },
            {
                "name": "txo_spend",
                "description": "Spend transaction outputs, batching into multiple transactions as necessary.",
                "arguments": [
                    {
                        "name": "type",
                        "type": "str or list",
                        "description": "claim type: stream, channel, support, purchase, collection, repost, other",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str or list",
                        "description": "transaction id of outputs",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str or list",
                        "description": "claim id",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str or list",
                        "description": "claims in this channel",
                        "is_required": false
                    },
                    {
                        "name": "not_channel_id",
                        "type": "str or list",
                        "description": "claims not in this channel",
                        "is_required": false
                    },
                    {
                        "name": "name",
                        "type": "str or list",
                        "description": "claim name",
                        "is_required": false
                    },
                    {
                        "name": "is_my_input",
                        "type": "bool",
                        "description": "show outputs created by you",
                        "is_required": false
                    },
                    {
                        "name": "is_not_my_input",
                        "type": "bool",
                        "description": "show outputs not created by you",
                        "is_required": false
                    },
                    {
                        "name": "exclude_internal_transfers",
                        "type": "bool",
                        "description": "excludes any outputs that are exactly this combination: \"--is_my_input --is_my_output --type=other\" this allows to exclude \"change\" payments, this flag can be used in combination with any of the other flags",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict results to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until abandon is in mempool",
                        "is_required": false
                    },
                    {
                        "name": "batch_size",
                        "type": "int",
                        "description": "number of txos to spend per transactions",
                        "is_required": false
                    },
                    {
                        "name": "include_full_tx",
                        "type": "bool",
                        "description": "include entire tx in output and not just the txid",
                        "is_required": false
                    }
                ],
                "returns": "            [\n                {\n                    \"txid\": \"hash of transaction in hex\",\n                    \"height\": \"block where transaction was recorded\",\n                    \"inputs\": [\n                        {\n                            \"txid\": \"hash of transaction in hex\",\n                            \"nout\": \"position in the transaction\",\n                            \"height\": \"block where transaction was recorded\",\n                            \"amount\": \"value of the txo as a decimal\",\n                            \"address\": \"address of who can spend the txo\",\n                            \"confirmations\": \"number of confirmed blocks\",\n                            \"is_change\": \"payment to change address, only available when it can be determined\",\n                            \"is_received\": \"true if txo was sent from external account to this account\",\n                            \"is_spent\": \"true if txo is spent\",\n                            \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                            \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                            \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                            \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                            \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                            \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                            \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                            \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                            \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                            \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                            \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                            \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                            \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                            \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                        }\n                    ],\n                    \"outputs\": [\n                        {\n                            \"txid\": \"hash of transaction in hex\",\n                            \"nout\": \"position in the transaction\",\n                            \"height\": \"block where transaction was recorded\",\n                            \"amount\": \"value of the txo as a decimal\",\n                            \"address\": \"address of who can spend the txo\",\n                            \"confirmations\": \"number of confirmed blocks\",\n                            \"is_change\": \"payment to change address, only available when it can be determined\",\n                            \"is_received\": \"true if txo was sent from external account to this account\",\n                            \"is_spent\": \"true if txo is spent\",\n                            \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                            \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                            \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                            \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                            \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                            \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                            \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                            \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                            \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                            \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                            \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                            \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                            \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                            \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                        }\n                    ],\n                    \"total_input\": \"sum of inputs as a decimal\",\n                    \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                    \"total_fee\": \"fee amount\",\n                    \"hex\": \"entire transaction encoded in hex\"\n                }\n            ]",
                "examples": []
            },
            {
                "name": "txo_sum",
                "description": "Sum of transaction outputs.",
                "arguments": [
                    {
                        "name": "type",
                        "type": "str or list",
                        "description": "claim type: stream, channel, support, purchase, collection, repost, other",
                        "is_required": false
                    },
                    {
                        "name": "txid",
                        "type": "str or list",
                        "description": "transaction id of outputs",
                        "is_required": false
                    },
                    {
                        "name": "claim_id",
                        "type": "str or list",
                        "description": "claim id",
                        "is_required": false
                    },
                    {
                        "name": "name",
                        "type": "str or list",
                        "description": "claim name",
                        "is_required": false
                    },
                    {
                        "name": "channel_id",
                        "type": "str or list",
                        "description": "claims in this channel",
                        "is_required": false
                    },
                    {
                        "name": "not_channel_id",
                        "type": "str or list",
                        "description": "claims not in this channel",
                        "is_required": false
                    },
                    {
                        "name": "is_spent",
                        "type": "bool",
                        "description": "only show spent txos",
                        "is_required": false
                    },
                    {
                        "name": "is_not_spent",
                        "type": "bool",
                        "description": "only show not spent txos",
                        "is_required": false
                    },
                    {
                        "name": "is_my_input_or_output",
                        "type": "bool",
                        "description": "txos which have your inputs or your outputs, if using this flag the other related flags are ignored (--is_my_output, --is_my_input, etc)",
                        "is_required": false
                    },
                    {
                        "name": "is_my_output",
                        "type": "bool",
                        "description": "show outputs controlled by you",
                        "is_required": false
                    },
                    {
                        "name": "is_not_my_output",
                        "type": "bool",
                        "description": "show outputs not controlled by you",
                        "is_required": false
                    },
                    {
                        "name": "is_my_input",
                        "type": "bool",
                        "description": "show outputs created by you",
                        "is_required": false
                    },
                    {
                        "name": "is_not_my_input",
                        "type": "bool",
                        "description": "show outputs not created by you",
                        "is_required": false
                    },
                    {
                        "name": "exclude_internal_transfers",
                        "type": "bool",
                        "description": "excludes any outputs that are exactly this combination: \"--is_my_input --is_my_output --type=other\" this allows to exclude \"change\" payments, this flag can be used in combination with any of the other flags",
                        "is_required": false
                    },
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict results to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "int",
                "examples": []
            }
        ]
    },
    "utxo": {
        "doc": "Unspent transaction management.",
        "commands": [
            {
                "name": "utxo_list",
                "description": "List unspent transaction outputs",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict results to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"total_items\": \"Total number of items.\",\n                \"items\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ]\n            }",
                "examples": []
            },
            {
                "name": "utxo_release",
                "description": "When spending a UTXO it is locally locked to prevent double spends;\noccasionally this can result in a UTXO being locked which ultimately\ndid not get spent (failed to broadcast, spend transaction was not\naccepted by blockchain node, etc). This command releases the lock\non all UTXOs in your account.",
                "arguments": [
                    {
                        "name": "account_id",
                        "type": "str",
                        "description": "id of the account to query",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "None",
                "examples": []
            }
        ]
    },
    "wallet": {
        "doc": "Create, modify and inspect wallets.",
        "commands": [
            {
                "name": "wallet_add",
                "description": "Add existing wallet.",
                "arguments": [
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "wallet file name",
                        "is_required": true
                    }
                ],
                "returns": "            {\n                \"id\": \"wallet_id\",\n                \"name\": \"optional wallet name\"\n            }",
                "examples": []
            },
            {
                "name": "wallet_balance",
                "description": "Return the balance of a wallet",
                "arguments": [
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "balance for specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "confirmations",
                        "type": "int",
                        "description": "Only include transactions with this many confirmed blocks.",
                        "is_required": false
                    }
                ],
                "returns": "(decimal) amount of lbry credits in wallet",
                "examples": []
            },
            {
                "name": "wallet_create",
                "description": "Create a new wallet.",
                "arguments": [
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "wallet file name",
                        "is_required": true
                    },
                    {
                        "name": "skip_on_startup",
                        "type": "bool",
                        "description": "don't add wallet to daemon_settings.yml",
                        "is_required": false
                    },
                    {
                        "name": "create_account",
                        "type": "bool",
                        "description": "generates the default account",
                        "is_required": false
                    },
                    {
                        "name": "single_key",
                        "type": "bool",
                        "description": "used with --create_account, creates single-key account",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"id\": \"wallet_id\",\n                \"name\": \"optional wallet name\"\n            }",
                "examples": []
            },
            {
                "name": "wallet_decrypt",
                "description": "Decrypt an encrypted wallet, this will remove the wallet password. The wallet must be unlocked to decrypt it",
                "arguments": [
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "(bool) true if wallet is decrypted, otherwise false",
                "examples": []
            },
            {
                "name": "wallet_encrypt",
                "description": "Encrypt an unencrypted wallet with a password",
                "arguments": [
                    {
                        "name": "new_password",
                        "type": "str",
                        "description": "password to encrypt account",
                        "is_required": true
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "(bool) true if wallet is decrypted, otherwise false",
                "examples": []
            },
            {
                "name": "wallet_list",
                "description": "List wallets.",
                "arguments": [
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "show specific wallet only",
                        "is_required": false
                    },
                    {
                        "name": "page",
                        "type": "int",
                        "description": "page to return during paginating",
                        "is_required": false
                    },
                    {
                        "name": "page_size",
                        "type": "int",
                        "description": "number of items on page during pagination",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"page\": \"Page number of the current items.\",\n                \"page_size\": \"Number of items to show on a page.\",\n                \"total_pages\": \"Total number of pages.\",\n                \"total_items\": \"Total number of items.\",\n                \"items\": [\n                    {\n                        \"id\": \"wallet_id\",\n                        \"name\": \"optional wallet name\"\n                    }\n                ]\n            }",
                "examples": [
                    {
                        "title": "List your wallets",
                        "curl": "curl -d'{\"method\": \"wallet_list\", \"params\": {}}' http://localhost:5279/",
                        "lbrynet": "lbrynet wallet list",
                        "python": "requests.post(\"http://localhost:5279\", json={\"method\": \"wallet_list\", \"params\": {}}).json()",
                        "output": "{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"items\": [\n      {\n        \"id\": \"my_wallet.json\",\n        \"name\": \"Wallet\"\n      }\n    ],\n    \"page\": 1,\n    \"page_size\": 20,\n    \"total_items\": 1,\n    \"total_pages\": 1\n  }\n}"
                    }
                ]
            },
            {
                "name": "wallet_lock",
                "description": "Lock an unlocked wallet",
                "arguments": [
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "(bool) true if wallet is locked, otherwise false",
                "examples": []
            },
            {
                "name": "wallet_reconnect",
                "description": "Reconnects ledger network client, applying new configurations.",
                "arguments": [],
                "returns": "None",
                "examples": []
            },
            {
                "name": "wallet_remove",
                "description": "Remove an existing wallet.",
                "arguments": [
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "name of wallet to remove",
                        "is_required": true
                    }
                ],
                "returns": "            {\n                \"id\": \"wallet_id\",\n                \"name\": \"optional wallet name\"\n            }",
                "examples": []
            },
            {
                "name": "wallet_send",
                "description": "Send the same number of credits to multiple addresses using all accounts in wallet to\nfund the transaction and the default account to receive any change.",
                "arguments": [
                    {
                        "name": "amount",
                        "type": "decimal",
                        "description": "the amount to transfer lbc",
                        "is_required": true
                    },
                    {
                        "name": "amount_everything",
                        "type": "bool",
                        "description": "send everything from funding accounts (excluding claims), default: false.",
                        "is_required": false
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    },
                    {
                        "name": "change_account_id",
                        "type": "str",
                        "description": "account where change will go",
                        "is_required": false
                    },
                    {
                        "name": "funding_account_ids",
                        "type": "str",
                        "description": "accounts to fund the transaction",
                        "is_required": false
                    },
                    {
                        "name": "preview",
                        "type": "bool",
                        "description": "do not broadcast the transaction",
                        "is_required": false
                    },
                    {
                        "name": "blocking",
                        "type": "bool",
                        "description": "wait until tx has synced",
                        "is_required": false
                    }
                ],
                "returns": "            {\n                \"txid\": \"hash of transaction in hex\",\n                \"height\": \"block where transaction was recorded\",\n                \"inputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"outputs\": [\n                    {\n                        \"txid\": \"hash of transaction in hex\",\n                        \"nout\": \"position in the transaction\",\n                        \"height\": \"block where transaction was recorded\",\n                        \"amount\": \"value of the txo as a decimal\",\n                        \"address\": \"address of who can spend the txo\",\n                        \"confirmations\": \"number of confirmed blocks\",\n                        \"is_change\": \"payment to change address, only available when it can be determined\",\n                        \"is_received\": \"true if txo was sent from external account to this account\",\n                        \"is_spent\": \"true if txo is spent\",\n                        \"is_mine\": \"payment to one of your accounts, only available when it can be determined\",\n                        \"type\": \"one of 'claim', 'support' or 'purchase'\",\n                        \"name\": \"when type is 'claim' or 'support', this is the claim name\",\n                        \"claim_id\": \"when type is 'claim', 'support' or 'purchase', this is the claim id\",\n                        \"claim_op\": \"when type is 'claim', this determines if it is 'create' or 'update'\",\n                        \"value\": \"when type is 'claim' or 'support' with payload, this is the decoded protobuf payload\",\n                        \"value_type\": \"determines the type of the 'value' field: 'channel', 'stream', etc\",\n                        \"protobuf\": \"hex encoded raw protobuf version of 'value' field\",\n                        \"permanent_url\": \"when type is 'claim' or 'support', this is the long permanent claim URL\",\n                        \"claim\": \"for purchase outputs only, metadata of purchased claim\",\n                        \"reposted_claim\": \"for repost claims only, metadata of claim being reposted\",\n                        \"signing_channel\": \"for signed claims only, metadata of signing channel\",\n                        \"is_channel_signature_valid\": \"for signed claims only, whether signature is valid\",\n                        \"purchase_receipt\": \"metadata for the purchase transaction associated with this claim\"\n                    }\n                ],\n                \"total_input\": \"sum of inputs as a decimal\",\n                \"total_output\": \"sum of outputs, sans fee, as a decimal\",\n                \"total_fee\": \"fee amount\",\n                \"hex\": \"entire transaction encoded in hex\"\n            }",
                "examples": []
            },
            {
                "name": "wallet_status",
                "description": "Status of wallet including encryption/lock state.",
                "arguments": [
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "status of specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "Dictionary of wallet status information.",
                "examples": []
            },
            {
                "name": "wallet_unlock",
                "description": "Unlock an encrypted wallet",
                "arguments": [
                    {
                        "name": "password",
                        "type": "str",
                        "description": "password to use for unlocking",
                        "is_required": true
                    },
                    {
                        "name": "wallet_id",
                        "type": "str",
                        "description": "restrict operation to specific wallet",
                        "is_required": false
                    }
                ],
                "returns": "(bool) true if wallet is unlocked, otherwise false",
                "examples": []
            }
        ]
    }
}